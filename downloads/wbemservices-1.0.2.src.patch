diff -uN -x '*.jar' -x '*.class' -x Version.java -r wbemservices-1.0.2.src/java/wbem/javax/wbem/client/adapter/http/CIMClientXML.java wbemservices-1.0.2.src.patch/java/wbem/javax/wbem/client/adapter/http/CIMClientXML.java
--- wbemservices-1.0.2.src/java/wbem/javax/wbem/client/adapter/http/CIMClientXML.java	2004-10-13 11:02:42.000000000 -0700
+++ wbemservices-1.0.2.src.patch/java/wbem/javax/wbem/client/adapter/http/CIMClientXML.java	2006-11-27 14:00:46.000000000 -0800
@@ -266,6 +266,20 @@
     }
 
     Document call(Document request) throws CIMException, IOException {
+        int numRepeats = Integer.getInteger( "java.wbem.javax.wbem.client.adapter.http.numhits", 10 ).intValue();
+
+        for ( int c = 0; c < numRepeats ; c ++ ) {
+            try {
+                return zCall( request );
+            } catch ( RepeatException e ) {
+                /* do nothing this is just a hack to repeat certain parts of the code */
+            }
+        }
+        
+        throw new CIMException( "Failed after " + numRepeats + " attempts." );
+    }
+
+    Document zCall(Document request) throws CIMException, IOException, RepeatException {
         URL url = getUrl();
 	Document d = null;
 	DocumentBuilder builder = null;
@@ -369,7 +383,7 @@
                     conn.shutdown(true);
 		}
 		conn = null;
-                return call(request);
+                throw new RepeatException();
             }
 
             if (outRequest.getResponseCode() == 
@@ -385,7 +399,7 @@
 		conn.shutdown(true);
 		conn = null;
 		useChunking = false;
-		return call(request);
+                throw new RepeatException();
             }
 
             throw new CIMException("XMLERROR", e);			
@@ -395,6 +409,14 @@
 	}
         return d;
     }
+    
+    /* not the recommended way to do this, but, this will work */
+    private class RepeatException extends Exception
+    {
+        public RepeatException()
+        {
+        }
+    }
 
     private void writeDocumentToOutputStream(Document request, PrintStream out) {
 	// Use a Transformer for output
diff -uN -x '*.jar' -x '*.class' -x Version.java -r wbemservices-1.0.2.src/java/wbem/javax/wbem/client/adapter/http/transport/HttpSocketFactory.java wbemservices-1.0.2.src.patch/java/wbem/javax/wbem/client/adapter/http/transport/HttpSocketFactory.java
--- wbemservices-1.0.2.src/java/wbem/javax/wbem/client/adapter/http/transport/HttpSocketFactory.java	2004-07-11 21:19:10.000000000 -0700
+++ wbemservices-1.0.2.src.patch/java/wbem/javax/wbem/client/adapter/http/transport/HttpSocketFactory.java	2006-11-27 14:03:46.000000000 -0800
@@ -28,8 +28,11 @@
 package javax.wbem.client.adapter.http.transport;
 
 import java.io.IOException;
+
+import java.net.InetSocketAddress;
 import java.net.Socket;
 
+
 import javax.net.SocketFactory;
 import javax.net.ssl.SSLContext;
 import javax.net.ssl.SSLSocketFactory;
@@ -43,6 +46,12 @@
  */
 public class HttpSocketFactory implements HttpClientSocketFactory {
 
+    private static final String PROPERTY_CONNECT_TIMEOUT = "javax.wbem.client.adapter.http.transport.timeout-connect";
+    private static final String PROPERTY_READ_TIMEOUT = "javax.wbem.client.adapter.http.transport.timeout-read";
+
+    private static final Integer DEFAULT_CONNECT_TIMEOUT = Integer.valueOf(0);
+    private static final Integer DEFAULT_READ_TIMEOUT = Integer.valueOf(0);
+
     private static SocketFactory fact = null;
     private static SocketFactory sslfact = null;
     private boolean useSSL = false;
@@ -108,13 +117,24 @@
       * Creates client socket connected to the given host and port.
      */
     public Socket createSocket(String host, int port) throws IOException {
+        /* use the properties to determine the read and connect timeouts */
+        
+        Integer connectTimeout = Integer.getInteger(PROPERTY_CONNECT_TIMEOUT,DEFAULT_CONNECT_TIMEOUT);
+        Integer readTimeout = Integer.getInteger(PROPERTY_READ_TIMEOUT,DEFAULT_READ_TIMEOUT);
+        
+        if (connectTimeout==null) connectTimeout = DEFAULT_CONNECT_TIMEOUT;
+        if (readTimeout==null) readTimeout = DEFAULT_READ_TIMEOUT;
+        
 	// if useSSL is true, return secure socket.  If not, return
 	// regular socket
-        if (useSSL) {
-            return sslfact.createSocket(host, port);
-        } else {
-            return fact.createSocket(host,port);
-        }
+        Socket socket = (useSSL) ? sslfact.createSocket() : fact.createSocket();
+        
+        /* connect with a timeout */
+        socket.connect( new InetSocketAddress( host, port ), connectTimeout.intValue());
+        
+        /* set the SO timeout */
+        socket.setSoTimeout( readTimeout.intValue() );
+        return socket;
     }
     /**
      * Creates layered socket on top of given base socket, for use when
