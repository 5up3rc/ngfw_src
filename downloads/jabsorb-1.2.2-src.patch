diff -urN jabsorb-1.2.2.orig/build.xml jabsorb-1.2.2/build.xml
--- jabsorb-1.2.2.orig/build.xml	2012-06-13 16:45:31.000000000 -0700
+++ jabsorb-1.2.2/build.xml	2012-06-13 16:45:40.000000000 -0700
@@ -53,13 +53,14 @@
   </target>
 
   <target name="compile" depends="init,init-build" description="Compiles the source into the build directory">
-    <javac debug="true" source="1.4" srcdir="${src}" destdir="${build}">
+    <javac debug="true" source="1.5" srcdir="${src}" destdir="${build}">
       <classpath refid="default-classpath" />
     </javac>
   </target>
 
   <target name="dist" depends="compile,compress-web-content,init-build" description="Puts the compiled source into a jar">
-    <jar destfile="${app-jar}" basedir="${build}" excludes="*~" />
+    <jar destfile="${app-jar}" basedir="${build}" excludes="*~" includes="org/jabsorb/**/*.class"/>
+    <jar destfile="json.jar" basedir="${build}" excludes="*~" includes="org/json/**/*.class"/>
   </target>
 
   <target name="test.init" depends="init" description="Makes directories needed for the test jsps">
@@ -69,7 +70,7 @@
   </target>
 
   <target name="compile.test" depends="test.init, dist, init" description="Compiles the testing classes">
-    <javac debug="true" source="1.4" srcdir="${test.src}" destdir="${test.classes}">
+    <javac debug="true" source="1.5" srcdir="${test.src}" destdir="${test.classes}">
       <classpath>
       	<path refid="jarClasspath" />
         <fileset dir="${lib-test}">
@@ -146,6 +147,7 @@
   <target name="clean" depends="init" description="Cleans all files produced by ant">
     <delete file="${app-war}" />
     <delete file="${app-jar}" />
+    <delete file="json.jar"/>
     <delete file="${webapp}/WEB-INF/web.xml.out" />
     <delete file="${webapp}/WEB-INF/web.xml.generated" />
     <delete file="${webapp}/Test.java.txt" />
diff -urN jabsorb-1.2.2.orig/src/org/jabsorb/JSONRPCBridge.java jabsorb-1.2.2/src/org/jabsorb/JSONRPCBridge.java
--- jabsorb-1.2.2.orig/src/org/jabsorb/JSONRPCBridge.java	2012-06-13 16:45:31.000000000 -0700
+++ jabsorb-1.2.2/src/org/jabsorb/JSONRPCBridge.java	2012-06-13 16:46:12.000000000 -0700
@@ -108,8 +108,18 @@
  * <code>JSONRPCBridge.getGlobalBridge().registerClass("MyClass",
  * com.example.MyClass.class);</code>
  */
-public class JSONRPCBridge implements Serializable
+public class JSONRPCBridge
 {
+    public JSONRPCBridge()
+    {
+        try {
+            ser.registerDefaultSerializers();
+        }
+        catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
+
 
   /**
    * Used to determine whether two methods match
@@ -208,11 +218,6 @@
   }
 
   /**
-   * Unique serialisation id. 
-   */
-  private final static long serialVersionUID = 2;
-
-  /**
    * A simple transformer that makes no change
    */
   private static final ExceptionTransformer IDENTITY_EXCEPTION_TRANSFORMER = new ExceptionTransformer()
@@ -242,18 +247,10 @@
   /**
    * Global JSONSerializer instance
    */
-  private static JSONSerializer ser = new JSONSerializer();
+  private JSONSerializer ser = new JSONSerializer();
 
   static
   {
-    try
-    {
-      ser.registerDefaultSerializers();
-    }
-    catch (Exception e)
-    {
-      e.printStackTrace();
-    }
   }
 
   /**
@@ -269,11 +266,11 @@
   }
 
   /**
-   * Get the global JSONSerializer object.
+   * Get the JSONSerializer object.
    * 
    * @return the global JSONSerializer object.
    */
-  public static JSONSerializer getSerializer()
+  public JSONSerializer getSerializer()
   {
     return ser;
   }
@@ -299,13 +296,13 @@
   }
 
   /**
-   * Set the global JSONSerializer object.
+   * Set the JSONSerializer object.
    * 
-   * @param ser the global JSONSerializer object.
+   * @param ser the JSONSerializer object.
    */
-  public static void setSerializer(JSONSerializer ser)
+  public void setSerializer(JSONSerializer newValue)
   {
-    JSONRPCBridge.ser = ser;
+      this.ser = newValue;
   }
 
   /* Implementation */
@@ -645,7 +642,6 @@
           cbc.preInvokeCallback(context[i], itsThis, method, javaArgs);
         }
       }
-
       // Invoke the method
       Object returnObj = method.invoke(itsThis, javaArgs);
 
@@ -677,6 +673,9 @@
         }
       }
       log.error("exception occured",e);
+      for ( Throwable cause = e.getCause() ; cause != null ; cause = cause.getCause() ) {
+          log.error("exception cause: ", cause);
+      }
       result = new JSONRPCResult(JSONRPCResult.CODE_ERR_UNMARSHALL, requestId,
           e.getMessage());
     }
@@ -690,6 +688,9 @@
         }
       }
       log.error("exception occured",e);
+      for ( Throwable cause = e.getCause() ; cause != null ; cause = cause.getCause() ) {
+          log.error("exception cause: ", cause);
+      }
       result = new JSONRPCResult(JSONRPCResult.CODE_ERR_MARSHALL, requestId, e
           .getMessage());
     }
@@ -707,6 +707,9 @@
         }
       }
       log.error("exception occured",e);
+      for ( Throwable cause = e.getCause() ; cause != null ; cause = cause.getCause() ) {
+          log.error("exception cause: ", cause);
+      }
       result = new JSONRPCResult(JSONRPCResult.CODE_REMOTE_EXCEPTION,
           requestId, exceptionTransformer.transform(e));
     }
diff -urN jabsorb-1.2.2.orig/src/org/jabsorb/JSONSerializer.java jabsorb-1.2.2/src/org/jabsorb/JSONSerializer.java
--- jabsorb-1.2.2.orig/src/org/jabsorb/JSONSerializer.java	2012-06-13 16:45:31.000000000 -0700
+++ jabsorb-1.2.2/src/org/jabsorb/JSONSerializer.java	2012-06-13 16:45:40.000000000 -0700
@@ -718,7 +718,7 @@
       try
       {
         className = ((JSONObject) o).getString("javaClass");
-        return Class.forName(className);
+        return Class.forName(className,true,Thread.currentThread().getContextClassLoader());
       }
       catch (Exception e)
       {
@@ -746,9 +746,9 @@
       {
         if (compClazz.isArray())
         {
-          return Class.forName("[" + compClazz.getName());
+            return Class.forName("[" + compClazz.getName(),true,Thread.currentThread().getContextClassLoader());
         }
-        return Class.forName("[L" + compClazz.getName() + ";");
+        return Class.forName("[L" + compClazz.getName() + ";",true,Thread.currentThread().getContextClassLoader());
       }
       catch (ClassNotFoundException e)
       {
diff -urN jabsorb-1.2.2.orig/src/org/jabsorb/serializer/impl/BooleanSerializer.java jabsorb-1.2.2/src/org/jabsorb/serializer/impl/BooleanSerializer.java
--- jabsorb-1.2.2.orig/src/org/jabsorb/serializer/impl/BooleanSerializer.java	2012-06-13 16:45:31.000000000 -0700
+++ jabsorb-1.2.2/src/org/jabsorb/serializer/impl/BooleanSerializer.java	2012-06-13 16:45:40.000000000 -0700
@@ -97,6 +97,11 @@
     {
       returnValue = (Boolean) jso;
     }
+    else if (clazz == Boolean.class)
+    {
+      returnValue = (Boolean)jso;
+    }
+
 
     state.setSerialized(jso, returnValue);
     return returnValue;
diff -urN jabsorb-1.2.2.orig/src/org/jabsorb/serializer/ObjectMatch.java jabsorb-1.2.2/src/org/jabsorb/serializer/ObjectMatch.java
--- jabsorb-1.2.2.orig/src/org/jabsorb/serializer/ObjectMatch.java	2012-06-13 16:45:31.000000000 -0700
+++ jabsorb-1.2.2/src/org/jabsorb/serializer/ObjectMatch.java	2012-06-13 16:45:40.000000000 -0700
@@ -102,6 +102,10 @@
    */
   public ObjectMatch max(ObjectMatch m)
   {
+      if (m == null)
+          {
+              return this;
+          }
     if (this.mismatch > m.mismatch)
     {
       return this;
