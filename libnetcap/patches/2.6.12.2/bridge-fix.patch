diff -urN --ignore-all-space linux-2.6.12.2-orig/net/ipv4/ip_output.c linux-2.6.12.2-bridgefix/net/ipv4/ip_output.c
--- linux-2.6.12.2-orig/net/ipv4/ip_output.c	2005-06-29 16:00:53.000000000 -0700
+++ linux-2.6.12.2-bridgefix/net/ipv4/ip_output.c	2005-07-13 14:36:47.903874442 -0700
@@ -111,7 +111,6 @@
 #ifdef CONFIG_NETFILTER_DEBUG
 	nf_debug_ip_loopback_xmit(newskb);
 #endif
-	nf_reset(newskb);
 	netif_rx(newskb);
 	return 0;
 }
@@ -196,8 +195,6 @@
 	nf_debug_ip_finish_output2(skb);
 #endif /*CONFIG_NETFILTER_DEBUG*/
 
-	nf_reset(skb);
-
 	if (hh) {
 		int hh_alen;
 
diff -urN --ignore-all-space linux-2.6.12.2-orig/net/ipv4/netfilter/ip_conntrack_standalone.c linux-2.6.12.2-bridgefix/net/ipv4/netfilter/ip_conntrack_standalone.c
--- linux-2.6.12.2-orig/net/ipv4/netfilter/ip_conntrack_standalone.c	2005-06-29 16:00:53.000000000 -0700
+++ linux-2.6.12.2-bridgefix/net/ipv4/netfilter/ip_conntrack_standalone.c	2005-07-13 14:35:48.928249104 -0700
@@ -432,6 +432,13 @@
 				        const struct net_device *out,
 				        int (*okfn)(struct sk_buff *))
 {
+#if !defined(CONFIG_IP_NF_NAT) && !defined(CONFIG_IP_NF_NAT_MODULE)
+	/* Previously seen (loopback)?  Ignore.  Do this before
+           fragment check. */
+	if ((*pskb)->nfct)
+		return NF_ACCEPT;
+#endif
+
 	/* Gather fragments. */
 	if ((*pskb)->nh.iph->frag_off & htons(IP_MF|IP_OFFSET)) {
 		*pskb = ip_ct_gather_frags(*pskb,
diff -urN --ignore-all-space linux-2.6.12.2-orig/net/packet/af_packet.c linux-2.6.12.2-bridgefix/net/packet/af_packet.c
--- linux-2.6.12.2-orig/net/packet/af_packet.c	2005-06-29 16:00:53.000000000 -0700
+++ linux-2.6.12.2-bridgefix/net/packet/af_packet.c	2005-07-13 14:35:48.929249030 -0700
@@ -274,6 +274,9 @@
 	dst_release(skb->dst);
 	skb->dst = NULL;
 
+	/* drop conntrack reference */
+	nf_reset(skb);
+
 	spkt = (struct sockaddr_pkt*)skb->cb;
 
 	skb_push(skb, skb->data-skb->mac.raw);
@@ -517,6 +520,9 @@
 	dst_release(skb->dst);
 	skb->dst = NULL;
 
+	/* drop conntrack reference */
+	nf_reset(skb);
+
 	spin_lock(&sk->sk_receive_queue.lock);
 	po->stats.tp_packets++;
 	__skb_queue_tail(&sk->sk_receive_queue, skb);
