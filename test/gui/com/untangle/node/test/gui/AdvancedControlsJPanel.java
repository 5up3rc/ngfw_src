/*
 * $HeadURL$
 * Copyright (c) 2003-2007 Untangle, Inc. 
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License, version 2,
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * AS-IS and WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE, TITLE, or
 * NONINFRINGEMENT.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 */


package com.untangle.node.test.gui;

import com.untangle.gui.util.Util;
import com.untangle.uvm.node.NodeContext;
import com.untangle.node.test.TestSettings;
import com.untangle.node.test.TestNode;

public class AdvancedControlsJPanel extends javax.swing.JPanel {

    private NodeContext nodeContext;
    private TestSettings nodeSettings;


    public AdvancedControlsJPanel(NodeContext nodeContext) {
        this.nodeContext = nodeContext;

        initComponents();


        if(nodeContext != null){
            nodeSettings =  ((TestNode)nodeContext.node()).getTestSettings();
            // FIXME: DEPRECATED
            // doubleEndpointJCheckBox.setSelected(nodeSettings.modeDEM());
            bufferedJCheckBox.setSelected(nodeSettings.isBuffered());
            normalJCheckBox.setSelected(nodeSettings.isNormal());
            releaseJCheckBox.setSelected(nodeSettings.getRelease());
            quietJCheckBox.setSelected(nodeSettings.isQuiet());
            randomBufferSizeJCheckBox.setSelected(nodeSettings.getRandomBufferSizes());
            minJSpinner.setValue( new Integer(nodeSettings.getMinRandomBufferSize()) );
            maxJSpinner.setValue( new Integer(nodeSettings.getMaxRandomBufferSize()) );
        }

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        doubleEndpointJCheckBox = new javax.swing.JCheckBox();
        bufferedJCheckBox = new javax.swing.JCheckBox();
        normalJCheckBox = new javax.swing.JCheckBox();
        releaseJCheckBox = new javax.swing.JCheckBox();
        quietJCheckBox = new javax.swing.JCheckBox();
        randomBufferSizeJCheckBox = new javax.swing.JCheckBox();
        minJSpinner = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        maxJSpinner = new javax.swing.JSpinner();
        commitJButton = new javax.swing.JButton();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        doubleEndpointJCheckBox.setFont(new java.awt.Font("Dialog", 0, 12));
        doubleEndpointJCheckBox.setText("Double Endpoint");
        add(doubleEndpointJCheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));

        bufferedJCheckBox.setFont(new java.awt.Font("Dialog", 0, 12));
        bufferedJCheckBox.setText("Buffered");
        add(bufferedJCheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, -1, -1));

        normalJCheckBox.setFont(new java.awt.Font("Dialog", 0, 12));
        normalJCheckBox.setText("Normal");
        add(normalJCheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, -1, -1));

        releaseJCheckBox.setFont(new java.awt.Font("Dialog", 0, 12));
        releaseJCheckBox.setText("Release");
        add(releaseJCheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, -1, -1));

        quietJCheckBox.setFont(new java.awt.Font("Dialog", 0, 12));
        quietJCheckBox.setText("Quiet (read only)");
        add(quietJCheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, -1, -1));

        randomBufferSizeJCheckBox.setFont(new java.awt.Font("Dialog", 0, 12));
        randomBufferSizeJCheckBox.setText("Use Random Buffer Size");
        add(randomBufferSizeJCheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 140, -1, -1));

        minJSpinner.setFont(new java.awt.Font("Dialog", 0, 12));
        add(minJSpinner, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 170, 80, -1));

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel1.setText("min:");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 172, -1, -1));

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel2.setText("max:");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 192, -1, -1));

        maxJSpinner.setFont(new java.awt.Font("Dialog", 0, 12));
        add(maxJSpinner, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 190, 80, -1));

        commitJButton.setFont(new java.awt.Font("Dialog", 0, 12));
        commitJButton.setText("Commit");
        commitJButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    commitJButtonActionPerformed(evt);
                }
            });

        add(commitJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 240, -1, -1));

    }//GEN-END:initComponents

    private void commitJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_commitJButtonActionPerformed
        if( nodeContext == null)
            return;

        // FIXME
        // nodeSettings.modeDEM(doubleEndpointJCheckBox.isSelected());
        nodeSettings.setBuffered(bufferedJCheckBox.isSelected());
        nodeSettings.setNormal(normalJCheckBox.isSelected());
        nodeSettings.setRelease(releaseJCheckBox.isSelected());
        nodeSettings.setQuiet(quietJCheckBox.isSelected());
        nodeSettings.setRandomBufferSizes(randomBufferSizeJCheckBox.isSelected());
        nodeSettings.setMinRandomBufferSize( ((Integer)minJSpinner.getValue()).intValue() );
        nodeSettings.setMaxRandomBufferSize( ((Integer)maxJSpinner.getValue()).intValue() );
        try {
            ((TestNode)nodeContext.node()).setTestSettings(nodeSettings);
        } catch (Exception e) {
            Util.handleExceptionNoRestart("Error comitting", e);
        }

    }//GEN-LAST:event_commitJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox bufferedJCheckBox;
    private javax.swing.JButton commitJButton;
    private javax.swing.JCheckBox doubleEndpointJCheckBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JSpinner maxJSpinner;
    private javax.swing.JSpinner minJSpinner;
    private javax.swing.JCheckBox normalJCheckBox;
    private javax.swing.JCheckBox quietJCheckBox;
    private javax.swing.JCheckBox randomBufferSizeJCheckBox;
    private javax.swing.JCheckBox releaseJCheckBox;
    // End of variables declaration//GEN-END:variables

}
