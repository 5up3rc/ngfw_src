#! /bin/sh

MVVM_LOGDIR="/var/log/mvvm"
MVVM_CACHEDIR="/var/lib/mvvm"
NAT_CACHE_DEST="${MVVM_CACHEDIR}/nat-transform.deb"

APT_CACHE_DIR="/var/cache/apt/archives"

USER=root
GROUP=adm

# modify limit to support many file descriptors
LIMITS_FILE=/etc/security/limits.conf
LIMITS_LINE="${USER}    soft    nofile  128000"
LIMITS_LINE2="${USER}   hard    nofile  128000"

if [ -z "`grep ${USER} ${LIMITS_FILE}`" ] ; then
    echo ${LIMITS_LINE} >> ${LIMITS_FILE}
    echo ${LIMITS_LINE2} >> ${LIMITS_FILE}
else
    sed -i -e "s|^${USER}.*soft.*|${LIMITS_LINE}|g" ${LIMITS_FILE}
    sed -i -e "s|^${USER}.*hard.*|${LIMITS_LINE2}|g" ${LIMITS_FILE}
fi

# tell PAM (login and su) to read the limits file
LOGIN_LINE="session    required   pam_limits.so"

LOGIN_FILE=/etc/pam.d/login
if [ -z "`grep pam_limits.so ${LOGIN_FILE}`" ] ; then
    echo ${LOGIN_LINE} >> ${LOGIN_FILE}
else
    sed -i -e "s|^.*pam_limits.so.*|${LOGIN_LINE}|g" ${LOGIN_FILE}
fi

LOGIN_FILE=/etc/pam.d/su
if [ -z "`grep pam_limits.so ${LOGIN_FILE}`" ] ; then
    echo ${LOGIN_LINE} >> ${LOGIN_FILE}
else
    sed -i -e "s|^.*pam_limits.so.*|${LOGIN_LINE}|g" ${LOGIN_FILE}
fi

# Have cron.daily run earlier in the day, at a random time between 1:00 and 2:00
CRONTAB_FILE=/etc/crontab
if [ -f "${CRONTAB_FILE}" ] ; then
    let "ranmin = $RANDOM % 60"
    grep -sq "^25 6" ${CRONTAB_FILE} && sed -i -e "s|^25 6|${ranmin} 1|" ${CRONTAB_FILE}
fi

# Extract the activation key if we were installed by a version older than 3.1
if [ ! -f /usr/share/metavize/activation.key ]; then
    grep -sq "release.*\.metavize\.com" /etc/apt/sources.list && grep "release.*\.metavize\.com" /etc/apt/sources.list | sed -e "s|^.*http://||" -e "s|:.*||" > /usr/share/metavize/activation.key
fi

# Fix up older production boxes
if [ -d /usr/sbin/mv ]; then
    sed -i -e "s|FSCKFIX=.*|FSCKFIX=yes|" /etc/default/rcS
    sed -i -e "s|errors=remount-ro|errors=panic|" /etc/fstab
    grep -sq panic= /boot/grub/menu.lst || sed -i -e "s|nodhcp|nodhcp panic=5|" /boot/grub/menu.lst
fi

# Be very careful with this one.
CHECKROOTSH=/etc/init.d/checkroot.sh
SYSVINITVER=
SYSVINITPKG="`dpkg --get-selections sysvinit | egrep 'install$' | awk '{print $1}'`"
if [ ! -z "$SYSVINITPKG" ] ; then
    SYSVINITVER=`dpkg-query -W "$SYSVINITPKG" | awk '{ if ($2) print $2; }'`
    if [ "2:2.84-188" = "$SYSVINITVER" ] ; then
        grep -sq -e '-gt 1' $CHECKROOTSH && sed -i -e 's|-gt 1|-gt 3|' -e 's|reboot -f|reboot -f\n    elif [ $? -ge 2 ]\n    then\n      reboot -f|' $CHECKROOTSH
    fi
fi


# right permissions for all those dirs
/bin/chown -R $USER:$GROUP ${MVVM_LOGDIR} ${MVVM_CACHEDIR}
/bin/chmod 775 ${MVVM_LOGDIR} ${MVVM_CACHEDIR}

update-schema mvvm
echo "UPDATE transform_persistent_state SET name = 'http-casing' WHERE name = 'http-transform';" | psql -U metavize mvvm

# start mvvm
if [ -x "/etc/init.d/mvvm" ]; then
    update-rc.d mvvm defaults 50 > /dev/null
fi

## Touch all of the webstart files so the client always loads the new version
find /usr/share/metavize/web/webstart 2>/dev/null | xargs touch > /dev/null 2>&1

# delete old files
rm -f /etc/default/bunnicula

## Function to load a local copy of the NAT transform.
function cacheNatTransformLocal()
{
    local t_natPackage=`ls -t -1 ${APT_CACHE_DIR}/nat-transform_*.deb 2>/dev/null | head -n 1`

    if [ -z "${t_natPackage}" ] || [ -z "${t_mvvmVersion}" ]; then
        echo "There is not a cached package."
        return 1
    fi
    
    local t_natVersion=`basename ${t_natPackage} | sed -e 's|nat-transform_||'`
    
    if [ "${t_natVersion}x"  != "${t_mvvmVersion}x" ]; then
        echo "Cached version is not up to date."
        echo "${t_natVersion} != ${t_mvvmVersion}"
        return 1
    fi
    
    echo "Cached version is up to date, copying from cache"
    
    cp ${t_natPackage} ${NAT_CACHE_DEST}
    return 0
}

function cacheNatTransformRemote()
{
    local t_urlBase=`grep ' metavize' /etc/apt/sources.list | head -n 1 | awk '{print $2}'`
    
    local t_serverAddress=`echo ${t_urlBase} | sed  -e 's|http://[^@]*@||' -e 's|http://||' -e 's|/.*||'`
    
    local t_packageList

    local t_natPackage
    local t_natVersion
    
    for t_packageList in `ls -1 /var/lib/apt/lists/${t_serverAddress}*_binary*_Packages`; do
        echo "Package list: ${t_packageList}"
        t_natPackage=`grep 'nat-transform.*\.deb$' ${t_packageList} | sed -e 's|Filename: ||'`
        
        ## Continue if it didn't find the package
        if [ -z "${t_natPackage}" ]; then
            echo "The NAT transform is not in the package list: ${t_packageList}"
            continue
        fi
        
        t_natVersion=`echo ${t_natPackage} | sed 's|.*nat-transform_||'`

        if [ "${t_natVersion}x" != "${t_mvvmVersion}x" ]; then
            echo "The NAT transform in package list: ${t_packageList} is not the current version"
            echo "${t_natVersion} != ${t_mvvmVersion}"
            continue
        fi
        
        t_natPackage="${t_urlBase}/${t_natPackage}"

        echo "Downloading the nat-transform ${t_natPackage}"
        wget -O ${NAT_CACHE_DEST} ${t_natPackage} || continue
        echo "Successfully downloaded ${t_natPackage}"
        
        break
    done        
}

function cacheNatTransform()
{
    local t_mvvmPackage=`ls -t -1 ${APT_CACHE_DIR}/mvvm_*.deb  | head -n 1`
    local t_mvvmVersion=`basename ${t_mvvmPackage} | sed -e 's|mvvm_||'`

    mkdir -p ${MVVM_CACHEDIR}
    
    ## First check to see if a copy is available in the cache, this way
    ## you don't have to do another download
    cacheNatTransformLocal || cacheNatTransformRemote    
    return 0
}

## Cache is not up to date, grab a copy online
cacheNatTransform
