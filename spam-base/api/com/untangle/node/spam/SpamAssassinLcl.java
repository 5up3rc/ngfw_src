/*
 * $HeadURL:$
 * Copyright (c) 2003-2007 Untangle, Inc. 
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License, version 2,
 * as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but
 * AS-IS and WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE, TITLE, or
 * NONINFRINGEMENT.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Linking this library statically or dynamically with other modules is
 * making a combined work based on this library.  Thus, the terms and
 * conditions of the GNU General Public License cover the whole combination.
 *
 * As a special exception, the copyright holders of this library give you
 * permission to link this library with independent modules to produce an
 * executable, regardless of the license terms of these independent modules,
 * and to copy and distribute the resulting executable under terms of your
 * choice, provided that you also meet, for each linked independent module,
 * the terms and conditions of the license of that module.  An independent
 * module is a module which is not derived from or based on this library.
 * If you modify this library, you may extend this exception to your version
 * of the library, but you are not obligated to do so.  If you do not wish
 * to do so, delete this exception statement from your version.
 */

package com.untangle.node.spam;

import java.io.Serializable;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.GeneratedValue;
import javax.persistence.Table;

/**
 * SpamAssassin Local Default configuration
 *
 * @author <a href="mailto:amread@untangle.com">Aaron Read</a>
 * @version 1.0
 */
@Entity
@Table(name="n_spamassassin_lcl", schema="settings")
public class SpamAssassinLcl implements Serializable
{
    private static final long serialVersionUID = -7246008133224042345L;

    private static final String LCL_COMMENT_SETTING = "## Auto-generated by Untangle Server, do not manually edit. ##";
    private static final String LCL_COMMENT_VAL = null;
    private static final String LCL_COMMENT_DESC = null;

    public static final SpamAssassinLcl LCL_COMMENT_LCL = new SpamAssassinLcl(LCL_COMMENT_SETTING, LCL_COMMENT_VAL, LCL_COMMENT_DESC, false);

    // required option settings:
    // clear_report_template
    // report _SUMMARY_
    // (these option settings should never be changed, de-activated, or removed
    //  - SpamAssassinClient depends on them)
    private static final String RESET_RPT_TEMPL_SETTING = "clear_report_template";
    private static final String RESET_RPT_TEMPL_VAL = null;
    private static final String RESET_RPT_TEMPL_DESC = "Clear spamd report template.";
    private static final String RPT_SETTING = "report";
    private static final String SUMMARY_RPT_VAL = "_SUMMARY_";
    private static final String RPT_DESC = "Use template to report spamd test results - use summary template";

    public static final SpamAssassinLcl RESET_RPT_TEMPL_LCL = new SpamAssassinLcl(RESET_RPT_TEMPL_SETTING, RESET_RPT_TEMPL_VAL, RESET_RPT_TEMPL_DESC, true);
    public static final SpamAssassinLcl RPT_LCL = new SpamAssassinLcl(RPT_SETTING, SUMMARY_RPT_VAL, RPT_DESC, true);

    // default option settings:
    // score ALL_TRUSTED 0
    // lock_method flock
    // auto_whitelist_factor 0.3
    // pyzor_timeout 3
    // (these options settings may be changed, de-activated, or removed)
    public static final String SCORE_SETTING = "score";
    public static final String ALL_TRUSTED_SCORE_VAL = "ALL_TRUSTED 0";
    public static final String SCORE_DESC = "Assign specific scores to these rule tests - disable ALL_TRUSTED rule tests.";
    public static final String LOCK_DB_FILES_SETTING = "lock_method";
    public static final String FLOCK_LOCK_DB_FILES_VAL = "flock";
    public static final String LOCK_DB_FILES_DESC = "Lock database files - use flock(); database files are stored on local disks and not on NFS.";
    public static final String AUTO_WL_FACTOR_SETTING = "auto_whitelist_factor";
    public static final String AUTO_WL_FACTOR_VAL = "0.3";
    public static final String AUTO_WL_FACTOR_DESC = "Adjust calculated score towards sender's long-term mean score - adjust calculated score 1/3 of the way closer to the mean score.";
    public static final String PYZOR_TIMEOUT_SETTING = "pyzor_timeout";
    public static final String PYZOR_TIMEOUT_VAL = "3";
    public static final String PYZOR_TIMEOUT_DESC = "Ignore Pyzor if it fails to return result after X secs - wait max of 3 secs.";

    public static final String UNWHITELIST_FROM_SETTING = "unwhitelist_from";
    public static final String UNWHITELIST_FROM_RCVD_SETTING = "unwhitelist_from_rcvd"; // preferred unwhitelist setting
    public static final String UNWHITELIST_FROM_DESC = "Override a default whitelist_from entry.";
    public static final String UNWHITELIST_FROM_RCVD_DESC = "Override a default whitelist_from_rcvd entry.";

    public static final SpamAssassinLcl SCORE_LCL = new SpamAssassinLcl(SCORE_SETTING, ALL_TRUSTED_SCORE_VAL, SCORE_DESC, true);
    public static final SpamAssassinLcl LOCK_DB_FILES_LCL = new SpamAssassinLcl(LOCK_DB_FILES_SETTING, FLOCK_LOCK_DB_FILES_VAL, LOCK_DB_FILES_DESC, true);
    public static final SpamAssassinLcl AUTO_WL_FACTOR_LCL = new SpamAssassinLcl(AUTO_WL_FACTOR_SETTING, AUTO_WL_FACTOR_VAL, AUTO_WL_FACTOR_DESC, true);
    public static final SpamAssassinLcl PYZOR_TIMEOUT_LCL = new SpamAssassinLcl(PYZOR_TIMEOUT_SETTING, PYZOR_TIMEOUT_VAL, PYZOR_TIMEOUT_DESC, true);

    private static final String EMPTY_SETTING = "#";
    private static final String EMPTY_VAL = null;
    private static final String EMPTY_DESC = null;
    public static final SpamAssassinLcl EMPTY_LCL = new SpamAssassinLcl(EMPTY_SETTING, EMPTY_VAL, EMPTY_DESC, false);

    public static final String EMPTY_DESCRIPTION = EMPTY_DESC;

    private Long id;

    private String optName;
    private String optValue;
    private String description = EMPTY_DESCRIPTION;
    private boolean active = false;

    // constructors -----------------------------------------------------------

    public SpamAssassinLcl() {}

    public SpamAssassinLcl(String optName, String optValue, String description, boolean active) {
        this.optName = optName;
        this.optValue = optValue;
        this.description = description;
        this.active = active;
    }

    // accessors --------------------------------------------------------------

    @Id
    @Column(name="id")
    @GeneratedValue
    private Long getId() {
        return id;
    }

    private void setId(Long id) {
        this.id = id;
    }

    /**
     * name of SpamAssassin Local Default option
     *
     * @return name of SpamAssassin Local Default option
     */
    @Column(nullable=false)
    public String getOptName() {
        return optName;
    }

    public void setOptName(String optName) {
        this.optName = optName;
        return;
    }

    /**
     * value of SpamAssassin Local Default option
     *
     * @return value of SpamAssassin Local Default option
     */
    @Column(nullable=true)
    public String getOptValue() {
        return optValue;
    }

    public void setOptValue(String optValue) {
        this.optValue = optValue;
        return;
    }

    /**
     * description of optName (for display)
     *
     * @return description of optName
     */
    @Column(nullable=true)
    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
        return;
    }

    /**
     * active option flag
     * - if not active, option is commented out
     *   (line with option starts with '#' char)
     *
     * @return active option flag
     */
    @Column(nullable=false)
    public boolean getActive() {
        return active;
    }

    public void setActive(boolean active) {
        this.active = active;
        return;
    }

    public boolean equalsOptName(SpamAssassinLcl testLcl) {
        return optName.equalsIgnoreCase(testLcl.getOptName());
    }

    public boolean equalsOptValue(SpamAssassinLcl testLcl) {
        String testOptValue = testLcl.getOptValue();
        return (null == optValue && null != testOptValue ? false :
                null == optValue && null == testOptValue ? true :
                optValue.equalsIgnoreCase(testOptValue));
    }

    public String toString() {
        StringBuilder strBuilder = new StringBuilder();
        if (false == active) {
            if (0 == optName.length())
                strBuilder = strBuilder.append("");
            else
                strBuilder = strBuilder.append("# ").append(optName);
        } else {
            if (null == optValue)
                strBuilder.append(optName);
            else
                strBuilder.append(optName).append(" ").append(optValue);
        }

        return strBuilder.toString();
    }
}
