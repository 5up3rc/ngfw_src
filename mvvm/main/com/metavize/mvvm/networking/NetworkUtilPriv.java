/*
 * Copyright (c) 2003, 2004, 2005, 2006 Metavize Inc.
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of
 * Metavize Inc. ("Confidential Information").  You shall
 * not disclose such Confidential Information.
 *
 *  $Id$
 */

package com.metavize.mvvm.networking;

import java.util.LinkedList;
import java.util.List;

import com.metavize.mvvm.MvvmContextFactory;
import com.metavize.mvvm.argon.ArgonException;
import com.metavize.mvvm.argon.IntfConverter;
import com.metavize.mvvm.util.ConfigFileUtil;
import org.apache.log4j.Logger;


/* Utilities that are only required inside of this package */
class NetworkUtilPriv extends NetworkUtil
{
    private static final Logger logger = Logger.getLogger( NetworkUtilPriv.class );

    private static final NetworkUtilPriv INSTANCE = new NetworkUtilPriv();

    private static final int DDCLIENT_UPDATE_INTERVAL = 300; // Seconds (5 minutes)
    private static final String DDCLIENT_CMD          = "/etc/init.d/ddclient ";
    private static final String DDCLIENT_CMD_STOP  = DDCLIENT_CMD + " stop";
    private static final String DDCLIENT_CMD_RESTART  = DDCLIENT_CMD + " restart";
    private static final String DDCLIENT_CONF_FILE    = "/etc/ddclient.conf";
    private static final String DDCLIENT_DEFAULT_FILE    = "/etc/default/ddclient";

    private static final String DDCLIENT_CONF_START =
        "# AUTOGENERATED BY METAVIZE DO NOT MODIFY MANUALLY\n\n" +
        "pid=/var/run/ddclient.pid\n" +
        "use=if, if=eth0\n";

    private static final String DDCLIENT_DEFAULT_START =
        "# AUTOGENERATED BY METAVIZE DO NOT MODIFY MANUALLY\n\n" +
        "run_ipup=\"false\"\n" +
        "daemon_interval=\"" + DDCLIENT_UPDATE_INTERVAL + "\"\n";

    /* Prefix for the bridge devices */
    private static final String BRIDGE_PREFIX  = "br";

    private NetworkUtilPriv()
    {
    }

    /* Not a well named function, it is used before saving to update all of the indices
     * and the lists that go into the different objects that are referenced */
    void complete( NetworkSettings config ) throws NetworkException, ArgonException
    {
        int index = 1;
        IntfConverter ic = IntfConverter.getInstance();

        for ( NetworkSpace space : (List<NetworkSpace>)config.getNetworkSpaceList()) {
            /* Set the index of this network space */
            space.setIndex( index );

            /* Create a list of all of the interfaces beloning to this network space */
            List<Interface> spaceInterfaceList = new LinkedList<Interface>();
            Interface primary = null;
            for ( Interface intf : (List<Interface>)config.getInterfaceList()) {
                /* Keep track of the first interface, use this to set the device name later */
                if ( intf.getNetworkSpace().equals( space )) {
                    if ( primary == null ) primary = intf;
                    spaceInterfaceList.add( intf );
                }
            }

            if ( primary == null ) {
                throw new NetworkException( "The space [" + space + "] doesn't have any interfaces" );
            }

            space.setInterfaceList( spaceInterfaceList );

            /* Last set the name of the device */
            if ( space.isBridge()) {
                space.setDeviceName( BRIDGE_PREFIX + index );
            } else {
                space.setDeviceName( getDeviceName( primary ));
            }

            index++;
        }
    }

    // Writes out the new ddclient config files when the ddns settings change.
    void writeDDNSConfiguration(DynamicDNSSettings settings, String hostName)
    {
        StringBuilder sb = new StringBuilder();
        boolean enabled = settings.isEnabled();

        sb.append(DDCLIENT_CONF_START);
        if (enabled) {
            // Don't write out any potentially sensitive information unless needed.
            sb.append("protocol=");
            sb.append(settings.getProtocol());
            sb.append("\n");
            sb.append("server=");
            sb.append(settings.getServer());
            sb.append("\n");
            sb.append("login=");
            sb.append(settings.getLogin());
            sb.append("\n");
            sb.append("password=");
            sb.append(settings.getPassword());
            sb.append("\n");
            sb.append(hostName);
            sb.append("\n");
        }
        ConfigFileUtil.writeFile( sb, DDCLIENT_CONF_FILE );
        ConfigFileUtil.protectFile(DDCLIENT_CONF_FILE);

        // Must stop before writing default file since /etc/init.d/ddclient script is stupid
        if (!enabled)
            stopDDNS();

        sb = new StringBuilder();
        sb.append(DDCLIENT_DEFAULT_START);
        sb.append("run_daemon=\"");
        if (enabled)
            sb.append("true");
        else
            sb.append("false");
        sb.append("\"\n");
        ConfigFileUtil.writeFile( sb, DDCLIENT_DEFAULT_FILE );
        ConfigFileUtil.protectFile(DDCLIENT_DEFAULT_FILE);

        if (enabled)
            restartDDNS();
    }

    void restartDDNS() {
        int code;

        try {
            logger.debug( "Restarting ddclient server" );

            Process p = MvvmContextFactory.context().exec( DDCLIENT_CMD_RESTART );
            code = p.waitFor();
        } catch ( Exception e ) {
            logger.error( "Unable to restart ddclient server", e );
            return;
        }

        if ( code != 0 ) {
            logger.error( "Error restarting ddclient server" + code );
        }
    }

    void stopDDNS() {
        int code;

        try {
            logger.debug( "Stopping ddclient server" );

            Process p = MvvmContextFactory.context().exec( DDCLIENT_CMD_STOP );
            code = p.waitFor();
        } catch ( Exception e ) {
            logger.error( "Unable to stop ddclient server", e );
            return;
        }

        if ( code != 0 ) {
            logger.error( "Error stopping ddclient server" + code );
        }
    }



    String getDeviceName( Interface intf ) throws ArgonException
    {
        IntfConverter ic = IntfConverter.getInstance();

        return ic.argonIntfToString( intf.getArgonIntf());
    }

    static NetworkUtilPriv getPrivInstance()
    {
        return INSTANCE;
    }
}
