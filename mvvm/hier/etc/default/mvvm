# MVVM server settings -*-sh-*-

## Simply function for taking a string, trim surround space, and the convert
## space separators to the token string. eg join_string " a b c " ";" -> "a;b;c"
join_string() {
    echo $1 | sed -e 's/^ *//g' -e 's/ *$//g' -e "s/ \\+/$2/g"
}

DEFAULT_DMZ="eth2"

# Use the following to configure your local installation
MVVM_LOGDIR=@PREFIX@/var/log/mvvm
MVVM_RUNDIR=@PREFIX@/var/run
MVVM_RESTART_PIDFILE=$MVVM_RUNDIR/mvvm-restart.pid
MVVM_REBOOT_PIDFILE=$MVVM_RUNDIR/mvvm-reboot.pid
MVVM_CONSOLE_LOG=${MVVM_CONSOLE_LOG:-$MVVM_LOGDIR/console.log}
MVVM_WRAPPER_LOG=$MVVM_LOGDIR/wrapper.log
MVVM_GC_LOG=$MVVM_LOGDIR/gc.log
MVVM_CMD=@PREFIX@/usr/bin/mvvm.sh
MVVM_USER=root
## Defaults to 10000 in the code, set here if you want something else
MVVM_SESSION_LIMIT=""

MVVM_ARGS=""

# activation files
ACTIVATION_KEY_FILE=@PREFIX@/usr/share/metavize/activation.key
ACTIVATION_KEY_FILE_TMP=${ACTIVATION_KEY_FILE}.tmp
TMP_ARCHIVE=@PREFIX@/tmp/activation.tar
ACTIVATION_URL="https://ob1.metaloft.com/cgi-bin/get-license-key.rb?license_key="
FAKE_KEY=0000-0000-0000-0000

## For testing, uncomment and setup interfaces here, the values below should not be modified.
#MVVM_INTERNAL_INTF=""
#MVVM_EXTERNAL_INTF=""
#MVVM_DMZ_INTF=""

## For testing uncomment if you want to generate /etc/network/interfaces files.
# MVVM_ENABLE_NETWORK_CFG="anything"

## Set internal and external interface to a default if it is not set, for testing
## modify the interface above, this setting will only change if the variable
## has not been set yet.
MVVM_INTERNAL_INTF=${MVVM_INTERNAL_INTF:-"eth1"}
MVVM_EXTERNAL_INTF=${MVVM_EXTERNAL_INTF:-"eth0"}

if [ "x${USER}" = "x" -o "x${USER}" = "xroot" ]; then
        MVVM_NICENESS=0
else
        MVVM_NICENESS=0
fi

MVVM_ARGS="${MVVM_ARGS} -Dargon.internal=${MVVM_INTERNAL_INTF} -Dargon.external=${MVVM_EXTERNAL_INTF}"

## Check for a DMZ Interface if the default is not set, (just check for eth2)
if [ -z "${MVVM_DMZ_INTF}" ] && [ -d "/sys/class/net/${DEFAULT_DMZ}" ]; then
    MVVM_DMZ_INTF=${DEFAULT_DMZ}
fi

if [ -n "${MVVM_DMZ_INTF}" ]; then
    MVVM_ARGS="${MVVM_ARGS} -Dargon.dmz=${MVVM_DMZ_INTF}"
fi

# if in the build, disable network configuration by default
if [ "x" != "x@PREFIX@" ]  && [ -z "${MVVM_ENABLE_NETWORK_CFG}" ] ; then
    MVVM_ARGS="${MVVM_ARGS} -Dbunnicula.devel.nonetworking=true"
fi

## Append the session limit if it is set
if [ -n "${MVVM_SESSION_LIMIT}" ]; then
    MVVM_ARGS="${MVVM_ARGS} -Dargon.sessionlimit=${MVVM_SESSION_LIMIT}"
fi

#
# Profiling
#
PROFILE_MVVM_YJP=${PROFILE_MVVM_YJP=$:-no}
export PROFILE_MVVM_YJP

# Use the Throughput or Concurrent-Low-Pause garbage collector?
# We normally want to use the Concurrent collector as it gives the lowest possible pause
# times.
USE_THROUGHPUT_COLLECTOR=no
if [ "x$PROFILE_MVVM_YJP" = "xyes" ] ; then
    USE_THROUGHPUT_COLLECTOR=yes
fi

#
# Heap monitor thread
#
## Enable the heap monitor.
MVVM_ARGS="${MVVM_ARGS} -Dcom.untangle.mvvm.memmonitor.enabled=true"

## Rate, kilobytes/second to start dumping stack traces.
#MVVM_ARGS="${MVVM_ARGS} -Dcom.untangle.mvvm.memmonitor.rate=$((3 * 1024)"

## required minimum to start dumping memory (even if rate exceeds rate)
#MVVM_ARGS="${MVVM_ARGS} -Dcom.untangle.mvvm.memmonitor.min=$(( 100 * 1024 ))"

## Level at which to just dump memory regardless of the rate
#MVVM_ARGS="${MVVM_ARGS} -Dcom.untangle.mvvm.memmonitor.level=$(( 310 * 1024 ))"

## Poll frequence in milliseconds
#MVVM_ARGS="${MVVM_ARGS} -Dcom.untangle.mvvm.memmonitor.poll=500"

## Minimum number of milliseconds in between dumping two thread dumps
#MVVM_ARGS="${MVVM_ARGS} -Dcom.untangle.mvvm.memmonitor.interval=3000"

## Name of the file where the log should go, if unspecified, this goes to console.log
#MVVM_ARGS="${MVVM_ARGS} -Dcom.untangle.mvvm.memmonitor.file=heapmonitor.log"

## Lifetime for positive phonebook lookups (millis)
#MVVM_ARGS="${MVVM_ARGS} -Dcom.untangle.mvvm.user.phonebook.lifetime=300000"

## Lifetime for succesful wmi lookups (millis)
#MVVM_ARGS="${MVVM_ARGS} -Dcom.untangle.mvvm.user.wmi.lifetime=240000"

## Lifetime for unsuccesful wmi lookups (millis)
#MVVM_ARGS="${MVVM_ARGS} -Dcom.untangle.mvvm.user.wmi.negativelifetime=600000"

#
# JAVA options
#

# NOTE: this setting is required
# JAVA_HOME=/usr/lib/j2se/1.4/jre
JAVA_HOME=${JAVA_HOME:-@DEFAULT_JAVA_HOME@}

# The maximum heap/virtual sizes depend on the memory available
MEM=$(awk '/MemTotal/ { print $2 }' < /proc/meminfo)
if [ $MEM -gt 2000000 ] ; then
  MAX_HEAP_SIZE=640m
  MAX_VIRTUAL_SIZE=1500000
elif [ $MEM -gt 1000000 ] ; then
  MAX_HEAP_SIZE=320m
  MAX_VIRTUAL_SIZE=950000
else
  MAX_HEAP_SIZE=240m
  MAX_VIRTUAL_SIZE=850000
fi

if [ "x$USE_THROUGHPUT_COLLECTOR" = "xyes" ] ; then
# Goals: 85% throughput (don't set maxpausegcmillis here, you'll regret it)
    JAVA_OPTS_SUN="-XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+UseParallelGC -XX:GCTimeRatio=6"
else
    JAVA_OPTS_SUN="-XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+UseConcMarkSweepGC -XX:+CMSIncrementalMode -XX:+CMSIncrementalPacing -XX:CMSIncrementalDutyCycleMin=0 -XX:CMSIncrementalDutyCycle=10 -XX:+UseParNewGC -XX:NewRatio=4"
fi
JAVA_OPTS_BEA="-Xgcpause -Xgcprio:pausetime"
# Java Options:
#  Minimum at 128m so we don't blow out smaller (512MB) machines
#  Maximum at 320m so we leave a lot of space for stacks but still have enough for 10,000 sessions
#  Stack size 96k which is small enough but still works
JAVA_OPTS_COMMON="-verbose:gc -Xloggc:$MVVM_GC_LOG -Xms128m -Xmx${MAX_HEAP_SIZE} -Xss96k -server"
if [ "x" != "x@PREFIX@" ] ; then
    JAVA_OPTS_COMMON="-ea $JAVA_OPTS_COMMON"
fi

if [ -f $JAVA_HOME/bin/console ] ; then
    JAVA_OPTS="$JAVA_OPTS_COMMON $JAVA_OPTS_BEA" #   BEA
else
    JAVA_OPTS="$JAVA_OPTS_COMMON $JAVA_OPTS_SUN" #   SUN
fi

export JAVA_OPTS
