#!/bin/sh

if [ $# -gt 1 ]; then
    echo "Usage: update-reports [ yyyy-mm-dd ]"
    echo "  If date specified, assume generating for midnight on that day (ie: 2006-04-09)"
    exit 1
fi
#

REPORT_TYPE_MARK="REPORT_TYPE_MARK"
IS_DETAILED_MARK="IS_DETAILED_MARK"
EMAIL_BASE_NAME="${REPORT_TYPE_MARK}_${IS_DETAILED_MARK}"

midnight=$(date +%F)
if [ $# -eq 1 ]; then
    midnight=$1
fi

## Parameters:
## <type> : daily, weekly or monthly
## <isDetailed> : true | false (whether or not this is a detailed)
## <extension> : desired file extension
function getFileName()
{
    local t_type=$1
    local t_isDetailed=$2
    local t_extension=$3
    local t_fileName=${EMAIL_BASE_NAME/${REPORT_TYPE_MARK}/${t_type}}

    if [ "${t_isDetailed}x" == "truex" ]; then
        t_isDetailed="detailed"
    else
        t_isDetailed="briefing"
    fi

    t_fileName=${t_fileName/${IS_DETAILED_MARK}/${t_isDetailed}}

    echo "${t_fileName}.${t_extension}"
}

## Parameters:
## <type> : daily, weekly or monthly
function generateEmail()
{
    local t_reportType=$1
    local t_isDetailed

    ## Run detailed reports
    for t_isDetailed in "true" "false" ; do
        ## Actually generate the PDF, email and index
        REPORT_TYPE=${t_reportType} \
            REPORT_BASE=$REPORT_DIR/current \
            SHOW_DETAILED_REPORTS=${t_isDetailed} \
            sh @USR_BIN@/generate-pdf `getFileName ${t_reportType} ${t_isDetailed} pdf`
    done
}

function mailReports()
{
    local t_reportType=$1
    local t_isDetailed=${MV_EG_EMAIL_DETAIL/y/true}
    t_isDetailed=${t_isDetailed/n/false}
    local t_arguments=`getFileName ${t_reportType} ${t_isDetailed} txt`

    cat "@PREFIX@/tmp/${t_arguments}" | xargs @USR_BIN@/mail-reports
}

## Parameters:
## <estat> : exit status
## <src> : source of error
function exitOnMvvmError()
{
    local t_estat=$1
    local t_src=$2
    if [ $t_estat != 0 ]; then
        echo $t_src "error, exit status:" $t_estat
        exit $t_estat
    fi
}

# Use 16Meg of memory for sorting, 64Meg for vacuuming, assume 90Meg of linux caching
# (tilts optimizer towards use of indices)
PGOPTIONS="-c sort_mem=16384 -c vacuum_mem=65536 -c effective_cache_size=9000"

export PGOPTIONS

REPORT_DIR=@MVVM_WEB@/reports

################################################################################
# CLEANUP SECTION
# roll up logs, deleting any more than 31 days old (and thus unreportable  on)
@USR_BIN@/rollup-logs $midnight 31

echo "VACUUM ANALYZE;" | psql -U postgres mvvm

# END CLEANUP SECTION
################################################################################

rm -rf $REPORT_DIR/current
# Just in case left over (we use a jsp now)
rm -f $REPORT_DIR/index.html

# can't use shell to assign default value for unset parameter because
# when an exception occurs in mcli,
# parameter becomes set with non-null value
is_reporting_enabled=$(@USR_BIN@/mcli isReportingEnabled)
exitOnMvvmError $? mvvm

# Only generate today's reports if the reporting transform is running
if [ $is_reporting_enabled == 'true' ]; then

    # Build the DHCP Merged Address Map (needed for running start-reports scripts)
    @USR_BIN@/mcli -t 3600 prepareReports -o $REPORT_DIR -d 90 -n $midnight
    exitOnMvvmError $? reporter
    # note that Reporter has just created settings.env and daystoadd

    if [ -h $REPORT_DIR/current -a -f $REPORT_DIR/current/daystoadd ]; then
        source $REPORT_DIR/current/settings.env

        # Build pre-joined reports tables
        while read dayname daybegin dayend; do
            for c in @MVVM_SCHEMA@/*/report-add-day.sql; do
                psql -U postgres -v dayname="$dayname" -v daybegin="'$daybegin'" -v dayend="'$dayend'" -f $c mvvm
            done
            psql -U postgres -v dayname="'$dayname'" -v daybegin="'$daybegin'" mvvm <<EOF
insert into reports.report_data_days values (:dayname, DATE :daybegin);
EOF
        done < $REPORT_DIR/current/daystoadd

        echo "ANALYZE;" | psql -U postgres mvvm

        # create files w/ username and hostname lists for usersummary-reports
        rm -f $REPORT_DIR/current/uname.lst
        rm -f $REPORT_DIR/current/hname.lst
        psql -qt -U postgres mvvm -c "SELECT DISTINCT username FROM events.mvvm_lookup_evt;" -o $REPORT_DIR/current/uname.lst
        psql -qt -U postgres mvvm -c "SELECT DISTINCT hname FROM reports.sessions WHERE client_intf=1;" -o $REPORT_DIR/current/hname.lst

        @USR_BIN@/mcli -t 3600 startReports
        exitOnMvvmError $? reporter

        is_running=$(@USR_BIN@/mcli isReportingRunning)
        while [ $is_running != 'false' ]; do
            sleep 5
            is_running=$(@USR_BIN@/mcli isReportingRunning)
        done

        cp -pr $REPORT_DIR/css $REPORT_DIR/current
        cp -pr $REPORT_DIR/images $REPORT_DIR/current

# generate the web viewable page
        if [ $MV_EG_DAILY_REPORT == 'y' ]; then
            @USR_BIN@/index-reports index.html daily false
        fi
        if [ $MV_EG_WEEKLY_REPORT == 'y' ]; then
            @USR_BIN@/index-reports index_online_weekly.html weekly false
        fi
        if [ $MV_EG_MONTHLY_REPORT == 'y' ]; then
            @USR_BIN@/index-reports index_online_monthly.html monthly false
        fi

# convert all non-index html pages to have MV look-n-feel
# (convert-reports doesn't look for daily, weekly, or monthly html pages
#  so if any set is missing, it is okay)
        @USR_BIN@/convert-reports

# generate the emailable page
        if [ $MV_EG_DAILY_REPORT == 'y' ]; then
            generateEmail "daily"
        fi
        if [ $MV_EG_WEEKLY_REPORT == 'y' ]; then
            generateEmail "weekly"
        fi
        if [ $MV_EG_MONTHLY_REPORT == 'y' ]; then
            generateEmail "monthly"
        fi

# email the reports to all recipients
        cd $REPORT_DIR/current
        if [ $MV_EG_DAILY_REPORT == 'y' ]; then
            mailReports "daily"
        fi
        if [ $MV_EG_WEEKLY_REPORT == 'y' ]; then
            mailReports "weekly"
        fi
        if [ $MV_EG_MONTHLY_REPORT == 'y' ]; then
            mailReports "monthly"
        fi

# ensure that a base index file is present
        cd $REPORT_DIR/current
        if [ $MV_EG_DAILY_REPORT == 'n' ]; then
            rm -f index.html
            if [ $MV_EG_WEEKLY_REPORT == 'y' ]; then
                ln -s index_online_weekly.html index.html
            elif [ $MV_EG_MONTHLY_REPORT == 'y' ]; then
                ln -s index_online_monthly.html index.html
            fi
        fi
    fi

# No need for this at the end anymore.
#    echo "VACUUM ANALYZE;" | psql -U postgres mvvm
else
    echo "reporting is disabled"
fi
