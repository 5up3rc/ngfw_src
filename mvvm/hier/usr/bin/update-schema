#!/bin/sh
exec >>@MVVM_LOG@/schema.log 2>&1

PSQL="psql -U metavize --tuples-only mvvm"
PSQL_VERBOSE="psql -U metavize -e mvvm"

if [ $# -ne 2 ]; then
    echo "usage: $0 [ settings | events ] [ mvvm | transform ]"
    exit 1
fi

echo "*** RUNNING $0 $*"

cat <<EOF | $PSQL_VERBOSE
CREATE SCHEMA settings;


-- convert pre-3.1 schema_ver to split_schema_ver
CREATE TABLE settings.split_schema_ver AS
    SELECT component::text, version AS settings_version, version AS events_version
    FROM settings.schema_ver;

DROP TABLE settings.schema_ver;

CREATE TABLE settings.split_schema_ver (
    component text,
    settings_version int4,
    events_version int4);

ALTER TABLE settings.split_schema_ver
    ADD CONSTRAINT schema_ver_pkey PRIMARY KEY (component);

ALTER TABLE split_schema_ver ALTER COLUMN component SET NOT NULL;

-- hack for version 2.5
-- convert clam, fprot, hauri, and sophos to use virus-base schema
INSERT INTO split_schema_ver (
    SELECT 'virus-base' AS component, settings_version, events_version
    FROM split_schema_ver WHERE component = 'clam-transform' OR component = 'fprot-transform'
         OR component = 'hauri-transform' OR component = 'sophos-transform'
    ORDER BY settings_version LIMIT 1);

DELETE FROM split_schema_ver
WHERE component = 'clam-transform' OR component = 'fprot-transform'
      OR component = 'hauri-transform' OR component = 'sophos-transform';

-- hack for version 2.5
-- convert spamassassin, clamphish to use spam-base schema
INSERT INTO split_schema_ver (
    SELECT 'spam-base' AS component, settings_version, events_version
    FROM split_schema_ver
    WHERE component = 'spamassassin-transform'
          OR component = 'clamphish-transform'
    ORDER BY settings_version LIMIT 1);

DELETE FROM split_schema_ver
WHERE component = 'spamassassin-transform' OR component = 'clamphish-transform';

EOF

type=$1
component=$2

schema_dir=@MVVM_SCHEMA@/$component

ver=$(echo "SELECT ${type}_version FROM split_schema_ver WHERE component = '$component' AND ${type}_version IS NOT NULL" | $PSQL)
latest_ver=$(ls $schema_dir/*schema-*.sql | sed 's/^.*schema-\([0-9]\+\).sql/\1/' | sort -n -r | head -n1)
echo "Updating schema: $component on $(date)"
echo "Current schema version: $ver"
echo "Latest schema version: $latest_ver"

if [ "x$latest_ver" = "x" ]; then
    echo "No schema"
elif [ "x$ver" = "x" ]; then
    echo "Initializing schema"

    cat <<EOF | $PSQL_VERBOSE
INSERT INTO split_schema_ver VALUES ('$component', null, null);
EOF

    if [ -e "$schema_dir/${type}-schema-$latest_ver.sql" ]; then
        echo "running $schema_dir/${type}-schema-$latest_ver.sql"
        psql -e -f "$schema_dir/${type}-schema-$latest_ver.sql" -U metavize mvvm
        cat <<EOF | $PSQL_VERBOSE
UPDATE split_schema_ver SET ${type}_version = $latest_ver WHERE component = '$component';
EOF
    else
        echo "running $schema_dir/schema-$latest_ver.sql"
        psql -e -f "$schema_dir/schema-$latest_ver.sql" -U metavize mvvm
        cat <<EOF | $PSQL_VERBOSE
UPDATE split_schema_ver SET settings_version = $latest_ver WHERE component = '$component';
UPDATE split_schema_ver SET events_version = $latest_ver WHERE component = '$component';
EOF
    fi

elif [ "$ver" -gt "$latest_ver" ]; then
    echo "Installed version is greater than latest version."
else
    if [ "$ver" -ne "$latest_ver" ]; then
        echo "Updating Schema..."
        for v in $(seq $(expr $ver + 1) $latest_ver); do
            echo "Updating to $v"
            if [ -e "$schema_dir/${type}-convert-$v.sql" ]; then
                echo "running $schema_dir/${type}-convert-$v.sql"
                psql -e -f "$schema_dir/${type}-convert-$v.sql" -U metavize mvvm
                eval ${type}_version=$v
            else
                echo "running $schema_dir/convert-$v.sql"
                psql -e -f "$schema_dir/convert-$v.sql" -U metavize mvvm
                events_version=$v
                settings_version=$v
            fi
        done

        if [ "x$events_version" != "x" ]; then
            cat <<EOF | $PSQL_VERBOSE
UPDATE split_schema_ver SET events_version = $events_version WHERE component = '$component';
EOF
        fi

        if [ "x$settings_version" != "x" ]; then
            cat <<EOF | $PSQL_VERBOSE
UPDATE split_schema_ver SET settings_version = $settings_version WHERE component = '$component';
EOF
        fi

    fi

    echo "running schema-$latest_ver just in case"

    if [ -e "$schema_dir/${type}-schema-$latest_ver.sql" ]; then
        echo "running $schema_dir/${type}-schema-$latest_ver.sql"
        psql -e -f "$schema_dir/${type}-schema-$latest_ver.sql" -U metavize mvvm </dev/null
    else
        echo "running $schema_dir/schema-$latest_ver.sql"
        psql -e -f "$schema_dir/schema-$latest_ver.sql" -U metavize mvvm </dev/null
    fi
fi