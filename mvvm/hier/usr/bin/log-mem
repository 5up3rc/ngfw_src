#!/bin/zsh

if [ $# -gt 1 ]; then
    echo "USAGE: $0 [<file>]"
    exit
elif [ $# -eq 1 ]; then 
    output=$1
    ## Clear out the buffer 
    echo -n "" > $output

else
    output=/dev/stdout
fi

format="%8d vsz:%8d,%8d,%8d rss: %8d,%8d%8d heap: %#010x,%8d,%8d\n"
format="%s %8d %8d,%8d,%8d %8d,%8d,%8d %#010x,%8d,%8d %s\n"

heapPrev=0
heapStart=0

memStart=0
memPrev=0

function getPid {
	echo `ps aux | grep java | grep argon.inside | grep -v grep | awk '{ print $2 }'` 
}

lastPid=0

for (( c =0 ; c < 100000 ; c++ )); do
    pid=`getPid`
    if [ "${pid}x" = "x" ]; then 
	sleep 5
	continue
    fi
    if [ $lastPid != $pid ]; then echo -e "\nNEW PROCESS `date`\n" >> $output ; fi
    lastPid=$pid
    mem=(`ps aux | grep $pid | grep -v grep | awk '{ print $5 " " $6}'`)
    heap=0x`head -n 3 /proc/$pid/maps| tail -n 1 | sed 's/[0-9a-f]*-\([0-9a-f]*\).*/\1/g'`
    if (( $heapStart == 0 )); then 
        heapStart=$heap
        heapPrev=$heap
        memStart=($mem)
        memPrev=($mem)
    fi
    heapGrowth=$(( ($heap - $heapPrev) / 1024 ))
    heapPrev=$heap
    heapTotalGrowth=$(( ( $heap - $heapStart ) / 1024 ))
    vsz=($mem[1] $(($mem[1] - $memPrev[1])) $(($mem[1] - $memStart[1])))
    rss=($mem[2] $(($mem[2] - $memPrev[2])) $(($mem[2] - $memStart[2])))
    memPrev=($mem)
    printf $format "`date +"%d %k:%M:%S"`" $c\
        $vsz[1] $vsz[2] $vsz[3] \
        $rss[1] $rss[2] $rss[3] \
        $heap $heapGrowth $heapTotalGrowth "`cat /proc/loadavg`" >> $output
    sleep 1
done
    
