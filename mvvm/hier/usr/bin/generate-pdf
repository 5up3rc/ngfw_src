#!/bin/sh

# this script assumes that
# REPORT_BASE, REPORT_TYPE and SHOW_DETAILED_REPORTS
#  are already defined.

if [ -z "${REPORT_TYPE}" ]; then
    echo "REPORT_TYPE must be defined before executing this script"
    exit -1
fi

OUTPUT_FILE=$1

if [ -z "${OUTPUT_FILE}" ]; then
    echo "USAGE: $0 <file>"
    echo "  The following environment variables should be set:"
    echo "  REPORT_BASE must be defined to the location of the sub reports"
    echo "  REPORT_TYPE must be (daily|weekly|monthly)"
    echo "  SHOW_DETAILED_REPORTS must be (true|false)"
    exit -1
fi


## Directory configuration
## XXX This should be a temp directory, that gets nuked.
DIRECTORY_BASE="@MVVM_WEB@/reports"
DIRECTORY_PDF="${DIRECTORY_BASE}/current"
DIRECTORY_IMAGES="${DIRECTORY_BASE}/current"
DIRECTORY_TEMPLATES="@MVVM_HOME@/reporting/templates"
DIRECTORY_PROPERTIES=`mktemp -d -p @PREFIX@/tmp`

## Template configuration
TEMPLATE_COVERPAGE="CoverPage.xml"
TEMPLATE_TOC="TableOfContents.xml"
TEMPLATE_BRIEFING="Briefing.xml"
TEMPLATE_DETAILED="DetailedReport.xml"
TEMPLATE_UNAMESUM="UserSummary.xml"
TEMPLATE_MASTER="MasterDocument.xml"

## This is where the images for the email are stored.
BASE_DIRECTORY_EMAIL_IMAGES="@MVVM_HOME@/reporting/email_images"

SUFFIX_PROPERTIES=".properties"

## Date format string
DATE_FORMAT='%A %B %e, %Y'

EMAIL_TEMPLATE="@MVVM_HOME@/reporting/email.html"

function generateTopLevel()
{
## Create the table of contents
    cat > ${topLevel} <<EOF
## Directory configuration
templateDirectory=${DIRECTORY_TEMPLATES}/
propertiesDirectory=${DIRECTORY_PROPERTIES}/
imageDirectory=${DIRECTORY_IMAGES}/
pdfDirectory=${DIRECTORY_PDF}/

## Template configuration
coverPageTemplate=${TEMPLATE_COVERPAGE}
tocTemplate=${TEMPLATE_TOC}
defaultBriefingTemplate=${TEMPLATE_BRIEFING}
usersummaryTemplate=${TEMPLATE_UNAMESUM}
defaultDetailedTemplate=${TEMPLATE_DETAILED}

## Flag for whether or not to show
showDetailedReports=${SHOW_DETAILED_REPORTS}

## Description of the report
type=${reportType}
start=${REPORT_START}
end=${REPORT_END}
prepared=${REPORT_PREPARED}

hostname=${hostname}
ipAddress=${ipAddress}

EOF
}

function generateSubReports()
{
    local t=0
    local t_reportDir
    local t_name
    local t_key
    local t_iconOrg
    local t_iconDesc

    ## None of the transform use custom templates just yet.    
    local t_template=""
    local t_detailedTemplate=""

    ## All of the transform have detailed reports
    local t_hasDetailed="true"

    ## This is the report field description
    echo "reports.fields='title:string','properties:string','briefingTemplate:string','detailedTemplate:string','iconDescription:string','iconOrganization:string','link:string', 'detailed:string'" >> ${topLevel}

    for t_reportDir in ${orderedTransformList}; do
        ## Don't iterate the transforms that don't have reports.
        ls ${t_reportDir}/*.html >/dev/null 2>&1 || continue

        t_name=`cat ${t_reportDir}/name`
        t_key=`basename ${t_reportDir}`

        ## Set the image directory.
        t_iconDesc="${t_key}/images/IconDesc42x42.png"
        t_iconOrg="${t_key}/images/IconOrg42x42.png"
                
        ## Insert the data for each report
        echo "reports.${t}='${t_name}','${t_key}${SUFFIX_PROPERTIES}','${t_template}','${t_detailedTemplate}','${t_iconDesc}','${t_iconOrg}','${LINK_PREFIX}${t_key}','${t_hasDetailed}'" >> ${topLevel}

        ## Create the sub properties
        generateSubProperties ${t_reportDir} ${t_key} ${t_name}

        ## Increment the index
        t=$(( t + 1 ))
    done
}

function generateSubProperties()
{
    ## Base directory for the transform
    local t_baseDir="${1}"

    ## This is the engineering name of the transform (eg nat-transform)
    local t_key="${2}"

    ## This is the marketing name of the transform (eg Router)
    local t_name="${3}"
   
    ## Name of the file containing the graph
    local t_graph=""
    
    ## Name of the file containing the summary pdf.
    local t_summary=""

    local t_propfile="${t_key}${SUFFIX_PROPERTIES}"
    local t_properties="${DIRECTORY_PROPERTIES}/${t_propfile}"

    ## Check if there is a file for the graph
    t_graph=`find ${t_baseDir} -name "*Summary_Graph--${REPORT_TYPE}.png" | head -n 1 | xargs -r basename`
    if [ -n "${t_graph}" ]; then
        t_graph="graph=${t_key}/${t_graph}"
    else
        echo "There is no graph for '${t_name}'"
    fi

    cat > ${t_properties} <<EOF
reportTitle=${t_name}
${t_graph}
EOF

    ## Need to create the user summary pdf file too if the html one exists
    t_usersummary=`find ${t_baseDir} -name "*UserSummary--${REPORT_TYPE}.html" | head -n 1 | xargs -r basename`
    if [ -n "${t_usersummary}" ]; then
        generateUserSummary ${t_baseDir} ${t_key} ${t_properties}
    else
        echo "There is no user summary report for '${t_name}'"
    fi

    echo -e "\nstatistics.fields='description:string','data:string','percent:string','indent:int'" >> ${t_properties}

    ## Insert the statistics
    ## This converts the current statistics from html into valid properties.
    ## 1. Here are the steps: A convert the &nbsp; which are used for indenting into the isIndented=1 flag
    ## 2. Convert unindented tags to isIndented=0
    ## 3. Remove all other &nbsp; they are not used in the PDF
    ## 4. Change all of the &amp; to &.
    ## 5. Remove the table row start tag.
    ## 6. Remove the table row end tag.
    ## 7. Replace the start of the cell with an open single quote.
    ## 8. Replace the end of the cell with an single quote and a comma.
    ## 9. Number all of the lines with AWK.
    sed -e 's|\(.*\)&nbsp;&nbsp;&nbsp;&nbsp;\(.*\)|\1\21|' \
        -e 's|>$|>0|' \
        -e 's|&nbsp;||g' \
        -e 's|&amp;|\&|g' \
        -e 's|<tr[^>]*>||g' \
        -e 's|</tr>||g' \
        -e "s|<td[^>]*>|'|g" \
        -e "s|</td>|',|g" ${t_statistics} \
        "${t_baseDir}/sum-${REPORT_TYPE}.html" \
        | awk 'BEGIN { n = 0 }; { print "statistics." n++ "=" $0 }' >> ${t_properties} 

    ## Insert the detailed reports
    echo -e "\ndetailed.fields='description:string','filename:string','userSummaryLink:string','properties:string'" >> ${t_properties}

    ## 1. Ignore summary graphs
    ## 2. Ignore summarizers
    ## 3. Ignore hostname summary (because it duplicates user summary)
    ## 4. Ignore parameters
    ## 5. Get rid of the path to the thing that generates the report
    ## 6. Append two default field values ('' = user summary link, '' = properties (e.g., no user summary link, no properties file)) 
    ## 7. Swap position of report name field (from position 2 to position 1) for user summary report and replace userSummary title with more friendly "User Summary" title (so that the user summary report can be processed in step 8) (index-report also replaces userSummary title with "User Summary" title) and replace two default field values ('AAA.pdf' = user summary link, 'BBB.properties' = properties)
    ## 8. Swap the order of the title, and description, and add quotes, and prefix the directory.
    ## 9. Number all of the lines with AWK.
    grep '\.jasper' "${t_baseDir}/report-files" \
        | sed -e '/SummaryGraph/d' \
        -e '/Summarizer/d' \
        -e '/hNameSummary/d' \
        -e '/:parameter:/d' \
        -e 's|^[^:]*:||' \
        -e "s|\(.*\):\(.*\)|\1:\2::|" \
        -e "s|\(userSummary\):\(.*\):\(.*\):\(.*\)|\2:User Summary:\2--${REPORT_TYPE}.pdf:${t_propfile}|" \
        -e "s|\(.*\):\(.*\):\(.*\):\(.*\)|'\2','${t_key}/\1--${REPORT_TYPE}.pdf','\3','\4'|" \
        | awk 'BEGIN { n = 0 }; { print "detailed." n++ "=" $0 }' >> ${t_properties}
}

function generateUserSummary()
{
    ## Base directory for the transform
    local t_baseDir="${1}"

    ## This is the engineering name of the transform (eg nat-transform)
    local t_key="${2}"

    local t_properties="${3}"

    while read line
    do
        local base_name=$(echo $line | cut -d: -f2)

        if [ xuserSummary = "x$base_name" ] ; then
            local rep_base=$(echo $line | cut -d: -f3-)
            break
        fi

    done < ${t_baseDir}/report-files

    if [ x = "x$rep_base" ] ; then
        return
    fi

    echo -e "\nunamesum.fields='userName:string','filename:string'" >> ${t_properties}

    local ucnt=0

    while read line
    do
        if [ "${line}" = "" ]; then
            # skip blank lines
            continue
        fi

        local UNAME=$line
        local UNAMESUM=${UNAME}--${REPORT_TYPE}
        local UNAMESUM_PDF=`echo ${rep_base}--${UNAMESUM}.pdf`

        if [ ! -f ${t_baseDir}/${UNAMESUM_PDF} ] ; then
            # for this time period, no data was associated with this username
            # (no report was generated) so skip username
            continue
        fi

        ## Insert the data for each report
        echo "unamesum.${ucnt}='${UNAME}','${t_key}/${UNAMESUM_PDF}'" >> ${t_properties}

        ucnt=$((ucnt+1))

    done < $DIRECTORY_PDF/uname.lst

    echo -e "\nhnamesum.fields='userName:string','filename:string'" >> ${t_properties}

    local hcnt=0

    while read line
    do
        if [ "${line}" = "" ]; then
            # skip blank lines
            continue
        fi

        local HNAME=$line
        local HNAMESUM=${HNAME}--${REPORT_TYPE}
        local HNAMESUM_PDF=`echo ${rep_base}--${HNAMESUM}.pdf`

        if [ ! -f ${t_baseDir}/${HNAMESUM_PDF} ] ; then
            # for this time period, no data was associated with this hostname
            # (no report was generated) so skip hostname
            continue
        fi

        ## Insert the data for each report
        echo "hnamesum.${hcnt}='${HNAME}','${t_key}/${HNAMESUM_PDF}'" >> ${t_properties}

        hcnt=$((hcnt+1))

    done < $DIRECTORY_PDF/hname.lst
}

function generateEmail()
{
    local t_email=${OUTPUT_FILE/%pdf/eml}
    local t_arguments="@PREFIX@/tmp/${OUTPUT_FILE/%pdf/txt}"
    
    ## Generate the file (use the :-baz just in case EMAIL_TEMPLATE isn't set which causes
    ## sed to block
    sed -e "s|%%REPORT_TYPE%%|${reportType}|g" \
        -e "s|%%REPORT_PREPARED%%|${REPORT_PREPARED}|g" \
        ${EMAIL_TEMPLATE:-"baz"} \
        > ${t_email}

    ## Generate the file list
    cat > ${t_arguments} <<EOF
-s "Untangle Reports (${REPORT_TYPE})"
${t_email}
${OUTPUT_FILE} 
EOF
    
    ## Find all of the images that are for the email
    find "${DIRECTORY_IMAGES}/images" -type f -name 'Logo150x96.gif' -exec basename \{\} \; \
        | sed "s|\(.*\)|images/\1|" \
        >> ${t_arguments}
}

####################### START OF SCRIPT

cd @MVVM_REPORTS@/current

## Get the transform list, and reorder so the reporting transform is at the top.
orderedTransformList=`@USR_BIN@/mcli instances | grep -i running | awk '{ print $2 }' | uniq | sed -e '/reporting-transform/d' -e '1ireporting-transform' -e "s|^\(.*\)$|${REPORT_BASE}/\1|"`

## User string for the report type, Daily, Weekly, Monthly
reportType=`echo ${REPORT_TYPE} | tr "dmw" "DMW"`

REPORT_PREPARED=`date +"${DATE_FORMAT}"`

case ${REPORT_TYPE} in
    "daily")   REPORT_START="${MV_EG_DAY_START}";;
    "weekly")  REPORT_START="${MV_EG_WEEK_START}";;
    "monthly") REPORT_START="${MV_EG_MONTH_START}";;
esac

## Reports always end last night    
REPORT_END="${MV_EG_REPORT_END}"

## Create the properties directory
mkdir -p ${DIRECTORY_PROPERTIES}

topLevel="${DIRECTORY_PROPERTIES}/toplevel.properties"
hostname=`hostname`

## Default to using the ip address of eth0
device="eth0"

## If eth0 is in a bridge, get the address of the bridge.
if [ -L /sys/class/net/${device}/brport/bridge ]; then
    device=`file -b /sys/class/net/eth0/brport/bridge | sed -e 's|symbolic link to .\.\./\.\./\.\./\.\./class/net/||g' -e "s|'$||g"`
fi

ipAddress=`ip addr show ${device} | grep inet | head -n 1 | awk '{ print $2 }' | sed 's|/.*||'`

generateTopLevel

generateSubReports

## Now actually generate the PDF
ujac-to-pdf "${DIRECTORY_TEMPLATES}/${TEMPLATE_MASTER}" ${topLevel} ${OUTPUT_FILE}

## Build the email
generateEmail

## Cleanup the properties directories
#XXXX This should be in
rm -rf ${DIRECTORY_PROPERTIES}
