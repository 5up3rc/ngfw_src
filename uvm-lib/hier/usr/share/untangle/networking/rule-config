#!/bin/sh

## These are for network configuration settings.
UVM_NETWORK_PARAMS_FILE=@UVM_CONF@/networking.sh

## These are parameters that rarely change, these are mostly items that are shared between
## the outside world and the uvm (eg inside/outside)
UVM_DEFAULTS_FILE=@PREFIX@/etc/default/untangle-vm

## These are the properties that are shared by the uvm and the networking scripts, these
## are done as properties so they are always loaded each time the UVM starts(on crashes
## the scripts are not reloaded.)
UVM_NET_PROPERTY_FILE=@UVM_CONF@/uvm.networking.properties
UVM_HTTPS_PORT=`grep uvm.https.port ${UVM_NET_PROPERTY_FILE} | sed 's|^uvm.https.port=\(.*\)|\1|g'`

if [ -f ${UVM_NETWORK_PARAMS_FILE} ]; then
    . ${UVM_NETWORK_PARAMS_FILE}
else
    echo "File ${UVM_NETWORK_PARAMS_FILE} not found."
fi

if [ -f ${UVM_DEFAULTS_FILE} ] ; then
    . ${UVM_DEFAULTS_FILE}
else
    echo "File ${UVM_DEFAULTS_FILE} not found."
fi

HTTPS_PORT=443

outsideHttpsPort=${HTTPS_PORT}

if [ -n "${UVM_HTTPS_PORT}" ]; then
    ## Just to validate the number
    outsideHttpsPort=`printf "%d" ${UVM_HTTPS_PORT}`
    if [ ${outsideHttpsPort} -lt 1 ] || [ ${outsideHttpsPort} -gt 65535 ]; then
        echo "Invalid https port: ${outsideHttpsPort}, returning to default ${HTTPS_PORT}"
        outsideHttpsPort=${HTTPS_PORT}
    fi
fi

## Default list of interfaces in the service space, (the inside interface) in case tmp
## params doesn't specify a value
UVM_SERVICES_INTF_LIST=${UVM_SERVICES_INTF_LIST:-"${UVM_INTERNAL_INTF}"}

## Local ports to antisubscribe to
ANTISUBSCRIBES_LOCAL_TCP_PORTS="22 80_inside"

## Possible for NAT(53) and 1194 for open vpn.
## XXX Look into only using open vpn on the outside ###
ANTISUBSCRIBES_LOCAL_UDP_PORTS="1194 53,161_inside"

#### Handle all of the port guards

#### TCP Port guards
GUARD_OUTSIDE_TCP_PORTS=""
GUARD_INSIDE_TCP_PORTS=""

# disabled by default
if [ "${UVM_ALLOW_OUT_HTTPS}x" = "truex" ]; then
    # not restricted by default
    if [ "${UVM_ALLOW_OUT_RES}x" = "truex" -a "${UVM_ALLOW_OUT_NET}x" != "x" ]; then
        if [ "${UVM_ALLOW_OUT_MASK}x" = "x" ]; then
            GUARD_OUTSIDE_TCP_PORTS="${GUARD_OUTSIDE_TCP_PORTS} ${outsideHttpsPort}_$UVM_ALLOW_OUT_NET"
        else
            GUARD_OUTSIDE_TCP_PORTS="${GUARD_OUTSIDE_TCP_PORTS} ${outsideHttpsPort}_$UVM_ALLOW_OUT_NET/$UVM_ALLOW_OUT_MASK"
        fi
    fi

    ## Written this way, so if there is an error it defaults to just antisubscribing on
    ## the standard HTTPS port
    if [ ${outsideHttpsPort} -ne ${HTTPS_PORT} ]; then
        ## Two different ports to antisubscribe
        ## Always antisubsribe to the HTTPS port on the inside
        ANTISUBSCRIBES_LOCAL_TCP_PORTS="${ANTISUBSCRIBES_LOCAL_TCP_PORTS} ${HTTPS_PORT}_inside"

        ## Antisubscribe to whichever outside port the user has selected
        ANTISUBSCRIBES_LOCAL_TCP_PORTS="${ANTISUBSCRIBES_LOCAL_TCP_PORTS} ${outsideHttpsPort}"
    else
        ## Always just antisubscribe to the HTTPS port, user has not selected another one
        ANTISUBSCRIBES_LOCAL_TCP_PORTS="${ANTISUBSCRIBES_LOCAL_TCP_PORTS} ${HTTPS_PORT}"
    fi
else
    ## Outside administration is not enabled, a guard is not required, the traffic
    ## should get vectored
    ANTISUBSCRIBES_LOCAL_TCP_PORTS="${ANTISUBSCRIBES_LOCAL_TCP_PORTS} ${HTTPS_PORT}_inside"
fi

# HTTP is always enabled, using valves to control access.
if [ "x$UVM_ALLOW_IN_HTTP" = "xnevertrue" ]; then
    GUARD_INSIDE_TCP_PORTS="${GUARD_INSIDE_TCP_PORTS} 80"
fi

# if in the build, disable all of the antisubscribes
if [ "x" != "x@PREFIX@" ] ; then
    GUARD_OUTSIDE_TCP_PORTS=""
    GUARD_INSIDE_TCP_PORTS=""
else
    ## When in the production environment, never antisubscribe to the outside
    ANTISUBSCRIBE_LOCAL_OUTSIDE=false
fi

## Port guards (always true)
GUARD_OUTSIDE_UDP_PORTS=""

