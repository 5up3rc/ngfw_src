#! /bin/bash

exec >> @UVM_LOG@/openvpn.log 2>&1

GLOBALS=@UVM_HOME@/openvpn/globals

## There must be a configuration file 
if [ -r ${GLOBALS} ]; then
    . ${GLOBALS}
else
    echo "Unable to load the openvpn configuration file ${GLOBALS}"
    exit -2
fi

BASE_SERIAL=`printf '%04X%04X' ${RANDOM} ${RANDOM}`

SERVER_KEY="${PKI_DIR}/server.key"
SERVER_CRT="${PKI_DIR}/server.crt"

## Directory with pre-generated diffie hellman parameters
DH_DIR="${DATA_DIR}/dh"

diffieHellman()
{
    local t_dhFile="${DH_DIR}/dh${KEY_SIZE}-$(( ${RANDOM} % 4 )).pem"
    cp ${t_dhFile} ${OPENVPN_DATA_DIR}/dh.pem
}

generateCA()
{
    export COMMON_NAME=${CA_NAME}
    export KEY_DN_QUALIFIER=${DN_QUALIFIER_CA}

    ${OPENSSL} req -days ${CERT_DURATION} -nodes -new -x509 -keyout ${CA_KEY} -out ${CA_CRT} \
        -config ${OPENSSL_CFG_FILE} -batch
    
    ## Make the ca key readable only by root
    chmod 0600 ${CA_KEY}

    ## Copy into into the key dir
    cp ${CA_KEY} ${CA_CRT} ${OPENVPN_DATA_DIR}
}

generateServerKey()
{
    local serverCsr=`mktemp || exit -3`

    export COMMON_NAME=${SERVER_NAME}
    export KEY_DN_QUALIFIER=${DN_QUALIFIER_SERVER}
    
    ## Generate the server private key and the certificate signing request
    ${OPENSSL} req -days ${CERT_DURATION} -nodes -new -keyout ${SERVER_KEY} -out ${serverCsr} \
        -extensions server -config ${OPENSSL_CFG_FILE} -batch

    ## Sign the cretificate signing request
    ${OPENSSL} ca -days ${CERT_DURATION} -out ${SERVER_CRT} -in ${serverCsr} -extensions server \
        -config ${OPENSSL_CFG_FILE} -batch

    ## Remove the CSR
    ${RM_CMD} -f ${serverCsr}

    ## Make the server key readable only by root
    chmod 0600 ${SERVER_KEY}

    cp ${SERVER_KEY} ${SERVER_CRT} ${OPENVPN_DATA_DIR}
}

cleanBase()
{
    ${RM_CMD} -f ${PKI_DIR}/*
    ${RM_CMD} -f ${OPENVPN_DATA_DIR}/*
}

makeBase()
{
    mkdir -p ${CONF_DIR}
    mkdir -p ${PKI_DIR}
    mkdir -p ${PACKAGE_DIR}
    mkdir -p ${OPENVPN_DATA_DIR}
    mkdir -p ${OPENVPN_CCD_DIR}

    touch ${INDEX_FILE}
    echo ${BASE_SERIAL} > ${SERIAL_FILE}
    cp ${SERIAL_FILE} ${SERIAL_FILE}.base
}

if [ "${USE_USB_KEY}x" = "truex" ]; then
    validateUsbKey
fi

## Clean out the key directories and create new keys.
cleanBase
makeBase

## Generate the diffie hellman parameters.
diffieHellman

## Create the CA
generateCA

## Create the server key.
generateServerKey

if [ "${USE_USB_KEY}x" = "truex" ]; then
    saveToUsbKey
fi

## Update the client status file
updateClientStatus
