#! /bin/bash

SCRIPT_DIR=@UVM_HOME@/openvpn
DATA_DIR=${SCRIPT_DIR}

CONF_DIR="@UVM_CONF@/openvpn"
MISC_DIR="${CONF_DIR}/misc"

ZIP_BASE="untangle-vpn"

PACKAGE_DIR=${CONF_DIR}/client-packages

## This is where all of the keys (client and server) are generated.
export PKI_DIR=${CONF_DIR}/pki
export INDEX_FILE=${PKI_DIR}/index.txt
export SERIAL_FILE=${PKI_DIR}/serial

## This is where all of the server parameters are placed.
OPENVPN_CONF_DIR=/etc/openvpn
OPENVPN_DATA_DIR=${OPENVPN_CONF_DIR}/data

## Client configuration directory
OPENVPN_CCD_DIR="${OPENVPN_CONF_DIR}/ccd"

## This is the client status file that java uses to check the certificate status for each client
CLIENT_STATUS_FILE="${MISC_DIR}/client_status.txt"

DOMAIN='does.not.exists'
export KEY_COUNTRY="`/usr/share/untangle/bin/ut-settings-reader.py node untangle-node-openvpn country`"
export KEY_PROVINCE="`/usr/share/untangle/bin/ut-settings-reader.py node untangle-node-openvpn province`"
export KEY_CITY="`/usr/share/untangle/bin/ut-settings-reader.py node untangle-node-openvpn locality`"
export KEY_ORG="`/usr/share/untangle/bin/ut-settings-reader.py node untangle-node-openvpn organization`"
export KEY_ORG_UNIT="`/usr/share/untangle/bin/ut-settings-reader.py node untangle-node-openvpn organizationUnit`"
export KEY_EMAIL='vpn@does.not.exists'
export KEY_SIZE='1536'

OPENSSL="openssl"
RM_CMD="rm"

## Uncomment the following line for debugging the openssl and removal calls.
#OPENSSL="opensslDbg"
#RM_CMD="rmDbg"

## Default parameters and file locations for the certificates
OPENSSL_CFG_FILE="${DATA_DIR}/openssl.cnf"
CA_KEY="${PKI_DIR}/ca.key"
CA_CRT="${PKI_DIR}/ca.crt"
CA_NAME="ca.${DOMAIN}"

SERVER_NAME="server.${DOMAIN}"

## Issuing ten year certs
CERT_DURATION=3650

## dnQualifier for the different certs
DN_QUALIFIER_SERVER="server"
DN_QUALIFIER_CLIENT="client"
DN_QUALIFIER_CA="certificateAuthority"

OPENVPN_SCRIPT="/etc/init.d/openvpn"

OPENVPN_CLIENT_CONF=/etc/openvpn/client.conf
OPENVPN_SERVER_CONF=/etc/openvpn/server.conf

## Debugging functions
opensslDbg()
{
    echo "[`date`,globals] openssl $@"
    openssl $@
}

rmDbg()
{
    echo rm $@
    rm $@
}

removeSpaces()
{
    ## don't know why but this works, and just 'echo ${*// /_}' doesn't.
    local val="$*"
    echo ${val// /_}
}

getSerialNumber()
{
    local crt=${1}

    grep "Serial Number" ${crt} | sed 's/.*(0x\([^(]*\)).*/\1/g'
}

isRevoked()
{
    local commonName="${1}"
    local clientCrt=`getClientCrtFile ${commonName}`
    
    ## If the cert is there, it hasn't been revoked, (it is renamed after being revoked)
    if [ -f ${clientCrt} ]; then
        return
    fi
    
    ## If there are any cert-revoked files, then the cert has been revoked.
        
    local search=`grep '^R' ${INDEX_FILE} | grep "CN=${commonName}"`

    if [ -n "${search}" ]; then echo "true" ; fi
}

getClientCrtFile()
{
    echo "${PKI_DIR}/client-${1}.crt"
}

getClientKeyFile()
{
    echo "${PKI_DIR}/client-${1}.key"
}

## XXXX This isn't used anymore
getClientRevokedCrtFile()
{
    local commonName="${1}"
    local clientCrt=`getClientCrtFile ${commonName}`
    local serialNumber=`getSerialNumber ${clientCrt}`
    echo "${PKI_DIR}/client-revoked-${commonName}-${serialNumber}.crt"
}

## Write a new client status file which java uses to check the status of each client
updateClientStatus()
{
    ## Delete any line that has a dnQualifier for the server
    sed -e "/dnQualifier=${DN_QUALIFIER_SERVER}/d" \
        -e 's/^\(R\|V\).*\/CN=\([^/]*\).*/\1 \2/' ${INDEX_FILE} | \
        uniq > ${CLIENT_STATUS_FILE}
}

getCommonNames()
{
    sed -e "/dnQualifier=${DN_QUALIFIER_SERVER}/d" \
        -e 's|.*\/CN=\([^/]*\).*|\1|' ${INDEX_FILE} | \
        uniq
}

disableOpenVPNStartup()
{
    echo "[`date`,globals] Disabling the openvpn server from starting at system startup"

    local t_openvpnInit=`basename ${OPENVPN_SCRIPT}`    
    
    # Backup the initialization script
    mv ${OPENVPN_SCRIPT} ${OPENVPN_SCRIPT}.tmp
    
    # Disable openvpn at bootup
    update-rc.d ${t_openvpnInit} remove > /dev/null
    
    # Restore the ssh initialization script
    mv ${OPENVPN_SCRIPT}.tmp ${OPENVPN_SCRIPT}
}

