#!/usr/bin/python
import os
import getopt
import sys
import subprocess
import re
import json

def usage():
	print "usage"

## !!! add "clean" option to strip all nodes from snort config	
	
def main(argv):
    global _debug
    _debug = 0
    settings_file = ""
    snort_file = "/etc/snort/snort.conf"
    node = 0
	
	## we know settings directory

    try:
		opts, args = getopt.getopt(argv, "hsin:d", ["help", "settings=", "snort=", "node=", "debug"] )
    except getopt.GetoptError:
    	usage()
    	sys.exit(2)
    for opt, arg in opts:
        if opt in ( "-h", "--help"):
            usage()
            sys.exit()
        elif opt in ( "-d", "--debug"):
             _debug = 1
        elif opt in ( "-s", "--settings"):
             settings_file = arg
        elif opt in ( "-n", "--node"):
            node = arg
        elif opt in ( "-s", "--snort"):
            snort_file = arg

    print "settings = " + settings_file
    print "snort = " + snort_file
    print "node = " + node
    print "_debug = ",  _debug
	
    sys.exit()

    policy_id = 0
    mo = re.search( r'settings_(\d+).js', settings_file );
    if mo:
      policy_id = mo.group(1)

	## load add settings.  Peel off variables for not us	
    json_settings = open( settings_file )
    settings= json.load( json_settings )
    json_settings.close()

	## need settings for networking, others?
	
    update_snort_rules( policy_id, settings )
    update_snort_conf( snort_file, policy_id, settings )
	
##
## Generate snort rules file
##
def update_snort_rules( policy_id, settings ):
    RE_VAR = re.compile(r'(\$[\w]+)')
    RE_GID = re.compile(r'(gid\:\s*\d+\;)')

    gid_policy_id = str( int(policy_id) + 10000000 )

    snort_rules_file = "/etc/snort/rules/policy_" + policy_id + ".rules"
    snort_rules_file_new = open( snort_rules_file + ".tmp", "w" )
    for rule in settings['rules']['list']:
        if rule['log'] == True and rule['live'] == True:
            rule_action = "drop"
        elif rule['log'] == True and rule['live'] == False:
            rule_action = "alert"
        elif rule['log'] == False and rule['live'] == True:
            rule_action = "sdrop"
        else:
            rule_action = "#"
        
        rule_text = rule['text']
        ### variable parse/replace
        mo = re.findall(RE_VAR, rule_text)
        if mo:
#            print mo
            for source_variable in mo:
#                print source_variable
#               if variable DNE...do something.
                destination_variable = "$POLICY_" + policy_id + "_" + source_variable[1:]
                rule_text = rule_text.replace( source_variable, destination_variable)
			
        ### gid parse/replace
        mo = re.findall(RE_GID, rule_text)
        if mo:
#            print mo[0]
            rule_text = rule_text.replace( mo[0], "gid:" + gid_policy_id + ";" )
#            print rule_text
        else:
            ### !!! verify parens begin and end
            rule_text = rule_text[:-1] + " gid:" + gid_policy_id + ";" + rule_text[-1:]
#            print rule_text
#            sys.exit()
		
        snort_rules_file_new.write( rule_action + " " + rule_text + "\n" )
    snort_rules_file_new.close()
    if os.path.isfile( snort_rules_file ):
        os.remove( snort_rules_file )
    os.rename( snort_rules_file + ".tmp", snort_rules_file )
	
##
## Modify snort configuration
##
def update_snort_conf( snort_file, policy_id, settings ):
    snort_conf_file = open( snort_file )
    snort_conf_file_new = open( snort_file + ".tmp", "w" )
#    snort_conf = snort_conf_file.read()
    
    RE_IPVAR = re.compile(r'^ipvar\s+(POLICY_\d+_)([^\s]+)')
    RE_PORTVAR = re.compile(r'^portvar\s+(POLICY_\d+_)([^\s]+)')
    RE_VAR = re.compile(r'^var\s+([^\s]+)')
    RE_INCLUDE = re.compile(r'^include\s+\$RULE_PATH\/')

    add_vars = False
    add_include = False
    for line in snort_conf_file:
#		print line,
        mo = re.search( RE_IPVAR, line )
        if mo:
            print "ipvar=" + mo.group(1)
		
        mo = re.search( RE_PORTVAR, line )
        if mo:
            print "portvar=" + mo.group(1)
		
        mo = re.search( RE_VAR, line )
        if ( add_vars == False ) and mo:
            add_vars = True
            update_snort_conf_add_vars( snort_conf_file_new, policy_id, settings )
            # print "var=" + mo.group(1)
		    ## Add our line
			
        mo = re.search( RE_INCLUDE, line )
        if ( add_include == False ) and mo:
            add_include = True
            snort_conf_file_new.write( "include $RULE_PATH/" + "policy_" + policy_id + ".rules" + "\n" );
        
        snort_conf_file_new.write( line );

    snort_conf_file_new.close()
    snort_conf_file.close()
	
	## rename

##
## Add snort variables to snort configuration
##
def update_snort_conf_add_vars( snort_conf_file_new, policy_id, settings ):
    RE_PORTTYPE = re.compile(r'^.*_PORT.*')
    RE_VARPREFIX = re.compile(r'^\$(.+)')
    RE_VAR = re.compile(r'(\$[\w]+)')

	## order variables based on destinations not referring to variables
	
	## alter variables based on other settings
	
    for variable in settings['variables']['list']:
        print variable
        mo = re.search( RE_PORTTYPE, variable['variable'] )
        if mo:
            vartype = "portvar"
        else:
            vartype = "ipvar"

        mo = re.search( RE_VARPREFIX, variable['variable'] )
        if mo:
            name = mo.group(1)
        else:
            name = variable['variable']
			
        value = variable['definition'];
        mo = re.findall(RE_VAR, value)
        if mo:
#            print mo
            for source_variable in mo:
#                print source_variable
#               if variable DNE...do something.
                destination_variable = "$POLICY_" + policy_id + "_" + source_variable[1:]
                value = value.replace( source_variable, destination_variable)
#        print vartype + " POLICY_" + policy_id + "_" + name + " " + value

        snort_conf_file_new.write( vartype + " POLICY_" + policy_id + "_" + name + " " + value + "\n" );

	
# Need to calculate policy/gid identifier based on recommended start range.

if __name__ == "__main__":
	main(sys.argv[1:])
