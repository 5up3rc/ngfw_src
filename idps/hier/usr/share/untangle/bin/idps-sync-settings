#!/usr/bin/python
#
# Synchronize downloaded snort-formatted rules into idps settings.
#
import errno
import os
import getopt
import sys
import subprocess
import re
import json

class SnortConf:
    #
    # Snort configuration file management
    #
    
    # Regex parsing
    comment_regex = re.compile(r'^#\s*(.*)')
    var_regex = re.compile(r'^(ipvar|portvar|var)\s+([^\s+]+)\s+([^\s+]+)')
    
    def __init__( self, conf_file_name ):
        self.conf_file_name = conf_file_name
        self.variables = []
        self.load()
        
    def load(self):
        self.conf = []
        conf_file = open( self.conf_file_name )
        last_comment = ""
        for line in conf_file:
            self.conf.append( line )
        conf_file.close()

    def get_variables(self):
        #
        # Pull default snort variable names, values, and descriptions.
        # Used to build up the default settings variable list.
        #
        # Based on analysis of downloaded rules, they only reference variables 
        # defined in the snort.conf template so that's why we are interested in
        # them (and not modifying them!)
        #
        if self.variables.count(self) == 0:
            for line in self.conf:
                match_comment = re.search( SnortConf.comment_regex, line )
                if match_comment:
                    last_comment = match_comment.group(1)
                match_var = re.search( SnortConf.var_regex, line )
                if match_var:
                    self.variables.append({
                        "type": match_var.group(1),
                        "key": match_var.group(2),
                        "value": match_var.group(3),
                        "description": last_comment
                    })
        return self.variables

class SnortRule:
    #
    # Process rules from the snort format.
    #
    text_regex = re.compile(r'^([#\s]+|)([^\s]+)\s+([^\s]+)\s+([^\s]+)\s+([^\s]+)\s+([^\s]+)\s+([^\s]+)\s+([^\s]+)\s+\((.+)\)')
    
    def __init__( self, regex_match, category ):
        self.category = category
        self.enabled = True
        if regex_match.group(1):
            self.enabled = False
        self.action = regex_match.group(2)
        self.protocol = regex_match.group(3)
        self.lnet = regex_match.group(4)
        self.lport = regex_match.group(5)
        self.dir = regex_match.group(6)
        self.rnet = regex_match.group(7)
        self.rport = regex_match.group(8)
        self.options = { 
            "sid": -1,
            "classtype": "uncategoried",
            "description": ""
        }
        for option in regex_match.group(9).split(';'):
            option = option.strip()
            if option == "":
                continue
            if option.find(':') > -1:
                key,value = option.split( ':', 1 );
                self.options[key] = value
            else:
                self.options[option] = None

    def dump(self):
        print "rule dump"
        for property, value in vars(self).iteritems():
            print property, ": ", value

    def build_options(self):
        options_string = ""
        for key in self.options.keys():
            value = self.options[key]
            if isinstance( value, str ) == False:
                options_string += key
            else:
                options_string += key + ":" + value
            options_string += "; "
        return options_string
            
    def build( self ):
        return self.action + " " + self.protocol + " " + self.lnet + " " + " " + self.lport + " " + self.dir + " " + self.rnet + " " + self.rport + " ( " + self.build_options() + " )"

class SnortRules:
    #
    # Process a set of snort rules such as downloaded rules.
    #
    var_regex = re.compile(r'^\$(.+)')
    category_regex = re.compile(r'^# \-+ Begin (.+) Rules Category')
    
    def __init__( self, rule_file_name ):
        self.rules_file_name = rule_file_name
        self.rules = []
        self.variables = []
        
    def load(self):
        category = "undefined"
        
        rules_file = open( self.rules_file_name )
        for line in rules_file:
            match_category = re.search( SnortRules.category_regex, line )
            if match_category:
                category = match_category.group(1)
            else:            
                match_rule = re.search( SnortRule.text_regex, line )
                if match_rule:
                    self.addRule( SnortRule( match_rule, category ) )
        rules_file.close()
        
    def addRule( self, rule ):
        #
        # Add a new rule to the list and search for variables.
        #
        self.rules.append( rule )
        for property, value in vars(rule).iteritems():
            if isinstance( value, str ) == False:
                continue
            match_variable = re.search( SnortRules.var_regex, value )
            if match_variable:
                if self.variables.count( match_variable.group( 1 ) ) == 0:
                    self.variables.append( match_variable.group( 1 ) )
        for key in rule.options.keys():
            value = rule.options[key]
            if isinstance( value, str ) == False:
                continue
            match_variable = re.search( SnortRules.var_regex, value )
            if match_variable:
                if self.variables.count( match_variable.group( 1 ) ) == 0:
                    self.variables.append( match_variable.group( 1 ) )
                    
    def get_rules(self):
        return self.rules
    
    def get_variables(self):
        return self.variables

class Settings:
    #
    # NGFW settings management
    #
    def __init__( self, node, settings_file_name ):
        self.node = node
        self.file_name = settings_file_name

    def exists( self ):
        return os.path.exists( self.file_name )

    def create( self, conf, rules ):
        #
        # Create a new settings file based on the processed
        # rule set and default variables from snort configuration.
        #
        self.settings = { 
            "immutables": { 
                "list": [{
                    "variable": "$HOME_NET",
                    "description": "Magic HOME_NET token",
                    "definition": "Home"
                },{
                    "variable": "$EXTERNAL_NET",
                    "description": "Magic EXTERNAL_NET token",
                    "definition": "External"
                }] 
            },
            "variables": {
                "list": []
            },
            "rules": {
                "list": []
            }
        }
        for variable in rules.get_variables():
            if variable == "HOME_NET":
                continue
            if variable == "EXTERNAL_NET":
                continue
        
            definition = "default value"
            description = "default description"
        
            for default_variable in conf.get_variables():
                if default_variable["key"] == variable:
                    definition = default_variable["value"]
                    description = default_variable["description"]
                    break
        
            self.settings["variables"]["list"].append( { 
                "variable": variable,
                "definition": definition,
                "description": description
            } );
         
        for rule in rules.get_rules():
             self.settings["rules"]["list"].append( { 
                "sid": rule.options["sid"],
                "name": rule.options["sid"],
                "description": rule.options["msg"],
                "live": False,
                "log": rule.enabled == True and rule.action == "alert",
                "category": rule.options["classtype"],
                "text": rule.build()
            } );
        
    def save( self ):
        settings_file = open( self.file_name, "w" )
        json.dump( self.settings, settings_file, False, True, True, True, None, 0 )
        settings_file.close()

def usage():
    print "usage..."
    print "help\t\tusage"
    print "settings\tSettings configuration file name"
    print "conf\t\tSnort configuration file name"
    print "rules\t\tSnort rule file name"
    print "node\t\tNode identifier"
    print "debug\t\tEnable debugging"
        
def main(argv):
    global _debug
    _debug = False
    rules_file_name = ""
    conf_file_name = ""
    settings_file_name = ""
    node = 0
	
    try:
		opts, args = getopt.getopt(argv, "hscrn:d", ["help", "settings=", "conf=", "rules=", "node=", "debug"] )
    except getopt.GetoptError:
    	usage()
    	sys.exit(2)
    for opt, arg in opts:
        if opt in ( "-h", "--help"):
            usage()
            sys.exit()
        elif opt in ( "-d", "--debug"):
             _debug = True
        elif opt in ( "-n", "--node"):
            node = arg
        elif opt in ( "-s", "--settings"):
            settings_file_name = arg
        elif opt in ( "-s", "--conf"):
            conf_file_name = arg
        elif opt in ( "-s", "--rules"):
            rules_file_name = arg

    if _debug == True:
        print "rules_file_name = " + rules_file_name
        print "conf_file_name = " + conf_file_name
        print "settings_file_name = " + settings_file_name
        print "node = " + node
        print "_debug = ",  _debug

    snort_conf = SnortConf( conf_file_name )
    snort_rules = SnortRules( rules_file_name )
    snort_rules.load()

    settings = Settings( node, settings_file_name )
    if settings.exists() == False:
        settings.create( snort_conf, snort_rules )
        settings.save()
    else:
        print "sync forthcoming"

    sys.exit()

if __name__ == "__main__":
	main( sys.argv[1:] )
