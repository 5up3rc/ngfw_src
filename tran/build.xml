<?xml version="1.0"?>

<!--
Copyright (c) 2004, 2005 Metavize Inc.
All rights reserved.

This software is the confidential and proprietary information of
Metavize Inc. ("Confidential Information").  You shall
not disclose such Confidential Information.

$Id: build.xml,v 1.37 2005/03/18 02:34:49 amread Exp $
-->

<project name="tran" basedir="." default="all">

  <!-- Null out compile so default install won't run it This is so the
       top will be pkg.install, which calls transforms sequentially
       They must be sequential, because some depend on others. http
       must be fully built before httpblocker can be built.  -->
  <target name="compile"/>

  <import file="../buildtools/buildmagic.xml"/>

  <!-- When creating new transforms (casings or bases) you need to carefully update the depends in build.tran
       so that the appropriate stamps are removed so the subtransforms are rebuilt.
       Also note that the build order here is meaningful as we use earlier parts in later parts without
       explicit dependencies.  -->
  <property name="casings"
        value="http,ftp,mail"/>
  <property name="bases"
        value="virus,spam"/>
  <property name="transforms"
        value="nat,firewall,airgap,reporting,protofilter,test,sigma,hauri,clam,kav,spyware,httpblocker,spamassassin,clamphish,ids"/>

  <!--              -->
  <!-- main targets -->
  <!--              -->

  <target name="pkg.gensrc"/>
  <target name="pkg.compile"/>
  <target name="pkg.jar"/>
  <target name="pkg.install">
    <var name="tran.type" value="casing"/>
    <foreach target="build.tran" param="tran.name" inheritall="true"
             parallel="false" list="${casings}"/>
    <var name="tran.type" value="base"/>
    <foreach target="build.tran" param="tran.name" inheritall="true"
             parallel="false" list="${bases}"/>
    <var name="tran.type" value="transform"/>
    <foreach target="build.tran" param="tran.name" inheritall="true"
             parallel="false" list="${transforms}"/>
  </target>

  <target name="build.tran">
    <!-- map all files to datestamp, if any are newer, build tran -->
    <fileset id="touched" dir="./${tran.name}/" includes="**/*">
      <depend targetdir="${build.dist}" granularity="10">
        <mapper type="merge" to="stamp-${tran.type}-${tran.name}"/>
      </depend>
    </fileset>
    <pathconvert pathsep=" " refid="touched" property="touchedTranList"/>
    <if>
      <not><equals arg1="${touchedTranList}" arg2="" /></not>
      <then>
        <!-- if changed a base or casing, rebuild all transforms -->
        <if> <equals arg1="${tran.type}" arg2="casing"/> <then>
      <if> <equals arg1="${tran.name}" arg2="ftp"/> <then>
            <delete><fileset dir="${build.dist}" includes="stamp-base-virus"/></delete>
      </then> </if>
      <if> <equals arg1="${tran.name}" arg2="http"/> <then>
            <delete><fileset dir="${build.dist}" includes="stamp-base-virus"/></delete>
      </then> </if>
      <if> <equals arg1="${tran.name}" arg2="mail"/> <then>
            <delete><fileset dir="${build.dist}" includes="stamp-base-virus"/></delete>
            <delete><fileset dir="${build.dist}" includes="stamp-base-spam"/></delete>
      </then> </if>
        </then> </if>
        <if> <equals arg1="${tran.type}" arg2="base"/> <then>
      <if> <equals arg1="${tran.name}" arg2="virus"/> <then>
            <delete><fileset dir="${build.dist}" includes="stamp-transform-clam"/></delete>
            <delete><fileset dir="${build.dist}" includes="stamp-transform-hauri"/></delete>
            <delete><fileset dir="${build.dist}" includes="stamp-transform-kav"/></delete>
      </then> </if>
      <if> <equals arg1="${tran.name}" arg2="spam"/> <then>
            <delete><fileset dir="${build.dist}" includes="stamp-transform-spamasssassin"/></delete>
            <delete><fileset dir="${build.dist}" includes="stamp-transform-clamphish"/></delete>
      </then> </if>
        </then> </if>

    <echo message="Building '${tran.name}'"/>
        <antcall target="install.tran" inheritAll="true"/>
        <touch file="${build.dist}/stamp-${tran.type}-${tran.name}"/>
      </then>
      <else>
        <echo message="Skipping '${tran.name}'"/>
      </else>
    </if>
  </target>


  <target name="pkg.clean" depends="clean.nuke"/>


  <!--              -->
  <!-- build tran   -->
  <!--              -->

  <target name="gensrc.tran" depends="prepare">
    <mkdir dir="${build.gensrc}/${tran.name}"/>
    <mkdir dir="${build.root}/${tran.name}"/>
    <foreach target="rpdtojrxml" param="rpd" inheritall="true" parallel="false">
      <fileset dir="${tran.name}/${src.main}">
        <include name="**/*.rpd"/>
      </fileset>
    </foreach>
  </target>

  <target name="rpdtojrxml">
    <java classname="ReportGenerator"
          fork="false"
          failonerror="true">
      <arg line="-t mvvm/resources/reports"/>
      <arg line="-o ${build.gensrc}/${tran.name}/reports"/>
      <arg line="${rpd}"/>
      <classpath refid="mvvm.thirdparty.classpath"/>
      <classpath path="../util/output/util"/>
    </java>
  </target>

  <target name="xdoclet.tran" depends="gensrc.tran">
    <hibernatedoclet destdir="${build.gensrc}/${tran.name}"
                     excludedtags="@version,@author,@todo" verbose="true">
      <fileset dir="${tran.name}/${src.main}" includes="**/*.java">
        <contains text="@hibernate"/>
      </fileset>
      <fileset dir="../mvvm/main">
        <include name="com/metavize/mvvm/logging/LogEvent.java"/>
      </fileset>
      <hibernate version="2.0"/>
    </hibernatedoclet>

    <!-- xdoclet is re re -->
    <exec executable="${util.bin}/fix-hbm">
      <arg value="${build.gensrc}"/>
    </exec>

    <jrc srcdir="${build.gensrc}/${tran.name}" destdir="${build.root}/${tran.name}" tempdir="${build.tmp}"
         keepjava="true" xmlvalidation="true">
      <classpath refid="mvvm.thirdparty.classpath"/>
      <classpath refid="jasperreports.classpath"/>
      <classpath refid="mvvm-client.classpath"/>
      <include name="**/*jrxml"/>
    </jrc>
    <jrc srcdir="${tran.name}/${src.main}" destdir="${build.root}/${tran.name}" tempdir="${build.tmp}"
         keepjava="true" xmlvalidation="true">
      <classpath refid="mvvm.thirdparty.classpath"/>
      <classpath refid="jasperreports.classpath"/>
      <classpath refid="mvvm-client.classpath"/>
      <include name="**/*jrxml"/>
    </jrc>
  </target>


  <!--              -->
  <!-- compile tran -->
  <!--              -->

  <target name="compile.tran">

    <mkdir dir="${build.root}/${tran.name}"/>

    <antcall target="compile.${tran.name}" inheritAll="true"/>

    <exec executable="${buildtool.base}/dependset.sh">
      <arg value="${build.root}/${tran.name}"/>
      <arg value="${build.depcache}/${tran.name}.patternset"/>
    </exec>

    <depend srcdir="${tran.name}/${src.main}"
            destdir="${build.root}/${tran.name}"
            cache="${build.depcache}/${tran.name}" closure="yes">
      <patternset includesfile="${build.depcache}/${tran.name}.patternset"/>
    </depend>

    <!-- bases need casings -->
    <if> <equals arg1="${tran.type}" arg2="base"/> <then>
        <var name="extra.classes" value="../tran/output/jar/http-casing.mar:../tran/output/jar/ftp-casing.mar:../tran/output/jar/mail-casing.mar"/>
    </then> </if>
    <!-- transforms need casings and bases -->
    <if> <equals arg1="${tran.type}" arg2="transform"/> <then>
        <var name="extra.classes" value="../tran/output/jar/spam-base.mar:../tran/output/jar/virus-base.mar:../tran/output/jar/http-casing.mar:../tran/output/jar/ftp-casing.mar:../tran/output/jar/mail-casing.mar"/>
    </then> </if>

    <!-- FIXME email special case -->
    <if> <equals arg1="${tran.name}" arg2="email"/> <then>
        <var name="extra.classes" value="../tran/output/jar/kav-transform.mar:../tran/output/jar/hauri-transform.mar:../tran/output/jar/clam-transform.mar"/>
    </then> </if>

    <!-- FIXME clamphish special case -->
    <if> <equals arg1="${tran.name}" arg2="clamphish"/> <then>
        <var name="extra.classes" value="../tran/output/jar/clam-transform.mar:../tran/output/jar/spam-base.mar:../tran/output/jar/virus-base.mar:../tran/output/jar/mail-casing.mar"/>
    </then> </if>

    <javac destdir="${build.root}/${tran.name}"
           debug="on"
           optimize="false"
           deprecation="on"
           source="1.5"
           includeAntRuntime="false">

      <src path="${tran.name}/${src.main}"/>
      <src path="${build.gensrc}/${tran.name}"/>

      <classpath path="${extra.classes}"/>
      <classpath refid="gui.classpath"/>
      <classpath refid="hibernate.classpath"/>
      <classpath refid="jasperreports.classpath"/>
      <classpath refid="javamail.classpath"/>
      <classpath refid="jfreechart.classpath"/>
      <classpath refid="jnlp.classpath"/>
      <classpath refid="log4j.classpath"/>
      <classpath refid="mvvm-client.classpath"/>
      <classpath refid="mvvm.classpath"/>
      <classpath refid="netbeans.classpath"/>

      <include name="com/metavize/tran/${tran.name}/**"/>
    </javac>

  </target>

  <!--              -->
  <!-- mar tran     -->
  <!--              -->

  <target name="mar.tran" depends="xdoclet.tran, compile.tran">

    <mkdir dir="${build.root}/${tran.name}/META-INF"/>

    <jar destfile="${build.jar}/${tran.name}-${tran.type}.mar" index="yes">
      <fileset dir="${build.root}/${tran.name}"/>
      <fileset dir="${build.gensrc}/${tran.name}">
        <exclude name="**/*jrxml"/>
      </fileset>
      <fileset dir="${tran.name}/${src.main}/">
        <include name="**/*png"/>
      </fileset>
      <fileset dir="${tran.name}/${src.resources}/${tran.name}">
        <include name="**"/>
      </fileset>
    </jar>

    <antcall target="jar.${tran.name}" inheritAll="true"/>

  </target>

  <!--              -->
  <!-- install tran -->
  <!--              -->

  <target name="install.tran" depends="mar.tran">

    <copy file="${build.jar}/${tran.name}-${tran.type}.mar"
      todir="${dist.mvvm.toolbox}"/>
    <copy file="${build.jar}/${tran.name}-${tran.type}.mar"
      todir="${dist.mvvm.webstart}"/>

    <copy todir="${build.dist}" failonerror="false">
      <fileset dir="${tran.name}/hier"/>
    </copy>

    <antcall target="install.${tran.name}" inheritAll="true"/>

    <if> <isset property="use-pack200"/> <then>
      <pack200 src="${dist.mvvm.webstart}/${tran.name}-${tran.type}.mar"
               destfile="${dist.mvvm.webstart}/${tran.name}-${tran.type}.mar.pack"/>
      <unpack200 src="${dist.mvvm.webstart}/${tran.name}-${tran.type}.mar.pack"
                 dest="${dist.mvvm.webstart}/${tran.name}-${tran.type}.mar"/>
      </then></if>
    <delete file="${dist.mvvm.webstart}/${tran.name}-${tran.type}.mar.pack"/>
    <signjar jar="${dist.mvvm.webstart}/${tran.name}-${tran.type}.mar"
          keystore="../gui/keystore" alias="software key"
          storepass="WbDP5uz\N" />
    <if> <isset property="use-pack200"/> <then>
      <pack200 src="${dist.mvvm.webstart}/${tran.name}-${tran.type}.mar"
               destfile="${dist.mvvm.webstart}/${tran.name}-${tran.type}.mar.pack.gz"
               gzipoutput="true"/>
      </then></if>

  </target>

  <!--              -->
  <!-- custom       -->
  <!--              -->

  <target name="install.test"/>
  <target name="install.ids"/>
  <target name="install.nat"/>
  <target name="install.firewall"/>
  <target name="install.spyware"/>

  <target name="install.http" >
    <copy file="${build.jar}/http-export.jar" todir="${dist.mvvm.toolbox}"/>
  </target>

  <target name="install.mail">
    <copy file="${build.jar}/mail-export.jar" todir="${dist.mvvm.toolbox}"/>
  </target>

  <target name="install.ftp">
    <copy file="${build.jar}/ftp-export.jar" todir="${dist.mvvm.toolbox}"/>
  </target>

  <target name="install.virus"/>
  <target name="install.spam"/>

  <target name="install.hauri">
<!--     <copy todir="${dist.mvvm.schema}/hauri-transform"> -->
<!--       <fileset dir="virus/hier/${suffix.mvvm.schema}/virus-base"/> -->
<!--     </copy> -->
    <jar update="true" destfile="${dist.mvvm.webstart}/hauri-transform.mar">
      <fileset dir="${build.root}/mail"/>
    </jar>
  </target>

  <target name="install.kav">
<!--     <copy todir="${dist.mvvm.schema}/kav-transform"> -->
<!--       <fileset dir="virus/hier/${suffix.mvvm.schema}/virus-base"/> -->
<!--     </copy> -->
    <jar update="true" destfile="${dist.mvvm.webstart}/kav-transform.mar">
      <fileset dir="${build.root}/mail"/>
    </jar>
  </target>

  <target name="install.clam">
<!--     <copy todir="${dist.mvvm.schema}/clam-transform"> -->
<!--       <fileset dir="virus/hier/${suffix.mvvm.schema}/virus-base"/> -->
<!--     </copy> -->
    <jar update="true" destfile="${dist.mvvm.webstart}/clam-transform.mar">
      <fileset dir="${build.root}/mail"/>
    </jar>
  </target>

  <target name="install.spamassassin">
<!--     <copy todir="${dist.mvvm.schema}/spamassassin-transform"> -->
<!--       <fileset dir="spam/hier/${suffix.mvvm.schema}/spam-base"/> -->
<!--     </copy> -->
    <jar update="true" destfile="${dist.mvvm.webstart}/spamassassin-transform.mar">
      <fileset dir="${build.root}/mail"/>
    </jar>
  </target>

  <target name="install.clamphish">
<!--     <copy todir="${dist.mvvm.schema}/clamphish-transform"> -->
<!--       <fileset dir="spam/hier/${suffix.mvvm.schema}/spam-base"/> -->
<!--     </copy> -->
    <jar update="true" destfile="${dist.mvvm.webstart}/clamphish-transform.mar">
      <fileset dir="${build.root}/mail"/>
    </jar>
  </target>


  <target name="install.httpblocker"/>
  <target name="install.airgap"/>
  <target name="install.reporting"/>
  <target name="install.email"/>
  <target name="install.protofilter"/>
  <target name="install.sigma"/>


  <!--              -->
  <!-- custom       -->
  <!--              -->

  <target name="jar.test"/>
  <target name="jar.ids"/>
  <target name="jar.nat"/>
  <target name="jar.firewall"/>
  <target name="jar.spyware"/>

  <target name="jar.http">
    <jar destfile="${build.jar}/http-export.jar">
      <fileset dir="${build.root}/http">
        <include name="com/metavize/tran/http/HttpMethod.class"/>
        <include name="com/metavize/tran/http/HttpMethodUserType.class"/>
        <include name="com/metavize/tran/http/HttpRequestEvent.class"/>
        <include name="com/metavize/tran/http/HttpResponseEvent.class"/>
        <include name="com/metavize/tran/http/HttpStateMachine*.class"/>
        <include name="com/metavize/tran/http/RequestLine.class"/>
        <include name="com/metavize/tran/http/StatusLine.class"/>
      </fileset>
      <fileset dir="${build.gensrc}/http">
        <include name="com/metavize/tran/http/HttpRequestEvent.hbm.xml"/>
        <include name="com/metavize/tran/http/HttpResponseEvent.hbm.xml"/>
        <include name="com/metavize/tran/http/RequestLine.hbm.xml"/>
        <include name="com/metavize/tran/http/StatusLine.hbm.xml"/>
      </fileset>
    </jar>
  </target>

  <target name="jar.mail">
    <jar destfile="${build.jar}/mail-export.jar">
      <fileset dir="${build.root}/mail">
<!--
        <include name="com/metavize/tran/mail/AddressKind.class"/>
        <include name="com/metavize/tran/mail/AddressKindUserType.class"/>
        <include name="com/metavize/tran/mail/ImapCommand*.class"/>
        <include name="com/metavize/tran/mail/ImapReply*.class"/>
        <include name="com/metavize/tran/mail/ImapStateMachine*.class"/>
        <include name="com/metavize/tran/mail/MailExport.class"/>
        <include name="com/metavize/tran/mail/MailExportFactory.class"/>
        <include name="com/metavize/tran/mail/MailTransformSettings.class"/>
        <include name="com/metavize/tran/mail/MessageFile.class"/>
        <include name="com/metavize/tran/mail/MessageInfo.class"/>
        <include name="com/metavize/tran/mail/MessageInfoAddr.class"/>
        <include name="com/metavize/tran/mail/MessageStats.class"/>
        <include name="com/metavize/tran/mail/MimeBoundary.class"/>
        <include name="com/metavize/tran/mail/MimeStateMachine*.class"/>
        <include name="com/metavize/tran/mail/Rfc822Header*.class"/>
        <include name="com/metavize/tran/mail/SMTPNotifyAction*.class"/>
        <include name="com/metavize/tran/mail/SMTPNotifyActionUserType*.class"/>
        <include name="com/metavize/tran/mail/SmtpCommand*.class"/>
        <include name="com/metavize/tran/mail/SmtpReply*.class"/>
        <include name="com/metavize/tran/mail/SmtpStateMachine*.class"/>
        <include name="com/metavize/tran/mail/papi/smtp/sapi/*.class"/>
        <include name="com/metavize/tran/mail/papi/smtp/*.class"/>
        <include name="com/metavize/tran/mail/papi/pop/*.class"/>
        <include name="com/metavize/tran/mail/papi/*.class"/>
        <include name="com/metavize/tran/mail/MessageBoundaryScanner*.class"/>
-->
        <include name="com/metavize/tran/mail/papi/*.class"/>
        <include name="com/metavize/tran/mail/papi/pop/*.class"/>
        <include name="com/metavize/tran/mail/papi/imap/*.class"/>
        <include name="com/metavize/tran/mail/papi/smtp/*.class"/>
        <include name="com/metavize/tran/mail/papi/smtp/sapi/*.class"/>
      </fileset>
      <fileset dir="${build.gensrc}/mail">
        <include name="com/metavize/tran/mail/papi/*.hbm.xml"/>
        <include name="com/metavize/tran/mail/papi/smtp/*.hbm.xml"/>
<!--
        <include name="com/metavize/tran/mail/papi/MessageInfo.hbm.xml"/>
        <include name="com/metavize/tran/mail/papi/MessageInfoAddr.hbm.xml"/>
        <include name="com/metavize/tran/mail/papi/MessageStats.hbm.xml"/>
-->
      </fileset>
    </jar>
  </target>

  <target name="jar.ftp">
    <jar destfile="${build.jar}/ftp-export.jar">
      <fileset dir="${build.root}/ftp">
        <include name="com/metavize/tran/ftp/FtpCommand.class"/>
        <include name="com/metavize/tran/ftp/FtpFunction.class"/>
        <include name="com/metavize/tran/ftp/FtpReply.class"/>
        <include name="com/metavize/tran/ftp/FtpStateMachine.class"/>
        <include name="com/metavize/tran/ftp/FtpUtil.class"/>
      </fileset>
      <!-- insert exported hibernate mappings here -->
    </jar>
  </target>

  <target name="jar.virus"/>
  <target name="jar.httpblocker"/>
  <target name="jar.spam"/>
  <target name="jar.protofilter"/>
  <target name="jar.sigma"/>
  <target name="jar.airgap"/>
  <target name="jar.reporting"/>
  <target name="jar.email"> <!-- include KAV, Clam, and Hauri Scanners -->
    <jar destfile="${build.jar}/${tran.name}-${tran.type}.mar" index="yes"
         update="true">
      <fileset dir="${build.root}/hauri"/>
      <fileset dir="hauri/${src.main}">
        <include name="**/*png"/>
      </fileset>
      <fileset dir="${build.root}/kav"/>
      <fileset dir="kav/${src.main}">
        <include name="**/*png"/>
      </fileset>
      <fileset dir="${build.root}/clam"/>
      <fileset dir="clam/${src.main}">
        <include name="**/*png"/>
      </fileset>
      <fileset dir="${build.root}/virus"/>
    </jar>
  </target>
  <target name="jar.hauri"> <!-- include Virus Abstract transform -->
    <jar destfile="${build.jar}/${tran.name}-${tran.type}.mar" index="yes"
         update="true">
      <fileset dir="${build.root}/virus"/>
      <fileset dir="${build.gensrc}/virus">
        <exclude name="**/*jrxml"/>
      </fileset>
    </jar>
  </target>
  <target name="jar.kav"> <!-- include Virus Abstract transform -->
    <jar destfile="${build.jar}/${tran.name}-${tran.type}.mar" index="yes"
         update="true">
      <fileset dir="${build.root}/virus"/>
      <fileset dir="${build.gensrc}/virus">
        <exclude name="**/*jrxml"/>
      </fileset>
    </jar>
  </target>
  <target name="jar.clam"> <!-- include Virus Abstract transform -->
    <jar destfile="${build.jar}/${tran.name}-${tran.type}.mar" index="yes"
         update="true">
      <fileset dir="${build.root}/virus"/>
      <fileset dir="${build.gensrc}/virus">
        <exclude name="**/*jrxml"/>
      </fileset>
    </jar>
  </target>
  <target name="jar.spamassassin"> <!-- include Spam Abstract transform -->
    <jar destfile="${build.jar}/${tran.name}-${tran.type}.mar" index="yes"
         update="true">
      <fileset dir="${build.root}/spam"/>
      <fileset dir="${build.gensrc}/spam">
        <exclude name="**/*jrxml"/>
      </fileset>
    </jar>
  </target>
  <target name="jar.clamphish"> <!-- include Spam Abstract transform, include Clam Scanners -->
    <jar destfile="${build.jar}/${tran.name}-${tran.type}.mar" index="yes"
         update="true">
      <fileset dir="${build.root}/spam"/>
      <fileset dir="${build.gensrc}/spam">
        <exclude name="**/*jrxml"/>
      </fileset>
      <fileset dir="${build.root}/virus">
        <include name="com/metavize/tran/virus/VirusScanner*.class"/>
      </fileset>
      <fileset dir="${build.root}/clam">
        <include name="com/metavize/tran/clam/ClamScannerLauncher.class"/>
      </fileset>
    </jar>
  </target>

  <target name="compile.test"/>
  <target name="compile.ids"/>
  <target name="compile.nat"/>
  <target name="compile.firewall"/>
  <target name="compile.spyware"/>
  <target name="compile.http"/>
  <target name="compile.ftp"/>
  <target name="compile.mail"/>
  <target name="compile.virus"/>
  <target name="compile.spam"/>
  <target name="compile.hauri"/>
  <target name="compile.kav"/>
  <target name="compile.clam"/>
  <target name="compile.spamassassin"/>
  <target name="compile.clamphish"/>
  <target name="compile.httpblocker"/>
  <target name="compile.airgap"/>
  <target name="compile.reporting"/>
  <target name="compile.email"/>
  <target name="compile.protofilter"/>
  <target name="compile.sigma"/>

  <!-- Javadoc target -->
  <target name="jdoc" depends="pkg.jar">
    <foreach target="invokeJDoc" param="jdoc.target.transform" inheritall="true"
      parallel="false" list="${casings}"/>
    <foreach target="invokeJDoc" param="jdoc.target.transform" inheritall="true"
      parallel="false" list="${bases}"/>
    <foreach target="invokeJDoc" param="jdoc.target.transform" inheritall="true"
      parallel="false" list="${transforms}"/>
  </target>

  <!-- Helper for performing the jdoc target for each transform -->
  <target name="invokeJDoc">
    <antcall target="func.jdoc">
      <param name="jdoc.src" value="${jdoc.target.transform}/${src.main}"/>
      <param name="jdoc.prjName" value="tran_${jdoc.target.transform}"/>
    </antcall>
  </target>

  <!-- For participating in the larger JavaDoc generation -->
  <target name="bigjdoc">
    <foreach target="copyForBigJDoc" param="jdoc.target.transform" inheritall="true"
      parallel="false" list="${casings}"/>
    <foreach target="copyForBigJDoc" param="jdoc.target.transform" inheritall="true"
      parallel="false" list="${bases}"/>
    <foreach target="copyForBigJDoc" param="jdoc.target.transform" inheritall="true"
      parallel="false" list="${transforms}"/>
  </target>

  <!--
    Helper for performing the bigjdoc target for each transform.  Copies
    all source to ${jdoc.bigtree.src} for inclusion in the big JavaDoc
    generation
  -->
  <target name="copyForBigJDoc">
    <copydir src="${jdoc.target.transform}/${src.main}"
      dest="${jdoc.bigtree.src}"
      includes="**/*.java"
      excludes="**/Test.java"
      forceoverwrite="true"/>
  </target>


</project>
