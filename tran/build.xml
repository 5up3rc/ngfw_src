<?xml version="1.0"?>

<!--
Copyright (c) 2004, 2005 Metavize Inc.
All rights reserved.

This software is the confidential and proprietary information of
Metavize Inc. ("Confidential Information").  You shall
not disclose such Confidential Information.

$Id: build.xml,v 1.37 2005/03/18 02:34:49 amread Exp $
-->

<project name="tran" basedir="." default="all">

  <!-- Null out compile so default install won't run it This is so the
       top will be pkg.install, which calls transforms sequentially
       They must be sequential, because some depend on others. http
       must be fully built before httpblocker can be built.  -->
  <target name="compile"/>

  <import file="../buildtools/buildmagic.xml"/>

  <property name="casings"
        value="http,ftp,mail"/>
  <property name="bases"
        value="virus"/>
  <property name="transforms"
        value="nat,firewall,airgap,reporting,protofilter,test,sophos,fprot,hauri,clam,spyware,httpblocker,email,spam"/>



  <!--              -->
  <!-- main targets -->
  <!--              -->

  <target name="pkg.gensrc"/>
<!--     <var name="tran.type" value="casing"/> -->
<!--     <foreach target="xdoclet.tran" param="tran.name" inheritall="true" -->
<!--              parallel="false" list="${casings}"/> -->
<!--     <var name="tran.type" value="base"/> -->
<!--     <foreach target="xdoclet.tran" param="tran.name" inheritall="true" -->
<!--              parallel="false" list="${bases}"/> -->
<!--     <var name="tran.type" value="transform"/> -->
<!--     <foreach target="xdoclet.tran" param="tran.name" inheritall="true" -->
<!--              parallel="false" list="${transforms}"/> -->
<!--   </target> -->
  <target name="pkg.compile"/>
<!--     <var name="tran.type" value="casing"/> -->
<!--     <foreach target="compile.tran" param="tran.name" inheritall="true" -->
<!--              parallel="false" list="${casings}"/> -->
<!--     <var name="tran.type" value="base"/> -->
<!--     <foreach target="compile.tran" param="tran.name" inheritall="true" -->
<!--              parallel="false" list="${bases}"/> -->
<!--     <var name="tran.type" value="transform"/> -->
<!--     <foreach target="compile.tran" param="tran.name" inheritall="true" -->
<!--              parallel="false" list="${transforms}"/> -->
<!--   </target> -->
  <target name="pkg.jar"/>
<!--     <var name="tran.type" value="casing"/> -->
<!--     <foreach target="mar.tran" param="tran.name" inheritall="true" -->
<!--              parallel="false" list="${casings}"/> -->
<!--     <var name="tran.type" value="base"/> -->
<!--     <foreach target="mar.tran" param="tran.name" inheritall="true" -->
<!--              parallel="false" list="${bases}"/> -->
<!--     <var name="tran.type" value="transform"/> -->
<!--     <foreach target="mar.tran" param="tran.name" inheritall="true" -->
<!--              parallel="false" list="${transforms}"/> -->
<!--   </target> -->
  <target name="pkg.install">
    <var name="tran.type" value="casing"/>
    <foreach target="build.tran" param="tran.name" inheritall="true"
             parallel="false" list="${casings}"/>
    <var name="tran.type" value="base"/>
    <foreach target="build.tran" param="tran.name" inheritall="true"
             parallel="false" list="${bases}"/>
    <var name="tran.type" value="transform"/>
    <foreach target="build.tran" param="tran.name" inheritall="true"
             parallel="false" list="${transforms}"/>
  </target>

  <target name="build.tran">
    <!-- map all files to datestamp, if any are newer, build tran -->
    <fileset id="touched" dir="./${tran.name}/" includes="**/*">
      <depend targetdir="${build.dist}" granularity="10">
        <mapper type="merge" to="stamp-${tran.type}-${tran.name}"/>
      </depend>
    </fileset>
    <pathconvert pathsep=" " refid="touched" property="touchedTranList"/>
    <if>
      <not><equals arg1="${touchedTranList}" arg2="" /></not>
      <then>
        <!-- if changed a base or casing, rebuild all transforms -->
        <if> <equals arg1="${tran.type}" arg2="casing"/> <then>
          <delete><fileset dir="${build.dist}" includes="stamp-transform-*"/></delete>
          <delete><fileset dir="${build.dist}" includes="stamp-base-*"/></delete>
        </then> </if>
        <if> <equals arg1="${tran.type}" arg2="base"/> <then>
          <delete><fileset dir="${build.dist}" includes="stamp-transform-*"/></delete>
        </then> </if>

    <echo message="Building '${tran.name}'"/>
        <antcall target="install.tran" inheritAll="true"/>
        <touch file="${build.dist}/stamp-${tran.type}-${tran.name}"/>
      </then>
      <else>
        <echo message="Skipping '${tran.name}'"/>
      </else>
    </if>
  </target>


  <target name="pkg.clean" depends="clean.nuke"/>


  <!--              -->
  <!-- build tran   -->
  <!--              -->

  <target name="xdoclet.tran" depends="prepare">

    <mkdir dir="${build.gensrc}/${tran.name}"/>

    <hibernatedoclet destdir="${build.gensrc}/${tran.name}"
                     excludedtags="@version,@author,@todo">
      <fileset dir="${tran.name}/${src.main}">
        <include name="com/metavize/tran/${tran.name}/**"/>
      </fileset>
      <!-- XXX XDoclet needs to see mapping for superclass, blah -->
      <fileset dir="../mvvm/main">
        <include name="com/metavize/mvvm/logging/LogEvent.java"/>
      </fileset>
      <hibernate version="2.0"/>
    </hibernatedoclet>

    <mkdir dir="${build.root}/${tran.name}"/>

    <jrc srcdir="${tran.name}/${src.main}" destdir="${build.root}/${tran.name}" tempdir="${dist.mvvm.tmp}"
         keepjava="true" xmlvalidation="true">
      <classpath refid="mvvm.thirdparty.classpath"/>
      <classpath refid="jasperreports.classpath"/>
      <classpath refid="mvvm-client.classpath"/>
      <include name="**/*jrxml"/>
    </jrc>

  </target>

  <!--              -->
  <!-- compile tran -->
  <!--              -->

  <target name="compile.tran">

    <mkdir dir="${build.root}/${tran.name}"/>

    <antcall target="compile.${tran.name}" inheritAll="true"/>

    <exec executable="${buildtool.base}/dependset.sh">
      <arg value="${build.root}/${tran.name}"/>
      <arg value="${build.depcache}/${tran.name}.patternset"/>
    </exec>

    <depend srcdir="${tran.name}/${src.main}"
            destdir="${build.root}/${tran.name}"
            cache="${build.depcache}/${tran.name}" closure="yes">
      <patternset includesfile="${build.depcache}/${tran.name}.patternset"/>
    </depend>

    <!-- bases need casings -->
    <if> <equals arg1="${tran.type}" arg2="base"/> <then>
        <var name="extra.classes" value="../tran/output/jar/http-casing.mar:../tran/output/jar/ftp-casing.mar:../tran/output/jar/mail-casing.mar"/>
    </then> </if>
    <!-- transforms need casings and bases -->
    <if> <equals arg1="${tran.type}" arg2="transform"/> <then>
        <var name="extra.classes" value="../tran/output/jar/virus-base.mar:../tran/output/jar/http-casing.mar:../tran/output/jar/ftp-casing.mar:../tran/output/jar/mail-casing.mar"/>
    </then> </if>

    <!-- FIXME email special case -->
    <if> <equals arg1="${tran.name}" arg2="email"/> <then>
        <var name="extra.classes" value="../tran/output/jar/sophos-transform.mar:../tran/output/jar/fprot-transform.mar:../tran/output/jar/hauri-transform.mar:../tran/output/jar/clam-transform.mar"/>
    </then> </if>

    <javac destdir="${build.root}/${tran.name}"
           debug="on"
           optimize="false"
           deprecation="on"
           source="1.5"
           includeAntRuntime="false">

      <src path="${tran.name}/${src.main}"/>
      <src path="${build.gensrc}/${tran.name}"/>

      <classpath path="${extra.classes}"/>
      <classpath refid="gui.classpath"/>
      <classpath refid="hibernate.classpath"/>
      <classpath refid="jasperreports.classpath"/>
      <classpath refid="javamail.classpath"/>
      <classpath refid="jfreechart.classpath"/>
      <classpath refid="jnlp.classpath"/>
      <classpath refid="log4j.classpath"/>
      <classpath refid="mvvm-client.classpath"/>
      <classpath refid="mvvm.classpath"/>
      <classpath refid="netbeans.classpath"/>

      <include name="com/metavize/tran/${tran.name}/**"/>
    </javac>

  </target>

  <!--              -->
  <!-- mar tran     -->
  <!--              -->

  <target name="mar.tran" depends="xdoclet.tran, compile.tran">

    <mkdir dir="${build.root}/${tran.name}/META-INF"/>

    <jar destfile="${build.jar}/${tran.name}-${tran.type}.mar" index="yes">
      <fileset dir="${build.root}/${tran.name}"/>
      <fileset dir="${build.gensrc}/${tran.name}"/>
      <fileset dir="${tran.name}/${src.main}/">
        <include name="**/*png"/>
      </fileset>
      <fileset dir="${tran.name}/${src.resources}/${tran.name}"/>
    </jar>

    <antcall target="jar.${tran.name}" inheritAll="true"/>

  </target>

  <!--              -->
  <!-- install tran -->
  <!--              -->

  <target name="install.tran" depends="mar.tran">

    <copy file="${build.jar}/${tran.name}-${tran.type}.mar"
      todir="${dist.mvvm.toolbox}"/>
    <copy file="${build.jar}/${tran.name}-${tran.type}.mar"
      todir="${dist.mvvm.webstart}"/>

    <copy todir="${build.dist}" failonerror="false">
      <fileset dir="${tran.name}/hier"/>
    </copy>

    <antcall target="install.${tran.name}" inheritAll="true"/>

    <signjar jar="${dist.mvvm.webstart}/${tran.name}-${tran.type}.mar"
          keystore="../gui/keystore" alias="software key"
          storepass="WbDP5uz\N" />

  </target>

  <!--              -->
  <!-- custom       -->
  <!--              -->

  <target name="install.test"/>
  <target name="install.nat"/>
  <target name="install.firewall"/>
  <target name="install.spyware"/>

  <target name="install.http" >
    <copy file="${build.jar}/http-export.jar" todir="${dist.mvvm.toolbox}"/>
  </target>

  <target name="install.mail">
    <copy file="${build.jar}/mail-export.jar" todir="${dist.mvvm.toolbox}"/>
  </target>

  <target name="install.ftp">
    <copy file="${build.jar}/ftp-export.jar" todir="${dist.mvvm.toolbox}"/>
  </target>

  <target name="install.virus"/>

  <target name="install.sophos">
    <copy todir="${dist.mvvm.schema}/sophos-transform">
      <fileset dir="virus/hier/${suffix.mvvm.schema}/virus-base"/>
    </copy>
    <!-- XXX hack attack, need real gui jars -->
    <jar update="true" destfile="${dist.mvvm.webstart}/sophos-transform.mar">
      <fileset dir="${build.root}/mail"/>
    </jar>
  </target>

  <target name="install.fprot">
    <copy todir="${dist.mvvm.schema}/fprot-transform">
      <fileset dir="virus/hier/${suffix.mvvm.schema}/virus-base"/>
    </copy>
    <!-- XXX hack attack, need real gui jars -->
    <jar update="true" destfile="${dist.mvvm.webstart}/fprot-transform.mar">
      <fileset dir="${build.root}/mail"/>
    </jar>
  </target>

  <target name="install.hauri">
    <copy todir="${dist.mvvm.schema}/hauri-transform">
      <fileset dir="virus/hier/${suffix.mvvm.schema}/virus-base"/>
    </copy>
    <!-- XXX hack attack, need real gui jars -->
    <jar update="true" destfile="${dist.mvvm.webstart}/hauri-transform.mar">
      <fileset dir="${build.root}/mail"/>
    </jar>
  </target>

  <target name="install.clam">
    <copy todir="${dist.mvvm.schema}/clam-transform">
      <fileset dir="virus/hier/${suffix.mvvm.schema}/virus-base"/>
    </copy>
    <!-- XXX hack attack, need real gui jars -->
    <jar update="true" destfile="${dist.mvvm.webstart}/clam-transform.mar">
      <fileset dir="${build.root}/mail"/>
    </jar>
  </target>

  <target name="install.spam">
    <!-- XXX hack attack, need real gui jars -->
    <jar update="true" destfile="${dist.mvvm.webstart}/spam-transform.mar">
      <fileset dir="${build.root}/mail"/>
    </jar>
  </target>


  <target name="install.httpblocker"/>
  <target name="install.airgap"/>
  <target name="install.reporting"/>
  <target name="install.email"/>
  <target name="install.protofilter"/>


  <!--              -->
  <!-- custom       -->
  <!--              -->

  <target name="jar.test"/>
  <target name="jar.nat"/>
  <target name="jar.firewall"/>
  <target name="jar.spyware"/>

  <target name="jar.http">
    <jar destfile="${build.jar}/http-export.jar">
      <fileset dir="${build.root}/http">
        <include name="com/metavize/tran/http/HttpMethod.class"/>
        <include name="com/metavize/tran/http/HttpMethodUserType.class"/>
        <include name="com/metavize/tran/http/HttpRequestEvent.class"/>
        <include name="com/metavize/tran/http/HttpResponseEvent.class"/>
        <include name="com/metavize/tran/http/HttpStateMachine.class"/>
        <include name="com/metavize/tran/http/RequestLine.class"/>
        <include name="com/metavize/tran/http/StatusLine.class"/>
      </fileset>
      <fileset dir="${build.gensrc}/http">
        <include name="com/metavize/tran/http/HttpRequestEvent.hbm.xml"/>
        <include name="com/metavize/tran/http/HttpResponseEvent.hbm.xml"/>
        <include name="com/metavize/tran/http/RequestLine.hbm.xml"/>
        <include name="com/metavize/tran/http/StatusLine.hbm.xml"/>
      </fileset>
    </jar>
  </target>

  <target name="jar.mail">
    <jar destfile="${build.jar}/mail-export.jar">
      <fileset dir="${build.root}/mail">
        <include name="com/metavize/tran/mail/MessageFile.class"/>
        <include name="com/metavize/tran/mail/MimeBoundary.class"/>
        <include name="com/metavize/tran/mail/MimeStateMachine*.class"/>
        <include name="com/metavize/tran/mail/Rfc822Header*.class"/>
        <include name="com/metavize/tran/mail/SpamMessageAction*.class"/>
        <include name="com/metavize/tran/mail/SpamMessageActionUserType*.class"/>
        <include name="com/metavize/tran/mail/VirusMessageAction*.class"/>
        <include name="com/metavize/tran/mail/VirusMessageActionUserType*.class"/>
        <include name="com/metavize/tran/mail/SMTPSpamMessageAction*.class"/>
        <include name="com/metavize/tran/mail/SMTPSpamMessageActionUserType*.class"/>
        <include name="com/metavize/tran/mail/SMTPVirusMessageAction*.class"/>
        <include name="com/metavize/tran/mail/SMTPVirusMessageActionUserType*.class"/>
        <include name="com/metavize/tran/mail/SMTPNotifyAction*.class"/>
        <include name="com/metavize/tran/mail/SMTPNotifyActionUserType*.class"/>
        <include name="com/metavize/tran/mail/SmtpCommand*.class"/>
        <include name="com/metavize/tran/mail/SmtpReply*.class"/>
        <include name="com/metavize/tran/mail/SmtpStateMachine*.class"/>
        <include name="com/metavize/tran/mail/PopCommand*.class"/>
        <include name="com/metavize/tran/mail/PopReply*.class"/>
        <include name="com/metavize/tran/mail/PopStateMachine*.class"/>
        <include name="com/metavize/tran/mail/ImapCommand*.class"/>
        <include name="com/metavize/tran/mail/ImapReply*.class"/>
        <include name="com/metavize/tran/mail/ImapStateMachine*.class"/>
      </fileset>
      <fileset dir="${build.gensrc}/mail">
        <!-- insert exported hibernate mappings here -->
      </fileset>
    </jar>
  </target>

  <target name="jar.ftp">
    <jar destfile="${build.jar}/ftp-export.jar">
      <fileset dir="${build.root}/ftp">
        <include name="com/metavize/tran/ftp/FtpCommand.class"/>
        <include name="com/metavize/tran/ftp/FtpFunction.class"/>
        <include name="com/metavize/tran/ftp/FtpReply.class"/>
        <include name="com/metavize/tran/ftp/FtpStateMachine.class"/>
        <include name="com/metavize/tran/ftp/FtpUtil.class"/>
      </fileset>
      <fileset dir="${build.gensrc}/ftp">
        <!-- insert exported hibernate mappings here -->
      </fileset>
    </jar>
  </target>

  <target name="jar.virus"/>
  <target name="jar.httpblocker"/>
  <target name="jar.spam"/>
  <target name="jar.protofilter"/>
  <target name="jar.airgap"/>
  <target name="jar.reporting"/>
  <target name="jar.email"> <!-- include Sophos, Fprot, Clam, and Hauri Scanners -->
    <jar destfile="${build.jar}/${tran.name}-${tran.type}.mar" index="yes"
         update="true">
      <fileset dir="${build.root}/sophos"/>
      <fileset dir="sophos/${src.main}">
        <include name="**/*png"/>
      </fileset>
      <fileset dir="${build.root}/fprot"/>
      <fileset dir="fprot/${src.main}">
        <include name="**/*png"/>
      </fileset>
      <fileset dir="${build.root}/hauri"/>
      <fileset dir="hauri/${src.main}">
        <include name="**/*png"/>
      </fileset>
      <fileset dir="${build.root}/clam"/>
      <fileset dir="clam/${src.main}">
        <include name="**/*png"/>
      </fileset>
      <fileset dir="${build.root}/virus"/>
    </jar>
  </target>
  <target name="jar.sophos"> <!-- include Virus Abstract transform -->
    <jar destfile="${build.jar}/${tran.name}-${tran.type}.mar" index="yes"
         update="true">
      <fileset dir="${build.root}/virus"/>
      <fileset dir="${build.gensrc}/virus"/>
    </jar>
  </target>
  <target name="jar.fprot"> <!-- include Virus Abstract transform -->
    <jar destfile="${build.jar}/${tran.name}-${tran.type}.mar" index="yes"
         update="true">
      <fileset dir="${build.root}/virus"/>
      <fileset dir="${build.gensrc}/virus"/>
    </jar>
  </target>
  <target name="jar.hauri"> <!-- include Virus Abstract transform -->
    <jar destfile="${build.jar}/${tran.name}-${tran.type}.mar" index="yes"
         update="true">
      <fileset dir="${build.root}/virus"/>
      <fileset dir="${build.gensrc}/virus"/>
    </jar>
  </target>
  <target name="jar.clam"> <!-- include Virus Abstract transform -->
    <jar destfile="${build.jar}/${tran.name}-${tran.type}.mar" index="yes"
         update="true">
      <fileset dir="${build.root}/virus"/>
      <fileset dir="${build.gensrc}/virus"/>
    </jar>
  </target>

  <target name="compile.test"/>
  <target name="compile.nat"/>
  <target name="compile.firewall"/>
  <target name="compile.spyware"/>
  <target name="compile.http"/>
  <target name="compile.ftp"/>
  <target name="compile.mail"/>
  <target name="compile.virus"/>
  <target name="compile.sophos"/>
  <target name="compile.fprot"/>
  <target name="compile.hauri"/>
  <target name="compile.clam"/>
  <target name="compile.httpblocker"/>
  <target name="compile.spam"/>
  <target name="compile.airgap"/>
  <target name="compile.reporting"/>
  <target name="compile.email"/>
  <target name="compile.protofilter"/>

    <!-- build LoadPatterns.java -->
    <!-- map all files to LoadPatterns.java, if any are newer, run mkLoadPatterns.sh -->
    <!--     <fileset id="pat.fileset" dir="./protofilter/pattern-build/" -->
    <!--              includes="**/*.pat,**/*.java,mkLoadPatterns.sh"> -->
    <!--       <depend targetdir="protofilter/main/com/metavize/tran/protofilter/"> -->
    <!--         <mapper type="merge" to="LoadPatterns.java"/> -->
    <!--       </depend> -->
    <!--     </fileset> -->
    <!--     <pathconvert pathsep=" " refid="pat.fileset" property="patList"/> -->
    <!--     <if> -->
    <!--       <not><equals arg1="${patList}" arg2="" /></not> -->
    <!--       <then> -->
    <!--         <exec executable="/bin/sh" failonerror="true"> -->
    <!--           <arg value="-c"/> -->
    <!--           <arg value="./protofilter/pattern-build/mkLoadPatterns.sh"/> -->
    <!--         </exec> -->
    <!--       </then> -->
    <!--     </if> -->
    <!--   </target> -->


  <!-- Javadoc target -->
  <target name="jdoc" depends="pkg.jar">
    <foreach target="invokeJDoc" param="jdoc.target.transform" inheritall="true"
      parallel="false" list="${casings}"/>
    <foreach target="invokeJDoc" param="jdoc.target.transform" inheritall="true"
      parallel="false" list="${bases}"/>
    <foreach target="invokeJDoc" param="jdoc.target.transform" inheritall="true"
      parallel="false" list="${transforms}"/>
  </target>

  <!-- Helper for performing the jdoc target for each transform -->
  <target name="invokeJDoc">
    <antcall target="func.jdoc">
      <param name="jdoc.src" value="${jdoc.target.transform}/${src.main}"/>
      <param name="jdoc.prjName" value="tran_${jdoc.target.transform}"/>
    </antcall>
  </target>

  <!-- For participating in the larger JavaDoc generation -->
  <target name="bigjdoc">
    <foreach target="copyForBigJDoc" param="jdoc.target.transform" inheritall="true"
      parallel="false" list="${casings}"/>
    <foreach target="copyForBigJDoc" param="jdoc.target.transform" inheritall="true"
      parallel="false" list="${bases}"/>
    <foreach target="copyForBigJDoc" param="jdoc.target.transform" inheritall="true"
      parallel="false" list="${transforms}"/>
  </target>

  <!--
    Helper for performing the bigjdoc target for each transform.  Copies
    all source to ${jdoc.bigtree.src} for inclusion in the big JavaDoc
    generation
  -->
  <target name="copyForBigJDoc">
    <copydir src="${jdoc.target.transform}/${src.main}"
      dest="${jdoc.bigtree.src}"
      includes="**/*.java"
      excludes="**/Test.java"
      forceoverwrite="true"/>
  </target>


</project>
