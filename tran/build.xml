<?xml version="1.0"?>

<!--
Copyright (c) 2004, 2005, 2006 Metavize Inc.
All rights reserved.

This software is the confidential and proprietary information of
Metavize Inc. ("Confidential Information").  You shall
not disclose such Confidential Information.

$Id: build.xml,v 1.37 2005/03/18 02:34:49 amread Exp $
-->

<project name="tran" basedir="." default="all">

  <!-- Null out compile so default install won't run it This is so the
       top will be pkg.install, which calls transforms sequentially
       They must be sequential, because some depend on others. http
       must be fully built before httpblocker can be built.  -->
  <target name="compile"/>

  <import file="../buildtools/buildmagic.xml"/>

  <!-- When creating new transforms (casings or bases) you need to
       carefully update the depends in build.tran so that the
       appropriate stamps are removed so the subtransforms are
       rebuilt.  Also note that the build order here is meaningful as
       we use earlier parts in later parts without explicit
       dependencies.  -->
  <property name="casings"
            value="http,ftp,mail"/>
  <property name="bases"
            value="virus,spam"/>
  <property name="transforms"
            value="openvpn,portal,nat,firewall,airgap,reporting,protofilter,boxbackup,test,sigma,hauri,clam,kav,spyware,httpblocker,spamassassin,clamphish,ids"/>

  <!--              -->
  <!-- main targets -->
  <!--              -->

  <target name="pkg.gensrc"/>
  <target name="pkg.compile"/>
  <target name="pkg.jar"/>
  <target name="pkg.install">
    <var name="tran.type" value="casing"/>
    <foreach target="build.tran" param="tran.name" inheritall="true"
             parallel="false" list="${casings}"/>
    <var name="tran.type" value="base"/>
    <foreach target="build.tran" param="tran.name" inheritall="true"
             parallel="false" list="${bases}"/>
    <var name="tran.type" value="transform"/>
    <foreach target="build.tran" param="tran.name" inheritall="true"
             parallel="false" list="${transforms}"/>
  </target>

  <target name="build.tran">
    <!-- map all files to datestamp, if any are newer, build tran -->
    <fileset id="touched" dir="./${tran.name}/" includes="**/*">
      <depend targetdir="${build.dist}" granularity="10">
        <mapper type="merge" to="stamp-${tran.type}-${tran.name}"/>
      </depend>
    </fileset>
    <pathconvert pathsep=" " refid="touched" property="touchedTranList"/>
    <if>
      <not><equals arg1="${touchedTranList}" arg2="" /></not>
      <then>
        <!-- if changed a base or casing, rebuild all transforms -->
        <if> <equals arg1="${tran.type}" arg2="casing"/> <then>
        <if> <equals arg1="${tran.name}" arg2="ftp"/> <then>
        <delete><fileset dir="${build.dist}" includes="stamp-base-virus"/></delete>
        </then> </if>
        <if> <equals arg1="${tran.name}" arg2="http"/> <then>
        <delete><fileset dir="${build.dist}" includes="stamp-base-virus"/></delete>
        </then> </if>
        <if> <equals arg1="${tran.name}" arg2="mail"/> <then>
        <delete><fileset dir="${build.dist}" includes="stamp-base-virus"/></delete>
        <delete><fileset dir="${build.dist}" includes="stamp-base-spam"/></delete>
        </then> </if>
        </then> </if>
        <if> <equals arg1="${tran.type}" arg2="base"/> <then>
        <if> <equals arg1="${tran.name}" arg2="virus"/> <then>
        <delete><fileset dir="${build.dist}" includes="stamp-transform-clam"/></delete>
        <delete><fileset dir="${build.dist}" includes="stamp-transform-hauri"/></delete>
        <delete><fileset dir="${build.dist}" includes="stamp-transform-kav"/></delete>
        </then> </if>
        <if> <equals arg1="${tran.name}" arg2="spam"/> <then>
        <delete><fileset dir="${build.dist}" includes="stamp-transform-spamassassin"/></delete>
        <delete><fileset dir="${build.dist}" includes="stamp-transform-clamphish"/></delete>
        </then> </if>
        </then> </if>

        <echo message="Building '${tran.name}'"/>
        <antcall target="install.tran" inheritAll="true"/>
        <touch file="${build.dist}/stamp-${tran.type}-${tran.name}"/>
      </then>
      <else>
        <echo message="Skipping '${tran.name}'"/>
      </else>
    </if>
  </target>


  <target name="pkg.clean" depends="clean.nuke"/>


  <!--              -->
  <!-- build tran   -->
  <!--              -->

  <target name="gensrc.tran" depends="prepare">
    <mkdir dir="${build.gensrc}/${tran.name}"/>
    <mkdir dir="${build.root}/${tran.name}"/>
    <foreach target="rpdtojrxml" param="rpd" inheritall="true" parallel="false">
      <fileset dir="${tran.name}/${src.main}">
        <include name="**/*.rpd"/>
      </fileset>
    </foreach>
  </target>

  <target name="rpdtojrxml">
    <java classname="ReportGenerator"
          fork="false"
          failonerror="true">
      <arg line="-t mvvm/resources/reports"/>
      <arg line="-o ${build.gensrc}/${tran.name}/reports"/>
      <arg line="${rpd}"/>
      <classpath refid="reports.thirdparty.classpath"/>
      <classpath path="../util/output/util"/>
    </java>
  </target>

  <target name="xdoclet.tran" depends="gensrc.tran">
    <hibernatedoclet destdir="${build.gensrc}/${tran.name}"
                     excludedtags="@version,@author,@todo" verbose="true">
      <fileset dir="${tran.name}/${src.main}" includes="**/*.java">
        <contains text="@hibernate"/>
      </fileset>
      <fileset dir="../mvvm/main">
        <include name="com/metavize/mvvm/logging/LogEvent.java"/>
      </fileset>
      <hibernate version="2.0"/>
    </hibernatedoclet>

    <!-- xdoclet is re re -->
    <exec executable="${util.bin}/fix-hbm" failonerror="true">
      <arg value="${build.gensrc}/${tran.name}"/>
    </exec>

    <jrc srcdir="${build.gensrc}/${tran.name}" destdir="${build.root}/${tran.name}" tempdir="${build.tmp}"
         keepjava="true" xmlvalidation="true">
      <classpath refid="reports.thirdparty.classpath"/>
      <classpath refid="mvvm-client.classpath"/>
      <include name="**/*jrxml"/>
    </jrc>
    <jrc srcdir="${tran.name}/${src.main}" destdir="${build.root}/${tran.name}" tempdir="${build.tmp}"
         keepjava="true" xmlvalidation="true">
      <classpath refid="reports.thirdparty.classpath"/>
      <classpath refid="mvvm-client.classpath"/>
      <include name="**/*jrxml"/>
    </jrc>
  </target>


  <!--              -->
  <!-- compile tran -->
  <!--              -->

  <target name="compile.tran-client">

    <mkdir dir="${build.root}/${tran.name}-client"/>

    <exec executable="${buildtool.base}/dependset.sh">
      <arg value="${build.root}/${tran.name}-client"/>
      <arg value="${build.depcache}/${tran.name}-client.patternset"/>
    </exec>

    <depend srcdir="${tran.name}/${src.main}"
            destdir="${build.root}/${tran.name}-client"
            cache="${build.depcache}/${tran.name}-client" closure="yes">
      <patternset includesfile="${build.depcache}/${tran.name}-client.patternset"/>
    </depend>

    <!-- bases need casings -->
    <if> <equals arg1="${tran.type}" arg2="base"/> <then>
    <var name="extra.classes" value="../tran/output/jar/http-casing-client.mar:../tran/output/jar/ftp-casing-client.mar:../tran/output/jar/mail-casing-client.mar"/>
    </then> </if>
    <!-- transforms need casings and bases -->
    <if> <equals arg1="${tran.type}" arg2="transform"/> <then>
    <var name="extra.classes" value="../tran/output/jar/spam-base-client.mar:../tran/output/jar/virus-base-client.mar:../tran/output/jar/http-casing-client.mar:../tran/output/jar/ftp-casing-client.mar:../tran/output/jar/mail-casing-client.mar"/>
    </then> </if>
    <!-- Because of automatic proxies, a few things don't get referenced but are still nedeed -->
    <if> <equals arg1="${tran.name}" arg2="reporting"/> <then>
    <patternset id="extra.sources" includes="com/metavize/tran/reporting/ReportingTransform.java"/>
    </then> </if>
    <if> <equals arg1="${tran.name}" arg2="portal"/> <then>
    <patternset id="extra.sources">
      <include name="com/metavize/tran/portal/PortalTransform.java"/>
      <include name="com/metavize/tran/portal/rdp/RdpBookmark.java"/>
    </patternset>
    </then> </if>
    <if> <equals arg1="${tran.name}" arg2="http"/> <then>
    <patternset id="extra.sources" includes="com/metavize/tran/http/HttpTransform.java"/>
    </then> </if>
    <if> <equals arg1="${tran.name}" arg2="ftp"/> <then>
    <patternset id="extra.sources" includes="com/metavize/tran/ftp/FtpTransform.java"/>
    </then> </if>
    <if> <equals arg1="${tran.name}" arg2="nat"/> <then>
    <patternset id="extra.sources">
      <include name="com/metavize/tran/nat/NatSettingsImpl.java"/>
      <include name="com/metavize/tran/nat/NatAdvancedSettingsImpl.java"/>
      <include name="com/metavize/tran/nat/SettingsValidator.java"/>
    </patternset>
    </then> </if>

    <!-- First do the Fake classes that we use until we've cleaned up
         our code enough XXX -->
    <if><available file="${tran.name}/fake" type="dir"/> <then>
    <javac destdir="${build.root}/${tran.name}-client"
           debug="on"
           optimize="false"
           deprecation="on"
           source="1.5"
           includeAntRuntime="false">

      <src path="${tran.name}/fake"/>

      <classpath path="${extra.classes}"/>
      <classpath refid="gui.classpath"/>
      <classpath refid="hibernate.classpath"/>
      <classpath refid="jfreechart.classpath"/>
      <classpath refid="jnlp.classpath"/>
      <classpath refid="log4j.classpath"/>
      <classpath refid="mvvm-client.classpath"/>
      <classpath refid="netbeans.classpath"/>
    </javac>
    </then></if>

    <!-- Now do the settings classes -->
    <javac destdir="${build.root}/${tran.name}-client"
           debug="on"
           optimize="false"
           deprecation="on"
           source="1.5"
           includeAntRuntime="false">

      <src path="${tran.name}/${src.main}"/>

      <containsregexp expression="implements.*Serializable"/>

      <classpath location="${build.root}/${tran.name}-client"/>
      <classpath path="${extra.classes}"/>
      <classpath refid="gui.classpath"/>
      <classpath refid="hibernate.classpath"/>
      <classpath refid="jfreechart.classpath"/>
      <classpath refid="jnlp.classpath"/>
      <classpath refid="log4j.classpath"/>
      <classpath refid="mvvm-client.classpath"/>
      <classpath refid="netbeans.classpath"/>
    </javac>

    <!-- Finally do the gui, events classes, and misc classes -->
    <javac destdir="${build.root}/${tran.name}-client"
           debug="on"
           optimize="false"
           deprecation="on"
           source="1.5"
           includeAntRuntime="false">

      <src path="${tran.name}/${src.main}"/>

      <patternset refid="extra.sources"/>
      <include name="com/metavize/tran/${tran.name}/gui/**"/>
      <include name="com/metavize/tran/${tran.name}/*Event.java"/>
      <include name="com/metavize/tran/${tran.name}/**/*Exception.java"/>
      <include name="com/metavize/tran/${tran.name}/**/*Comparator.java"/>
      <!-- Don't need this since the GUI references them: include
           name="com/metavize/tran/${tran.name}/*Transform.java" -->

      <classpath location="${build.root}/${tran.name}-client"/>
      <classpath path="${extra.classes}"/>
      <classpath refid="gui.classpath"/>
      <classpath refid="hibernate.classpath"/>
      <classpath refid="jfreechart.classpath"/>
      <classpath refid="jnlp.classpath"/>
      <classpath refid="log4j.classpath"/>
      <classpath refid="mvvm-client.classpath"/>
      <classpath refid="netbeans.classpath"/>
    </javac>

  </target>

  <target name="compile.tran">

    <mkdir dir="${build.root}/${tran.name}"/>

    <antcall target="compile.${tran.name}" inheritAll="true"/>

    <exec executable="${buildtool.base}/dependset.sh">
      <arg value="${build.root}/${tran.name}"/>
      <arg value="${build.depcache}/${tran.name}.patternset"/>
    </exec>

    <depend srcdir="${tran.name}/${src.main}"
            destdir="${build.root}/${tran.name}"
            cache="${build.depcache}/${tran.name}" closure="yes">
      <patternset includesfile="${build.depcache}/${tran.name}.patternset"/>
    </depend>

    <!-- bases need casings -->
    <if> <equals arg1="${tran.type}" arg2="base"/> <then>
    <var name="extra.classes" value="../tran/output/jar/http-casing.mar:../tran/output/jar/ftp-casing.mar:../tran/output/jar/mail-casing.mar"/>
    </then> </if>
    <!-- transforms need casings and bases -->
    <if> <equals arg1="${tran.type}" arg2="transform"/> <then>
    <var name="extra.classes" value="../tran/output/jar/spam-base.mar:../tran/output/jar/virus-base.mar:../tran/output/jar/http-casing.mar:../tran/output/jar/ftp-casing.mar:../tran/output/jar/mail-casing.mar"/>
    </then> </if>

    <!-- FIXME clamphish special case -->
    <if><equals arg1="${tran.name}" arg2="clamphish"/>
    <then>
      <var name="extra.classes" value="../tran/output/jar/clam-transform.mar:../tran/output/jar/spam-base.mar:../tran/output/jar/virus-base.mar:../tran/output/jar/mail-casing.mar"/>
    </then>
    </if>

    <javac destdir="${build.root}/${tran.name}"
           debug="on"
           optimize="false"
           deprecation="on"
           source="1.5"
           includeAntRuntime="false">

      <src path="${tran.name}/${src.main}"/>
      <src path="${build.gensrc}/${tran.name}"/>

      <classpath path="${extra.classes}"/>

      <classpath refid="hibernate.classpath"/>
      <classpath refid="jasperreports.classpath"/>
      <classpath refid="javamail.classpath"/>
      <classpath refid="jcifs.classpath"/>
      <classpath refid="commons-fileupload.classpath"/>
      <classpath refid="jfreechart.classpath"/>
      <classpath refid="jnlp.classpath"/>
      <classpath refid="junit.classpath"/>
      <classpath refid="log4j.classpath"/>
      <classpath refid="mvvm-client.classpath"/>
      <classpath refid="mvvm-reports.classpath"/>
      <classpath refid="mvvm.classpath"/>
      <classpath refid="tomcat.classpath"/>
      <classpath refid="velocity.classpath"/>
      <classpath refid="yjp.classpath"/>

      <exclude name="com/metavize/tran/${tran.name}/gui/**"/>
    </javac>

  </target>

  <!--              -->
  <!-- mar tran     -->
  <!--              -->

  <target name="mar.tran-client" depends="xdoclet.tran, compile.tran-client">

    <mkdir dir="${build.root}/${tran.name}-client/META-INF"/>

    <jar destfile="${build.jar}/${tran.name}-${tran.type}-client.mar" index="yes">
      <fileset dir="${build.root}/${tran.name}-client"/>
      <fileset dir="${tran.name}/${src.main}/">
        <include name="**/*png"/>
      </fileset>
    </jar>

  </target>

  <target name="mar.tran" depends="xdoclet.tran, compile.tran, mar.tran-client">
    <mkdir dir="${build.root}/${tran.name}/META-INF"/>

    <jar destfile="${build.jar}/${tran.name}-${tran.type}.mar" index="yes">
      <fileset dir="${build.root}/${tran.name}"/>
      <fileset dir="${build.gensrc}/${tran.name}">
        <exclude name="**/*jrxml"/>
        <exclude name="**/*.java"/>
      </fileset>
      <fileset dir="${tran.name}/${src.main}/">
        <include name="**/*png"/>
      </fileset>
      <fileset dir="${tran.name}/${src.resources}/${tran.name}">
        <include name="**"/>
      </fileset>
    </jar>

    <antcall target="jar.${tran.name}" inheritAll="true"/>
  </target>

  <!--              -->
  <!-- install tran -->
  <!--              -->

  <target name="install.tran" depends="mar.tran, mar.tran-client">

    <copy file="${build.jar}/${tran.name}-${tran.type}.mar"
          todir="${dist.mvvm.toolbox}"/>
    <copy file="${build.jar}/${tran.name}-${tran.type}-client.mar"
          todir="${dist.mvvm.webstart}"/>

    <if>
      <equals arg1="${tran.name}" arg2="openvpn"/>
      <then>
        <echo message="Copying OPENVPN with filtering"/>
        <copy todir="${build.dist}" filtering="true" failonerror="false">
          <fileset dir="${tran.name}/hier">
            <exclude name="usr/share/metavize/openvpn/installer/openvpn/**"/>
            <exclude name="usr/share/metavize/openvpn/images/**"/>
            <exclude name="usr/share/metavize/openvpn/dh/**"/>
            <exclude name="usr/share/metavize/web/openvpn/images/**"/>
          </fileset>
        </copy>
        <copy todir="${build.dist}" failonerror="false">
          <fileset dir="${tran.name}/hier">
            <include name="usr/share/metavize/openvpn/installer/openvpn/**"/>
            <include name="usr/share/metavize/openvpn/images/**"/>
            <include name="usr/share/metavize/openvpn/dh/**"/>
            <include name="usr/share/metavize/web/openvpn/images/**"/>
          </fileset>
        </copy>
      </then>
      <else>
        <copy todir="${build.dist}" failonerror="false">
          <fileset dir="${tran.name}/hier"/>
        </copy>
      </else>
    </if>

    <antcall target="install.${tran.name}" inheritAll="true"/>

    <if> <isset property="use-pack200"/> <then>
    <pack200 src="${dist.mvvm.webstart}/${tran.name}-${tran.type}-client.mar"
             destfile="${dist.mvvm.webstart}/${tran.name}-${tran.type}-client.mar.pack"/>
    <unpack200 src="${dist.mvvm.webstart}/${tran.name}-${tran.type}-client.mar.pack"
               dest="${dist.mvvm.webstart}/${tran.name}-${tran.type}-client.mar"/>
    </then></if>
    <delete file="${dist.mvvm.webstart}/${tran.name}-${tran.type}-client.mar.pack"/>
    <signjar jar="${dist.mvvm.webstart}/${tran.name}-${tran.type}-client.mar"
             keystore="../gui/keystore" alias="key"
             storepass="0x7a0f4b2f2b0560fa" />
    <if> <isset property="use-pack200"/> <then>
    <pack200 src="${dist.mvvm.webstart}/${tran.name}-${tran.type}-client.mar"
             destfile="${dist.mvvm.webstart}/${tran.name}-${tran.type}-client.mar.pack.gz"
             gzipoutput="true"/>
    </then></if>

  </target>

  <!--              -->
  <!-- custom       -->
  <!--              -->

  <target name="install.test"/>
  <target name="install.boxbackup"/>
  <target name="install.ids"/>
  <target name="install.nat"/>

  <target name="install.openvpn">
    <mkdir  dir="${dist.mvvm.web}/${tran.name}/WEB-INF/lib"/>
    <copy file="${build.jar}/openvpn-web.jar" todir="${dist.mvvm.web}/${tran.name}/WEB-INF/lib"/>
  </target>

  <target name="install.portal">
    <!-- rdp -->
    <copy todir="${dist.mvvm.web}/rdp" flatten="yes">
      <fileset refid="properjavardp.jarset"/>
    </copy>

    <signjar keystore="../gui/keystore" alias="key"
             storepass="0x7a0f4b2f2b0560fa" lazy="true">
      <fileset dir="${dist.mvvm.web}/rdp">
        <include name="*.jar"/>
      </fileset>
    </signjar>

    <!-- vnc -->
    <copy todir="${dist.mvvm.web}/vnc">
      <fileset refid="log4j.jarset"/>
    </copy>

    <signjar keystore="../gui/keystore" alias="key"
             storepass="0x7a0f4b2f2b0560fa" lazy="true">
      <fileset dir="${dist.mvvm.web}/vnc">
        <include name="*.jar"/>
      </fileset>
    </signjar>
  </target>

  <target name="install.firewall"/>
  <target name="install.spyware"/>

  <target name="install.http" >
    <copy file="${build.jar}/http-export.jar" todir="${dist.mvvm.toolbox}"/>
  </target>

  <target name="install.mail">
    <copy file="${build.jar}/mail-export.jar" todir="${dist.mvvm.toolbox}"/>
    <!--
        Copy-over the web app.  Most of the interesting logic for this
        was down when we made the mail.jar
    -->
    <mkdir dir="${dist.mvvm.web}/quarantine"/>
    <copy todir="${dist.mvvm.web}/quarantine">
      <fileset dir="${build.webapps}/quarantine"/>
    </copy>
  </target>

  <target name="install.ftp">
    <copy file="${build.jar}/ftp-export.jar" todir="${dist.mvvm.toolbox}"/>
  </target>

  <target name="install.virus"/>
  <target name="install.spam"/>

  <target name="install.hauri">
    <!--     <copy todir="${dist.mvvm.schema}/hauri-transform"> -->
    <!--       <fileset dir="virus/hier/${suffix.mvvm.schema}/virus-base"/> -->
    <!--     </copy> -->
  </target>

  <target name="install.kav">
    <!--     <copy todir="${dist.mvvm.schema}/kav-transform"> -->
    <!--       <fileset dir="virus/hier/${suffix.mvvm.schema}/virus-base"/> -->
    <!--     </copy> -->
  </target>

  <target name="install.clam">
    <!--     <copy todir="${dist.mvvm.schema}/clam-transform"> -->
    <!--       <fileset dir="virus/hier/${suffix.mvvm.schema}/virus-base"/> -->
    <!--     </copy> -->
  </target>
  <target name="install.spamassassin">
    <!--     <copy todir="${dist.mvvm.schema}/spamassassin-transform"> -->
    <!--       <fileset dir="spam/hier/${suffix.mvvm.schema}/spam-base"/> -->
    <!--     </copy> -->
  </target>

  <target name="install.clamphish">
    <!--     <copy todir="${dist.mvvm.schema}/clamphish-transform"> -->
    <!--       <fileset dir="spam/hier/${suffix.mvvm.schema}/spam-base"/> -->
    <!--     </copy> -->
  </target>


  <target name="install.httpblocker"/>
  <target name="install.airgap"/>
  <target name="install.reporting"/>
  <target name="install.protofilter"/>
  <target name="install.sigma"/>


  <target name="install.puresight">
    <copy file="${build.jar}/puresight-export.jar" todir="${dist.mvvm.toolbox}"/>
  </target>



  <!--              -->
  <!-- custom       -->
  <!--              -->

  <target name="jar.test"/>
  <target name="jar.boxbackup"/>
  <target name="jar.ids"/>
  <target name="jar.nat"/>

  <target name="jar.openvpn">
    <jar destfile="${build.jar}/openvpn-web.jar">
      <fileset dir="${build.root}/openvpn">
        <include name="com/metavize/tran/openvpn/SiteNetwork.class"/>
        <include name="com/metavize/tran/openvpn/ServerSiteNetwork.class"/>
        <include name="com/metavize/tran/openvpn/ClientSiteNetwork.class"/>
        <include name="com/metavize/tran/openvpn/VpnClient.class"/>
        <include name="com/metavize/tran/openvpn/VpnTransform.class"/>
        <include name="com/metavize/tran/openvpn/VpnTransform$$ConfigState.class"/>
        <include name="com/metavize/tran/openvpn/VpnGroup.class"/>
        <include name="com/metavize/tran/openvpn/VpnSettings.class"/>
        <include name="com/metavize/tran/openvpn/Constants.class"/>
        <include name="com/metavize/tran/openvpn/CertificateParameters.class"/>
        <include name="com/metavize/tran/openvpn/GroupList.class"/>
        <include name="com/metavize/tran/openvpn/ExportList.class"/>
        <include name="com/metavize/tran/openvpn/ClientList.class"/>
        <include name="com/metavize/tran/openvpn/SiteList.class"/>
        <include name="com/metavize/tran/openvpn/servlet/*.class"/>
      </fileset>
    </jar>
  </target>

  <target name="jar.portal"/>

  <target name="jar.firewall"/>
  <target name="jar.spyware"/>

  <target name="jar.http">
    <jar destfile="${build.jar}/http-export.jar">
      <fileset dir="${build.root}/http">
        <include name="com/metavize/tran/http/HttpMethod.class"/>
        <include name="com/metavize/tran/http/HttpMethodUserType.class"/>
        <include name="com/metavize/tran/http/HttpRequestEvent.class"/>
        <include name="com/metavize/tran/http/HttpResponseEvent.class"/>
        <include name="com/metavize/tran/http/HttpStateMachine*.class"/>
        <include name="com/metavize/tran/http/RequestLine*.class"/>
        <include name="com/metavize/tran/http/StatusLine.class"/>
      </fileset>
      <fileset dir="${build.gensrc}/http">
        <include name="com/metavize/tran/http/HttpRequestEvent.hbm.xml*"/>
        <include name="com/metavize/tran/http/HttpResponseEvent.hbm.xml*"/>
        <include name="com/metavize/tran/http/RequestLine.hbm.xml*"/>
        <include name="com/metavize/tran/http/StatusLine.hbm.xml*"/>
      </fileset>
    </jar>
  </target>

  <target name="jar.mail">
    <jar destfile="${build.jar}/mail-export.jar">
      <fileset dir="${build.root}/mail">
        <include name="com/metavize/tran/mail/papi/*.class"/>
        <include name="com/metavize/tran/mail/papi/pop/*.class"/>
        <include name="com/metavize/tran/mail/papi/imap/*.class"/>
        <include name="com/metavize/tran/mail/papi/smtp/*.class"/>
        <include name="com/metavize/tran/mail/papi/smtp/sapi/*.class"/>
        <!--
            For Quarantine stuff. Note that two classes are from the
            impl (internal) package, but are passed via RMI so must be
            included
        -->
        <include name="com/metavize/tran/mail/papi/quarantine/*.class"/>
        <include name="com/metavize/tran/mail/impl/quarantine/store/InboxIndexImpl.class"/>
        <include name="com/metavize/tran/mail/impl/quarantine/store/InboxRecordImpl.class"/>
        <!--
            For safelist stuff
        -->
        <include name="com/metavize/tran/mail/papi/safelist/*.class"/>

      </fileset>
      <fileset dir="${build.gensrc}/mail">
        <include name="com/metavize/tran/mail/papi/*.hbm.xml*"/>
        <include name="com/metavize/tran/mail/papi/quarantine/*.hbm.xml*"/>
        <include name="com/metavize/tran/mail/papi/smtp/*.hbm.xml*"/>
        <include name="com/metavize/tran/mail/papi/safelist/*.hbm.xml*"/>
      </fileset>
    </jar>
    <!--
        Create the whole web app.  Perhaps this should be its own
        target, but I cannot make heads or tails of the build system at
        this point.
    -->
    <mkdir dir="${build.webapps}/quarantine"/>

    <!-- Copy over our static files (exclude the JSPs and the web.xml) -->
    <copy todir="${build.webapps}/quarantine">
      <fileset dir="mail/${src.webapps}/quarantine/root">
        <exclude name="**/*.jsp"/>
        <exclude name="WEB-INF/web.xml"/>
      </fileset>
    </copy>

    <!-- Create the "classes" directory -->
    <mkdir dir="${build.webapps}/quarantine/WEB-INF/classes"/>

    <!-- Compile the servlets and and supporting stuff -->
    <javac destdir="${build.webapps}/quarantine/WEB-INF/classes"
           debug="on"
           optimize="false"
           deprecation="on"
           source="1.5"
           includeAntRuntime="false">

      <src path="mail/${src.webapps}/quarantine/src"/>

      <classpath path="${build.jar}/mail-export.jar"/>
      <classpath refid="log4j.classpath"/>
      <classpath refid="mvvm.classpath"/>
      <classpath refid="tomcat.classpath"/>
    </javac>

    <!-- perform the JSPc stuff -->
    <java classname="org.apache.jasper.JspC"
          fork="true"
          failonerror="true">
      <arg line="-d ${build.webapps}/quarantine/WEB-INF/classes"/>
      <arg line="-p com.metavize.tran.mail.web.jsp"/>
      <arg line="-webinc ${build.webapps}/quarantine/WEB-INF/web-fragment.xml"/>
      <arg line="-uriroot mail/${src.webapps}/quarantine/root/"/>
      <classpath refid="tomcat.thirdparty.classpath"/>
      <classpath path="${build.webapps}/quarantine/WEB-INF/classes"/>
      <classpath path="${build.jar}/mail-export.jar"/>
    </java>

    <!--
        Compile again, as the JSPs are permitted to depend on java stuff
        in the web app (and we could not do this earlier
    -->
    <javac destdir="${build.webapps}/quarantine/WEB-INF/classes"
           debug="on"
           optimize="false"
           deprecation="on"
           source="1.5"
           includeAntRuntime="false">

      <src path="${build.webapps}/quarantine/WEB-INF/classes"/>

      <classpath path="${build.jar}/mail-export.jar"/>
      <classpath refid="log4j.classpath"/>
      <classpath refid="mvvm.classpath"/>
      <classpath refid="tomcat.classpath"/>
    </javac>

    <!-- Delete the .java files -->
    <delete>
      <fileset dir="${build.webapps}/quarantine/WEB-INF/classes" includes="**/*.java"/>
    </delete>

    <!-- Create a "web.xml" file with substitution -->
    <loadfile property="quar-enduser-generated-web.xml"
              srcFile="${build.webapps}/quarantine/WEB-INF/web-fragment.xml"/>
    <copy file="mail/${src.webapps}/quarantine/root/WEB-INF/web.xml"
          toFile="${build.webapps}/quarantine/WEB-INF/web.xml" overwrite="true">
      <filterset>
        <filter token="JSP_PRE_COMPILED_SERVLETS" value="${quar-enduser-generated-web.xml}"/>
      </filterset>
    </copy>

    <!-- Delete the web xml fragment -->
    <delete file="${build.webapps}/quarantine/WEB-INF/web-fragment.xml"/>

    <!-- Copy-over required libraries -->
    <mkdir dir="${build.webapps}/quarantine/WEB-INF/lib"/>
    <copy toDir="${build.webapps}/quarantine/WEB-INF/lib" file="${build.jar}/mail-export.jar"/>

  </target>

  <target name="jar.ftp">
    <jar destfile="${build.jar}/ftp-export.jar">
      <fileset dir="${build.root}/ftp">
        <include name="com/metavize/tran/ftp/FtpCommand.class"/>
        <include name="com/metavize/tran/ftp/FtpFunction.class"/>
        <include name="com/metavize/tran/ftp/FtpReply.class"/>
        <include name="com/metavize/tran/ftp/FtpEpsvReply.class"/>
        <include name="com/metavize/tran/ftp/FtpStateMachine.class"/>
        <include name="com/metavize/tran/ftp/FtpUtil.class"/>
      </fileset>
      <!-- insert exported hibernate mappings here -->
    </jar>
  </target>

  <target name="jar.virus"/>
  <target name="jar.httpblocker"/>
  <target name="jar.spam"/>
  <target name="jar.protofilter"/>
  <target name="jar.sigma"/>
  <target name="jar.airgap"/>
  <target name="jar.reporting"/>
  <target name="jar.hauri"> <!-- include Virus Abstract transform -->
    <jar destfile="${build.jar}/${tran.name}-${tran.type}.mar" index="yes"
         update="true">
      <fileset dir="${build.root}/virus"/>
      <fileset dir="${build.gensrc}/virus">
        <exclude name="**/*jrxml"/>
      </fileset>
    </jar>
  </target>
  <target name="jar.kav"> <!-- include Virus Abstract transform -->
    <jar destfile="${build.jar}/${tran.name}-${tran.type}.mar" index="yes"
         update="true">
      <fileset dir="${build.root}/virus"/>
      <fileset dir="${build.gensrc}/virus">
        <exclude name="**/*jrxml"/>
      </fileset>
    </jar>
  </target>
  <target name="jar.clam"> <!-- include Virus Abstract transform -->
    <jar destfile="${build.jar}/${tran.name}-${tran.type}.mar" index="yes"
         update="true">
      <fileset dir="${build.root}/virus"/>
      <fileset dir="${build.gensrc}/virus">
        <exclude name="**/*jrxml"/>
      </fileset>
    </jar>
  </target>
  <target name="jar.spamassassin"> <!-- include Spam Abstract transform -->
    <jar destfile="${build.jar}/${tran.name}-${tran.type}.mar" index="yes"
         update="true">
      <fileset dir="${build.root}/spam"/>
      <fileset dir="${build.gensrc}/spam">
        <exclude name="**/*jrxml"/>
      </fileset>
    </jar>
  </target>
  <target name="jar.clamphish"> <!-- include Spam Abstract transform, include Clam Scanners -->
    <jar destfile="${build.jar}/${tran.name}-${tran.type}.mar" index="yes"
         update="true">
      <fileset dir="${build.root}/spam"/>
      <fileset dir="${build.gensrc}/spam">
        <exclude name="**/*jrxml"/>
      </fileset>
      <fileset dir="${build.root}/virus">
        <include name="com/metavize/tran/virus/VirusScanner*.class"/>
      </fileset>
      <fileset dir="${build.root}/clam">
        <include name="com/metavize/tran/clam/ClamScannerLauncher.class"/>
      </fileset>
    </jar>
  </target>

  <target name="jar.puresight">
    <jar destfile="${build.jar}/puresight-export.jar">
      <fileset dir="${build.root}/puresight">
        <include name="com/metavize/tran/puresight/PureSDK.class"/>
      </fileset>
    </jar>
  </target>

  <target name="compile.test"/>
  <target name="compile.boxbackup"/>
  <target name="compile.ids"/>
  <target name="compile.nat"/>

  <target name="compile.openvpn">
    <echo message="Precompiling JSP in ${tran.name}/${src.hier}/${suffix.mvvm.web}/${tran.name}"/>

    <java classname="org.apache.jasper.JspC"
          fork="true"
          failonerror="true">
      <arg line="-d ${build.gensrc}/${tran.name}"/>
      <arg line="-p com.metavize.tran.${tran.name}.servlet"/>
      <arg line="-webinc ${build.gensrc}/${tran.name}/web-fragment.xml"/>
      <arg line="-uriroot ${tran.name}/${src.hier}/${suffix.mvvm.web}/${tran.name}/"/>
      <classpath refid="tomcat.thirdparty.classpath"/>
    </java>

    <echo message="Adding JSP servlet mappings to web.xml"/>

    <loadfile property="generated-web.xml" srcFile="${build.gensrc}/${tran.name}/web-fragment.xml"/>
    <copy file="${tran.name}/${src.hier}/${suffix.mvvm.web}/${tran.name}/WEB-INF/web.xml"
          toFile="${dist.mvvm.web}/${tran.name}/WEB-INF/web.xml" overwrite="true">
      <filterset>
        <filter token="JSP_PRE_COMPILED_SERVLETS" value="${generated-web.xml}"/>
      </filterset>
    </copy>
  </target>

  <target name="compile.portal">
    <!-- browser -->
    <exec executable="${buildtool.base}/mkwap.sh" failonerror="true">
      <arg value="-c"/><arg value="portal/common"/>
      <arg value="../.."/>
      <arg value="com.metavize.tran.browser.jsp"/>
      <arg value="${tran.name}/webapps/browser"/>
      <arg value="${build.dist}"/>
      <arg value="${dist.mvvm.web}/browser"/>
    </exec>

    <!-- rdp -->
    <mkdir dir="${dist.mvvm.web}/rdp"/>

    <copy todir="${dist.mvvm.web}/rdp">
      <fileset dir="${tran.name}/webapps/rdp/root"/>
    </copy>

    <mkdir dir="${dist.mvvm.web}/rdp/WEB-INF/classes"/>

    <javac destdir="${dist.mvvm.web}/rdp/WEB-INF/classes"
           debug="on"
           optimize="false"
           deprecation="on"
           source="1.5"
           includeAntRuntime="false">

      <src path="${tran.name}/webapps/rdp/src"/>
      <src path="${tran.name}/main/com/metavize/tran/portal/rdp"/>

      <classpath refid="mvvm.classpath"/>
      <classpath refid="mvvm.thirdparty.classpath"/>
      <classpath refid="tomcat.thirdparty.classpath"/>
    </javac>

    <mkdir dir="${build.gensrc}/rdp/"/>

    <java classname="org.apache.jasper.JspC"
          fork="true"
          failonerror="true">
      <arg line="-s"/>
      <arg line="-l"/>
      <arg line="-v"/>
      <arg line="-compile"/>
      <arg line="-source 1.5"/>
      <arg line="-d ${dist.mvvm.web}/rdp/WEB-INF/classes"/>
      <arg line="-p com.metavize.tran.${tran.name}.rdp"/>
      <arg line="-webinc ${build.gensrc}/rdp/web-fragment.xml"/>
      <arg line="-uriroot ${dist.mvvm.web}/rdp"/>
      <arg value="rdp.jsp"/>
      <arg value="rdp.jnlp"/>
      <classpath path="${java.home}/../lib/tools.jar"/>
      <classpath refid="mvvm.classpath"/>
      <classpath refid="mvvm.thirdparty.classpath"/>
      <classpath refid="tomcat.thirdparty.classpath"/>
    </java>

    <echo message="Adding JSP servlet mappings to web.xml"/>

    <loadfile property="rdp-generated-web.xml"
              srcFile="${build.gensrc}/rdp/web-fragment.xml"/>
    <copy file="${tran.name}/webapps/rdp/root/WEB-INF/web.xml"
          toFile="${dist.mvvm.web}/rdp/WEB-INF/web.xml"
          overwrite="true">
      <filterset>
        <filter token="JSP_PRE_COMPILED_SERVLETS" value="${rdp-generated-web.xml}"/>
      </filterset>
    </copy>

    <!-- vnc -->
    <mkdir dir="${dist.mvvm.web}/vnc"/>

    <copy todir="${dist.mvvm.web}/vnc">
      <fileset dir="${tran.name}/webapps/vnc/root"/>
    </copy>

    <mkdir dir="${dist.mvvm.web}/vnc/WEB-INF/classes"/>

    <javac destdir="${dist.mvvm.web}/vnc/WEB-INF/classes"
           debug="on"
           optimize="false"
           deprecation="on"
           source="1.5"
           includeAntRuntime="false">

      <src path="${tran.name}/webapps/vnc/src"/>
      <src path="${tran.name}/main/com/metavize/tran/portal/vnc"/>

      <classpath refid="mvvm.classpath"/>
      <classpath refid="tightvnc-mv.classpath"/>
      <classpath refid="mvvm.thirdparty.classpath"/>
      <classpath refid="tomcat.thirdparty.classpath"/>
    </javac>

    <mkdir dir="${build.gensrc}/vnc/"/>

    <java classname="org.apache.jasper.JspC"
          fork="true"
          failonerror="true">
      <arg line="-s"/>
      <arg line="-l"/>
      <arg line="-v"/>
      <arg line="-compile"/>
      <arg line="-source 1.5"/>
      <arg line="-d ${dist.mvvm.web}/vnc/WEB-INF/classes"/>
      <arg line="-p com.metavize.tran.${tran.name}.vnc"/>
      <arg line="-webinc ${build.gensrc}/vnc/web-fragment.xml"/>
      <arg line="-uriroot ${dist.mvvm.web}/vnc"/>
      <arg value="vnc.jsp"/>
      <arg value="vnc.jnlp"/>
      <classpath path="${java.home}/../lib/tools.jar"/>
      <classpath refid="mvvm.classpath"/>
      <classpath refid="mvvm.thirdparty.classpath"/>
      <classpath refid="tomcat.thirdparty.classpath"/>
    </java>

    <echo message="Adding JSP servlet mappings to web.xml"/>

    <loadfile property="vnc-generated-web.xml"
              srcFile="${build.gensrc}/vnc/web-fragment.xml"/>
    <copy file="${tran.name}/webapps/vnc/root/WEB-INF/web.xml"
          toFile="${dist.mvvm.web}/vnc/WEB-INF/web.xml"
          overwrite="true">
      <filterset>
        <filter token="JSP_PRE_COMPILED_SERVLETS" value="${vnc-generated-web.xml}"/>
      </filterset>
    </copy>

    <!-- proxy -->
    <exec executable="${buildtool.base}/mkwap.sh" failonerror="true">
      <arg value="-c"/><arg value="portal/common"/>
      <arg value="../.."/>
      <arg value="com.metavize.tran.proxy.jsp"/>
      <arg value="${tran.name}/webapps/proxy"/>
      <arg value="${build.dist}"/>
      <arg value="${dist.mvvm.web}/proxy"/>
    </exec>

    <!-- portal -->
    <exec executable="${buildtool.base}/mkwap.sh" failonerror="true">
      <arg value="-c"/><arg value="portal/common"/>
      <arg value="../.."/>
      <arg value="com.metavize.tran.portal.jsp"/>
      <arg value="${tran.name}/webapps/portal"/>
      <arg value="${build.dist}"/>
      <arg value="${dist.mvvm.web}/portal"/>
    </exec>
  </target>

  <target name="compile.firewall"/>
  <target name="compile.spyware"/>
  <target name="compile.http"/>
  <target name="compile.ftp"/>
  <target name="compile.mail"/>
  <target name="compile.virus"/>
  <target name="compile.spam"/>
  <target name="compile.hauri"/>
  <target name="compile.kav"/>
  <target name="compile.clam"/>
  <target name="compile.spamassassin"/>
  <target name="compile.clamphish"/>
  <target name="compile.httpblocker"/>
  <target name="compile.puresight"/>
  <target name="compile.airgap"/>
  <target name="compile.reporting"/>
  <target name="compile.protofilter"/>
  <target name="compile.sigma"/>

  <!-- Javadoc target -->
  <target name="jdoc" depends="pkg.jar">
    <foreach target="invokeJDoc" param="jdoc.target.transform" inheritall="true"
             parallel="false" list="${casings}"/>
    <foreach target="invokeJDoc" param="jdoc.target.transform" inheritall="true"
             parallel="false" list="${bases}"/>
    <foreach target="invokeJDoc" param="jdoc.target.transform" inheritall="true"
             parallel="false" list="${transforms}"/>
  </target>

  <!-- Helper for performing the jdoc target for each transform -->
  <target name="invokeJDoc">
    <antcall target="func.jdoc">
      <param name="jdoc.src" value="${jdoc.target.transform}/${src.main}"/>
      <param name="jdoc.prjName" value="tran_${jdoc.target.transform}"/>
    </antcall>
  </target>

  <!-- For participating in the larger JavaDoc generation -->
  <target name="bigjdoc">
    <foreach target="copyForBigJDoc" param="jdoc.target.transform" inheritall="true"
             parallel="false" list="${casings}"/>
    <foreach target="copyForBigJDoc" param="jdoc.target.transform" inheritall="true"
             parallel="false" list="${bases}"/>
    <foreach target="copyForBigJDoc" param="jdoc.target.transform" inheritall="true"
             parallel="false" list="${transforms}"/>
  </target>

  <!--
      Helper for performing the bigjdoc target for each transform.
      Copies all source to ${jdoc.bigtree.src} for inclusion in the big
      JavaDoc generation
  -->
  <target name="copyForBigJDoc">
    <copydir src="${jdoc.target.transform}/${src.main}"
             dest="${jdoc.bigtree.src}"
             includes="**/*.java"
             excludes="**/Test.java"
             forceoverwrite="true"/>
  </target>


</project>
