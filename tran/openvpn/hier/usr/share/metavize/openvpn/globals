#!/bin/sh

SCRIPT_DIR=@MVVM_HOME@/openvpn
DATA_DIR=${SCRIPT_DIR}

CONF_DIR="@MVVM_CONF@/openvpn"
MISC_DIR="${CONF_DIR}/misc"

BASE_CONFIG_FILE="${MISC_DIR}/base_cfg"

PACKAGE_DIR=${CONF_DIR}/client-packages

## This is where all of the keys (client and server) are generated.
export PKI_DIR=${CONF_DIR}/pki
export INDEX_FILE=${PKI_DIR}/index.txt
export SERIAL_FILE=${PKI_DIR}/serial

## This is where all of the server parameters are placed.
OPENVPN_CONF_DIR=/etc/openvpn
OPENVPN_DATA_DIR=${OPENVPN_CONF_DIR}/data

## Client configuration directory
OPENVPN_CCD_DIR="${OPENVPN_CONF_DIR}/ccd"

## This is the client status file that java uses to check the certificate status for each client
CLIENT_STATUS_FILE="${MISC_DIR}/client_status.txt"

## There must be a configuration file 
if [ -r ${BASE_CONFIG_FILE} ]; then
    . ${BASE_CONFIG_FILE}
else
    echo "Unable to load the openvpn configuration file ${BASE_CONFIG_FILE}"
    ## Exit only if the base is not required.
    if [ -z "${baseNotRequired}" ]; then exit -2 ; fi
fi

OPENSSL="openssl"
RM_CMD="rm"

## Uncomment the following line for debugging the openssl and removal calls.
#OPENSSL="opensslDbg"
#RM_CMD="rmDbg"

## Default parameters and file locations for the certificates
OPENSSL_CFG_FILE="${DATA_DIR}/openssl.cnf"
CA_KEY="${PKI_DIR}/ca.key"
CA_CRT="${PKI_DIR}/ca.crt"

## Issuing ten year certs
CERT_DURATION=3650

## dnQualifier for the different certs
DN_QUALIFIER_SERVER="server"
DN_QUALIFIER_CLIENT="client"
DN_QUALIFIER_CA="certificateAuthority"

OPENVPN_SCRIPT="/etc/init.d/openvpn"

## Debugging functions
function opensslDbg()
{
    echo openssl $@
    openssl $@
}

function rmDbg()
{
    echo rm $@
    rm $@
}


function validateUsbKey()
{
############################# XXXXXXXXXXXXXXXXXXXXXXXXXX
    true
}

function saveToUsbKey()
{
############################# XXXXXXXXXXXXXXXXXXXXXXXXXX
    true
}

function removeSpaces() {
    ## don't know why but this works, and just 'echo ${*// /_}' doesn't.
    local val="$*"
    echo ${val// /_}
}

function getSerialNumber() {
    local crt=${1}

    grep "Serial Number" ${crt} | sed 's/.*(0x\([^(]*\)).*/\1/g'
}

function isRevoked()
{
    local commonName="${1}"
    local clientCrt=`getClientCrtFile ${commonName}`
    
    ## If the cert is there, it hasn't been revoked, (it is renamed after being revoked)
    if [ -f ${clientCrt} ]; then
        return
    fi
    
    ## If there are any cert-revoked files, then the cert has been revoked.
        
    local search=`grep '^R' ${INDEX_FILE} | grep "CN=${commonName}"`

    if [ -n "${search}" ]; then echo "true" ; fi
}

function getClientCrtFile()
{
    echo "${PKI_DIR}/client-${1}.crt"
}

function getClientKeyFile()
{
    echo "${PKI_DIR}/client-${1}.key"
}

## XXXX This function isn't used anymore
function getClientRevokedCrtFile()
{
    local commonName="${1}"
    local clientCrt=`getClientCrtFile ${commonName}`
    local serialNumber=`getSerialNumber ${clientCrt}`
    echo "${PKI_DIR}/client-revoked-${commonName}-${serialNumber}.crt"
}

## Write a new client status file which java uses to check the status of each client
function updateClientStatus()
{
    ## Delete any line that has a dnQualifier for the server
    sed -e "/dnQualifier=${DN_QUALIFIER_SERVER}/d" \
        -e 's/^\(R\|V\).*\/CN=\([^/]*\).*/\1 \2/' ${INDEX_FILE} | \
        uniq > ${CLIENT_STATUS_FILE}
}

function getCommonNames()
{
    sed -e "/dnQualifier=${DN_QUALIFIER_SERVER}/d" \
        -e 's|.*\/CN=\([^/]*\).*|\1|' ${INDEX_FILE} | \
        uniq
}
