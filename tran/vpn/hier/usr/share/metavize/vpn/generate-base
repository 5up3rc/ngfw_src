#!/bin/sh

## XXXX Need an absolute path
GLOBALS="globals"

## There must be a configuration file 
if [ -r ${GLOBALS} ]; then
    . ${GLOBALS}
else
    echo "Unable to load the openvpn configuration file ${BASE_CONFIG_FILE}"
    exit -2
fi

BASE_SERIAL=`printf '%04X%04X' ${RANDOM} ${RANDOM}`

SERVER_KEY="${KEY_GEN_DIR}/server.key"
SERVER_CRT="${KEY_GEN_DIR}/server.crt"

function diffieHellman()
{
    ## This might have to be fixed, just because it may take a long time.
    true
}

function generateCA()
{
    export COMMON_NAME=${CA_NAME}

    ${OPENSSL} req -days ${CERT_DURATION} -nodes -new -x509 -keyout ${CA_KEY} -out ${CA_CRT} \
        -config ${OPENSSL_CFG_FILE} -batch
    
    ## Make the ca key readable only by root
    chmod 0600 ${CA_KEY}
}

function generateServerKey()
{
    local serverCsr=`mktemp`

    export COMMON_NAME=${SERVER_NAME}
    
    ## Generate the server private key and the certificate signing request
    ${OPENSSL} req -days ${CERT_DURATION} -nodes -new -keyout ${SERVER_KEY} -out ${serverCsr} \
        -extensions server -config ${OPENSSL_CFG_FILE} -batch

    ## Sign the cretificate signing request
    ${OPENSSL} ca -days ${CERT_DURATION} -out ${SERVER_CRT} -in ${serverCsr} -extensions server \
        -config ${OPENSSL_CFG_FILE} -batch

    ## Remove the CSR
    rm -f ${serverCsr}

    ## Make the server key readable only by root
    chmod 0600 ${SERVER_KEY}
}

function cleanBase()
{
    rm -rf ${KEY_GEN_DIR}
    rm -rf ${KEY_DIR}    
}

function makeBase()
{
    mkdir -p ${KEY_GEN_DIR}        
    mkdir -p ${KEY_DIR}

    touch ${INDEX_FILE}
    echo ${BASE_SERIAL} > ${SERIAL_FILE}
    cp ${SERIAL_FILE} ${SERIAL_FILE}.base
}

if [ "${USE_USB_KEY}x" = "truex" ]; then
    validateUsbKey
fi

## Clean out the key directories and create new keys.
cleanBase
makeBase

## Generate the diffie hellman parameters.
diffieHellman

## Create the CA
generateCA

## Create the server key.
generateServerKey

if [ "${USE_USB_KEY}x" = "truex" ]; then
    saveToUsbKey
fi

