#!/bin/dash

exec 2> /dev/null

DNS_MASQ_CONF="/etc/dnsmasq.conf"

PROPERTY_NET_CONF="com.untangle.networking.net-conf"
PROPERTY_BRIDGE_CONF="com.untangle.networking.bridge-conf"
PROPERTY_DNS_1="com.untangle.networking.dns-1"
PROPERTY_DNS_2="com.untangle.networking.dns-2"
PROPERTY_DEFAULT_GW="com.untangle.networking.default-gateway"
PROPERTY_DDNS_EN="com.untangle.networking.ddns-en"
PROPERTY_HOSTNAME="com.untangle.networking.hostname"
PROPERTY_DHCP_EN="com.untangle.networking.dhcp-enabled"
PROPERTY_DHCP_START="com.untangle.networking.dhcp-start"
PROPERTY_DHCP_END="com.untangle.networking.dhcp-end"
PROPERTY_DHCP_DEFAULT_GW="com.untangle.networking.dhcp-default-gateway"
PROPERTY_DNS_EN="com.untangle.networking.dns-enabled"
PROPERTY_DNS_LOCAL_DOMAIN="com.untangle.networking.dns-local-domain"
PROPERTY_DHCP_DNS_SERVERS="com.untangle.networking.dhcp-dns-servers"


## This returns a string of the form:
## [:::<interface-name>[;<ip-address>/<netmask-cidr>]*]*
network_configuration()
{                   
 ip addr show | awk '/^[0-9]/ { interface = $2 ; sub( ":$", "", interface ) ; printf ":::%s", interface } ; /^ *inet.*brd.*scope global/ { printf ";%s", $2 } ; /^ *inet.*peer.*scope global/ { printf ";%s/32", $2 } ;  END { printf "\n" }'
}

## This returns a string of the form:
## [:::<bridge-name>[;<bridge-interface]*]*
bridge_configuration()
{
    find /sys/class/net/ -path '*/brif/*' \
        | sort \
        | awk '{ split( $0, path, "/" ) ; if ( path[5] != bridge ) { bridge = path[5] ; printf ":::%s", bridge } ; printf ";%s", path[7] } END { printf "\n" }'
}

get_default_gateway()
{
    ip route show | awk '/default/ { print $3 }'
}

## Here goes nothing, several calls to awk to accomplish what could be done in one.
get_dns_1()
{
    if [ -f ${DNS_MASQ_CONF} ] ; then
        awk 'BEGIN { server = "yes" } /server/ { gsub( "server=", "" ) ; if ( server == "yes" ) { print ; server = "no" }}' ${DNS_MASQ_CONF}
    fi
}

get_dns_2()
{
    if [ -f ${DNS_MASQ_CONF} ] ; then
        awk 'BEGIN { server = "no" } /server/ { gsub( "server=", "" ) ; if ( server == "no" ) { server = "yes" } else if ( server == "yes" ) { print ; server = "done" }}' ${DNS_MASQ_CONF}
    fi
}

get_dhcp_enabled()
{
    if [ -f ${DNS_MASQ_CONF} ] ; then
        grep -q "dhcp-range" ${DNS_MASQ_CONF} && echo "true"
    fi
}

get_dhcp_start()
{
    if [ -f ${DNS_MASQ_CONF} ] ; then
        awk '/^dhcp-range=/ { sub( "dhcp-range=", "" ) ; split( $0, v, "," )  ; print v[1] } ' ${DNS_MASQ_CONF}
    fi
}

get_dhcp_end()
{
    if [ -f ${DNS_MASQ_CONF} ] ; then
        awk '/^dhcp-range=/ { sub( "dhcp-range=", "" ) ; split( $0, v, "," )  ; print v[2] } ' ${DNS_MASQ_CONF}
    fi
}

## This is the gateway the dhcp server would recommend in its leases.
get_dhcp_default_gateway()
{
    if [ -f ${DNS_MASQ_CONF} ] ; then
        awk '/^dhcp-option=3,/ { sub( "dhcp-option=3,", "" ) ; print } ' ${DNS_MASQ_CONF}
    fi
}

## This is the gateway the DNS Servers the DHCP server will recommend in its leases.
get_dhcp_dns_servers()
{
    if [ -f ${DNS_MASQ_CONF} ]; then
        awk '/^dhcp-option=6,/ { sub( "dhcp-option=6,", "" ) ; print } ' ${DNS_MASQ_CONF}
    fi
}

get_dns_enabled()
{
    if [ -f ${DNS_MASQ_CONF} ]; then
        grep -q '# DNS Server disabled, not saving hosts.' ${DNS_MASQ_CONF} || echo "true"
    fi
}

get_dns_local_domain()
{
    if [ -f ${DNS_MASQ_CONF} ]; then
        awk '/^domain-suffix=/ { sub( "domain-suffix=", "" ) ; print } ' ${DNS_MASQ_CONF}
    fi
}

get_is_ddns_running()
{
    # Either of these processes are running means dynamic dns is running.
    pgrep '(ddclient|no-ip)' > /dev/null 2>&1 && echo "true"
}

echo "${PROPERTY_NET_CONF}=`network_configuration`"
echo "${PROPERTY_BRIDGE_CONF}=`bridge_configuration`"
echo "${PROPERTY_DNS_1}=`get_dns_1`"
echo "${PROPERTY_DNS_2}=`get_dns_2`"
echo "${PROPERTY_DEFAULT_GW}=`get_default_gateway`"
echo "${PROPERTY_HOSTNAME}=`hostname`"
echo "${PROPERTY_DHCP_EN}=`get_dhcp_enabled`"
echo "${PROPERTY_DHCP_START}=`get_dhcp_start`"
echo "${PROPERTY_DHCP_END}=`get_dhcp_end`"
echo "${PROPERTY_DHCP_DEFAULT_GW}=`get_dhcp_default_gateway`"
echo "${PROPERTY_DHCP_DNS_SERVERS}=`get_dhcp_dns_servers`"
echo "${PROPERTY_DNS_EN}=`get_dns_enabled`"
echo "${PROPERTY_DNS_LOCAL_DOMAIN}=`get_dns_local_domain`"
echo "${PROPERTY_DDNS_EN}=`get_is_ddns_running`"


exit 0

