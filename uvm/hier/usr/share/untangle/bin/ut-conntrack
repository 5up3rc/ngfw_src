#!/usr/bin/python

import sys
import string

def parse_segment(segment):
    if segment == None:
        return None
    segments = segment.split("=")
    if len(segments) != 2:
        return None
    return segments[1]

def parse_line(line):
    dict = {}
    try:
        line_parts = line.split()

        # Protocol name.
        # Protocol number. (6 = TCP. 17 = UDP.)
        # Seconds until this entry expires.
        # TCP only: TCP connection state.
        # Source address of original
        # Destination address of original-side packets.
        # Source port of original-side packets.
        # Destination port of original-side packets.
        # [UNREPLIED], if this connection has not seen traffic in both directions. Otherwise not present.
        # Source address of reply-side packets (packets from the side that received the connection).
        # Destination address of reply-side packets.
        # Source port of reply-side packets.
        # Destination port of reply-side packets.
        # [ASSURED], if this connection has seen traffic in both directions (for UDP) or an ACK in an ESTABLISHED connection (for TCP). Otherwise not present.
        # Use count of this connection structure.
        idx = 0
        dict['protocol']       = string.upper(line_parts[idx]); idx=idx+1;
        if dict['protocol'] == "UNKNOWN":
            return None

        dict['protocol_id']    = int(line_parts[idx]); idx=idx+1;
        dict['expiration_sec'] = int(line_parts[idx]); idx=idx+1;
        # skip tcp connection state
        if dict['protocol'] == "TCP": idx=idx+1
        dict['orig_src']       = parse_segment(line_parts[idx]); idx=idx+1;
        dict['orig_dst']       = parse_segment(line_parts[idx]); idx=idx+1;
        dict['orig_src_port']  = int(parse_segment(line_parts[idx])); idx=idx+1;
        dict['orig_dst_port']  = int(parse_segment(line_parts[idx])); idx=idx+1;
        dict['orig_packets']   = int(parse_segment(line_parts[idx])); idx=idx+1;
        dict['orig_bytes']     = int(parse_segment(line_parts[idx])); idx=idx+1;
        # skip UNREPLIED
        if line_parts[idx] == "[UNREPLIED]": idx=idx+1
        dict['reply_src']      = parse_segment(line_parts[idx]); idx=idx+1;
        dict['reply_dst']      = parse_segment(line_parts[idx]); idx=idx+1;
        dict['reply_src_port'] = int(parse_segment(line_parts[idx])); idx=idx+1;
        dict['reply_dst_port'] = int(parse_segment(line_parts[idx])); idx=idx+1;
        dict['reply_packets']  = int(parse_segment(line_parts[idx])); idx=idx+1;
        dict['reply_bytes']    = int(parse_segment(line_parts[idx])); idx=idx+1;
        # skip ASSURED
        if line_parts[idx] == "[ASSURED]": idx=idx+1
        dict['mark']           = int(parse_segment(line_parts[idx])); idx=idx+1;
        dict['use_count']      = int(parse_segment(line_parts[idx])); idx=idx+1;
        
        dict['bypassed']      = ((dict['mark'] & 0x01000000) >> 24) != 0
        dict['qos_priority']  = ((dict['mark'] & 0x00700000) >> 20)
        dict['local_traffic'] = ((dict['mark'] & 0x00010000) >> 16) != 0
        
        return dict
    except Exception,e:
        #print "Exception:"
        #print e
        return None


print "{ javaClass: java.util.LinkedList, list : ["

ip_conntrack_file = open("/proc/net/ip_conntrack")

first=True
for line in ip_conntrack_file.readlines():
    # ignore all 127.0.0.1 traffic
    if "127.0.0.1" in line:
        continue

    dict = parse_line(line)

    if dict == None:
        continue;

    # ignore first line
    if first:
        first=False
    else:
        print ","

    print "{ protocol:\"%s\", preNatClient:\"%s\", preNatServer:\"%s\", preNatClientPort:\"%s\", preNatServerPort:\"%s\", packets:\"%s\", bytes:\"%s\", postNatClient:\"%s\", postNatServer:\"%s\", postNatClientPort:\"%s\", postNatServerPort:\"%s\", qosPriority:\"%x\", bypassed:\"%s\", localTraffic:\"%s\", javaClass:\"com.untangle.uvm.SessionMonitorEntry\" }" % (
        dict['protocol'],
        dict['orig_src'],
        dict['orig_dst'],
        dict['orig_src_port'],
        dict['orig_dst_port'],
        dict['orig_packets'],
        dict['orig_bytes'],
        dict['reply_src'],
        dict['reply_dst'],
        dict['reply_src_port'],
        dict['reply_dst_port'],
        dict['qos_priority'],
        dict['bypassed'],
        dict['local_traffic'])

print "] }"
