#! /bin/bash

#
# This script "activates" an untangle installation
# By activating it prepares it with the correct sources.list and registers the installation with the untangle update server
#

. @PREFIX@/etc/default/untangle-vm

NAME="$0"
REG_UID="$1"
UID_TEMPLATE=XXX_REG_UID_XXX
DEFAULT_UNTANGLE_SOURCE="deb http://${UID_TEMPLATE}:untangle@updates.untangle.com/public/${REPOSITORY} stable main premium upstream\ndeb http://${UID_TEMPLATE}:untangle@updates.untangle.com/public/${REPOSITORY} navistar main premium upstream"
#UID_VERIFICATION="@PREFIX@/usr/bin/utverifykey"

if [ -n "$REG_UID" ] ; then 
  echo $REG_UID > $UID_FILE

  # if [[ $REG_UID != 0000-0000-0000-0000 ]] ; then
  #   $UID_VERIFICATION $REG_UID 2> /dev/null
  #   VERIFY_RES="$?"
  #   if [ "$VERIFY_RES" -eq 1 ]; then
  #     echo "UID is invalid: $REG_UID"
  #     rm -f $UID_FILE
  #     exit 1
  #   elif [ "$VERIFY_RES" -ne 0 ]; then
  #     echo "Error validating registration.  Unable to continue."
  #     rm -f $UID_FILE
  #     exit 2
  #   fi
  # fi

  # If we get here, the key is good.
  echo "UID is valid"
fi

if [ ! -f $UID_FILE -o ! -f $UID_FILE ]; then
    # we need a UID
    echo "`date` $NAME: about to create UID" >> $UVM_WRAPPER_LOG
    output=`ruby @UVM_HOME@/bin/ut-createUID.rb 2>&1`
    if [ $? = 0 ] ; then
	echo "`date` $NAME: created UID" >> $UVM_WRAPPER_LOG
    else
	echo "`date` $NAME: failed to create UID; output was: '$output'"
	exit 1
    fi
fi

MYUID=`cat $UID_FILE`

# add untangle sources to sources.list; remove the old ones
echo "Installing sources list"
touch $SOURCES_LIST
perl -i -pe 's/.*untangle\.com.*//' $SOURCES_LIST
echo -e $DEFAULT_UNTANGLE_SOURCE | sed "s/$UID_TEMPLATE/$MYUID/" >> $SOURCES_LIST
nohup apt-get update >& /dev/null &

@UVM_HOME@/bin/ut-register

exit 0
