#!/usr/bin/ruby

require 'fileutils'
require 'getoptlong'
require 'tempfile'

ENV['DEBIAN_FRONTEND'] = 'noninteractive'

INST_OPTS = " -o DPkg::Options::=--force-confnew --yes --force-yes --fix-broken --purge "
UPGD_OPTS = " -o DPkg::Options::=--force-confnew --yes --force-yes --fix-broken --purge "
UPDT_OPTS = " --yes --force-yes --purge "
REMO_OPTS = " --yes --force-yes --fix-broken --purge "

PREFIX = "@PREFIX@"

STDERR.reopen('@UVM_LOG@/apt.log', 'a')

def printusage()
  puts <<STR
usage:
  mkg installed
  mkg available
  mkg install <mackage>
  mkg update
  mkg upgrade
  mkg remove
STR
end

def log(str)
  STDERR.puts(str)
  STDERR.flush
end

class DevMkg
  def initialize(stamp)
    @pkg_list_dir = "#{PREFIX}/tmp"
    @stamp = stamp
  end

  def installed()
    each_pkg_list_line { |l| puts "#{l.split[1]} 10.0" if /^Package: / =~ l }
    0
  end

  def available()
    each_pkg_list_line do |l|
      puts l.gsub(/^XB-/, '')
      puts "Version: 10.0" if /^Package: / =~ l
    end
    0
  end

  def install(name)
    log "start $stamp"
    log "END PACKAGE LIST"
    log "done $stamp"
    0
  end

  def update()
    0
  end

  def upgrade()
    log "start $stamp"
    log "END PACKAGE LIST" >>$APT_LOG
    log "done $stamp"
    0
  end

  def remove(pkg)
    0
  end

  private

  def each_pkg_list_line()
    Dir.new(@pkg_list_dir).select { |d| /^pkg-list/ =~ d }.each do |p|
      File.open("#{@pkg_list_dir}/#{p}", 'r') do |io|
        io.each_line { |l| yield l }
      end
    end
  end
end

class RealMkg
  def initialize(stamp)
    @stamp = stamp
  end

  def installed()
    IO.popen("dpkg --get-selections 'untangle*'", 'r') do |input|
      IO.popen("xargs dpkg-query -W", 'w') do |output|
        input.each_line do |l|
          s = l.split
          output.puts(s[0]) if 'install' == s[1]
        end
      end
    end
    0
  end

  def available()
    IO.popen("apt-cache search '^untangle-'") do |input|
      IO.popen("xargs apt-cache show --no-all-versions", 'w') do |output|
        input.each_line do |l|
          output.puts(l.split[0])
        end
      end
    end
    0
  end

  def install(pkg)
    log "start #{@stamp}"
    log "downloading: \"#{pkg}\""
    pkg_list = get_pkg_list("apt-get install #{INST_OPTS} --print-uris #{pkg}")
    download(pkg, pkg_list)
    log "installing: \"#{pkg}\""

    IO.popen("apt-get install #{INST_OPTS} #{pkg}", 'r') do |input|
      input.each_line { |l| log l }
    end
    r = $?

    log "done #{@stamp}"

    r
  end

  def update()
    log "start #{@stamp}"
    log "apt-get update #{UPDT_OPTS}"
    IO.popen("apt-get update #{UPDT_OPTS}") do |io|
      io.each_line { |l| log l }
    end

    r = $?

    log "done #{@stamp}"

    0
  end

  def upgrade()
    log "start #{@stamp}"
    log "apt-get upgrade #{UPGD_OPTS}"

    pkg_list = get_pkg_list("apt-get dist-upgrade #{UPGD_OPTS} --print-uris")
    download(pkg_list)
    r = cmd_to_stderr("apt-get dist-upgrade #{UPGD_OPTS}")

    log "done #{@stamp}"

    0
  end

  def remove(pkg)
    log "start #{@stamp}"
    log "apt-get remove #{REMO_OPTS} \"$2\""
    r = cmd_to_stderr("apt-get remove #{REMO_OPTS}")
    cmd_to_stderr("apt-get clean")
    log "done #{@stamp}"

    0
  end

  private

  def cmd_to_stderr(cmd)
    IO.popen(cmd) do |io|
      io.each_line { |l| log l }
    end
    $?
  end

  def get_tempdir()
    tmp = Tempfile.new('mkg')
    path = tmp.path
    tmp.delete
    Dir.mkdir(path)
    path
  end

  def get_pkg_list(apt_cmd)
    pkg_list = []

    IO.popen(apt_cmd, 'r') do |io|
      io.each_line do |l|
        if /^'(http:\/\/.*)' / =~ l
          pkg_list << $1
        end
      end
    end

    pkg_list
  end

  def download(pkg, pkg_list)
    pkg_list.each { |p| log p }
    log "END PACKAGE LIST"

    tmp = get_tempdir()
    begin
      pkg_list.each do |p|
        log "downloading: #{p}"

        if cmd_to_stderr("wget --progress=dot -P #{tmp} #{p} 2>&1")
          Dir.new(tmp).select { |f| /\.deb$/ =~ f }.each do |f|
            FileUtils.mv("#{tmp}/#{f}", "/var/cache/apt/archives")
          end
          log "DOWNLOAD SUCCEEDED: #{p}"
        else
          log "DOWNLOAD FAILED: #{p}"
        end

      end
    ensure
      FileUtils.rm_rf(tmp)
    end
  end

end

stamp = nil

opts = GetoptLong.new([ '-k', GetoptLong::REQUIRED_ARGUMENT ])
opts.each do |opt, arg|
  if '-k' == opt
    stamp = arg
  end
end

if ARGV.length < 1
  printusage()
  exit(1)
end

ret = 0

mkg = PREFIX.empty? ? RealMkg.new(stamp) : DevMkg.new(stamp)

exit case ARGV.shift
     when 'installed'
       mkg.installed()
     when 'available'
       mkg.available()
     when 'install'
       if ARGV.empty?
         printusage()
       else
         mkg.install(ARGV.shift)
       end
     when 'update'
       mkg.update()
     when 'upgrade'
       mkg.upgrade()
     when 'remove'
       if ARGV.empty?
         printusage()
       else
         mkg.remove(ARGV.shift)
       end
     end
