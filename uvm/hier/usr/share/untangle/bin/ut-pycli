#!/usr/bin/env python 

import sys
from StringIO import StringIO
sys.path.append('@PREFIX@/usr/local/lib/python/')
import pycurl
import urllib
import getopt
from jsonrpc import ServiceProxy
from jsonrpc import JSONRPCException


def info(object, spacing=10, collapse=1):
    """Print methods and doc strings.
    
    Takes module, class, list, dictionary, or string."""
    methodList = [method for method in dir(object) if callable(getattr(object, method))]
    processFunc = collapse and (lambda s: " ".join(s.split())) or (lambda s: s)
    print "\n".join(["%s %s" %
                      (method.ljust(spacing),
                       processFunc(str(getattr(object, method).__doc__)))
                     for method in methodList])

# Always use pycurl.
# 1. cookies are supported on python 2.3 (not supported cleanly in
# urllib2)
# 2. persistent sessions are supported in all version of python.  Up
# to 2.4 this hasn't made it in yet.  There is keepalive from
# urlgrabber, it doesn't support cookies which are required in order
# for java callable references to work.
class CurlRequestHandler(object):
    def __init__( self, timeout=30 ):
        self.__curl = pycurl.Curl()
        self.__curl.setopt( pycurl.POST, 1 )
        self.__curl.setopt( pycurl.NOSIGNAL, 1 )
        self.__curl.setopt( pycurl.CONNECTTIMEOUT, 30 )
        self.__curl.setopt( pycurl.TIMEOUT, timeout )
        self.__curl.setopt( pycurl.COOKIEFILE, "" )
        self.__curl.setopt( pycurl.FOLLOWLOCATION, 0 )

    def make_request(self, url, postdata, content_type = None ):
        response = StringIO()

        self.__curl.setopt( pycurl.URL, url )
        self.__curl.setopt( pycurl.POST, 1 )
        if content_type != None:
            self.__curl.setopt( pycurl.HTTPHEADER, [ "Content-Type: %s" % content_type ] )
        self.__curl.setopt( pycurl.VERBOSE, False )
        self.__curl.setopt( pycurl.POSTFIELDS, postdata.encode( "utf-8" ))
        self.__curl.setopt( pycurl.WRITEFUNCTION, response.write )
        self.__curl.perform()

        if ( self.__curl.getinfo( pycurl.HTTP_CODE ) != 200 ): raise JSONRPCException("Invalid username or password")

        return response.getvalue()

def make_proxy( timeout=30 ):
    handler = CurlRequestHandler( timeout )

    #     try:
    #         if ( parser.username != None and parser.password != None ):
    #             handler.make_request( "http://127.0.0.1/auth/login", urllib.urlencode({ "username" : parser.username, "password" : parser.password }))
    #     except JSONRPCException:
    #         pass
    proxy = ServiceProxy( "http://127.0.0.1/webui/JSON-RPC", None, handler )

    return proxy


rpcProxy = make_proxy( )
remoteContext = rpcProxy.RemoteUvmContext
uvm = remoteContext

try:
    print "Version: %s" % remoteContext.version()
except JSONRPCException:
    print "ERROR: Failed to communicate with the untangle-vm. Is it running? Are you root?"
    sys.exit(1)

# exec the first argument
exec(open(sys.argv[1]).read())


