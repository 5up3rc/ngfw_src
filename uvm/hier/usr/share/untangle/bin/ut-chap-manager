#!/usr/bin/python

# USAGE: ut-chap-manager [ PPPOE | L2TP ] [filename]
#        both arguments are required
#
# This utility is used by the PPPoE and IPsec L2TP stuff to manage the list
# of usernames and passwords stored in /etc/ppp/chap-secrets
#
# The format of the chap-secrets file is:
# client    server  secret  address
#
# For PPPoE the server field should always be * and for L2TP the server
# field should always be untangle-l2tp so we use these tags to determine
# which enties belong to who.... or is it whom?  Whatever you get the idea.
#
# Our approach here is to read the existing contents of the file.  We
# will then create a new file and first write all of the existing entries
# for packages not being touched.  Then we'll append the new entries from the
# temp file created by the package doing the update.  Seems easier than
# passing and parsing a big string of entries on the command line.
#

import datetime
import sys
import os

# -----------------------------------------------------------------------------
# loads a chap-secrets file into a two dimensional array

def load_chap_file(filename):
    file = open(filename, "r")
    chaplist = []
    ll = 0
    for line in file:
        if line.strip().startswith("#"):
            continue
        chaplist.append([])
        ww = 0
        for word in line.split():
            chaplist[ll].append(word)
        ww+=1
        ll+=1
    file.close()
    return(chaplist)

# -----------------------------------------------------------------------------
# script exection starts right here baby... right here!

chapfile = "/etc/ppp/chap-secrets"

# make sure we have two arguments
if (len(sys.argv) < 3):
    print("\n  USAGE: ut-chap-manager [ PPPOE | L2TP ] [filename]")
    print("         both arguments are required\n")
    sys.exit(1)

# analyze the first argument to determine who is calling us
callmode = "EMPTY"
if (sys.argv[1].upper() == "PPPOE"):
    callmode = "PPPOE"
if (sys.argv[1].upper() == "L2TP"):
    callmode = "L2TP"
if (callmode == "EMPTY"):
    print("\n  First argument is invalid.  Run with no arguments for usage\n")
    sys.exit(1)

# make sure we can read the file to be added
if (os.access(sys.argv[2], os.R_OK) != True):
    print("\n  Unable to read argumented filename\n")
    sys.exit(1)

# load all of the existing secrets or set an empty array if file not found
if (os.access(chapfile, os.R_OK) == True):
    chaplist = load_chap_file(chapfile)
else:
    chaplist = []

# load all of the new secrets and remove the temporary file
templist = load_chap_file(sys.argv[2])
os.unlink(sys.argv[2])

# write the standard disclaimer and other comments
file = open(chapfile, "w")
file.write("## Secrets for PPP authentication using CHAP\n")
file.write("## Auto Generated on %s\n" % datetime.datetime.now())
file.write("## This file is managed by the ut-chap-manager script\n")
file.write("## DO NOT EDIT - Changes will be overwritten\n")
file.write("## client\t\tserver\t\tsecret\t\tIP addresses\n")
file.write("##\n")

# write all of the existing secrets that we aren't messing with
for entry in chaplist:
    if (callmode == "PPPOE"):
        if (entry[1] != "*"):
            continue
    if (callmode == "L2TP"):
        if (entry[1] != "untangle-l2tp"):
            continue
    file.write("%s\t\t%s\t\t%s\t\t%s\n" % (entry[0], entry[1], entry[2], entry[3]))

# write all of the new secrets
for entry in templist:
    file.write("%s\t\t%s\t\t%s\t\t%s\n" % (entry[0], entry[1], entry[2], entry[3]))

# close the file and lock it down
file.close()
os.chmod(chapfile, 0600)

# over and out
sys.exit(0)

