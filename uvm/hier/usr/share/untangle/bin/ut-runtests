#!/usr/bin/python -u
import sys
import getopt
import signal
import os
import time
import traceback
sys.path.insert(0, '@PREFIX@/usr/lib/python%d.%d/' % sys.version_info[:2])

for f in os.listdir('@PREFIX@/usr/lib/python2.7/tests'):
    if f.endswith('py'):
        (m, e) = os.path.splitext(f)
        __import__('tests.%s' % m)

import unittest2
import uvm
import tests
from   tests import *


class ArgumentParser(object):
    def __init__(self):
        self.clientIP = None
        self.hostUsername = None
        self.hostKeyFile = None
        self.verbosity = 2 # changed to default 2 because jcoffin
        self.logfile = '/tmp/unittest.log'
        self.fastfail = False
        self.repeat = False
        self.externalIntfId = 1
        self.internalIntfId = 2
        self.suitesToRun = ['all']
        self.suitesToExclude = []
        self.testsToRun = ['all']
        self.testsToExclude = []
        self.timedTests = False
        self.quickTestsOnly = False

    def set_clientIP( self, arg ):
        self.clientIP = arg

    def set_username( self, arg ):
        self.username = arg

    def set_keyfile( self, arg ):
        self.password = arg

    def set_logfile( self, arg ):
        self.logfile = arg

    def set_fastfail( self, arg ):
        self.fastfail = True

    def set_repeat( self, arg ):
        self.repeat = True

    def set_suitesToRun( self, arg ):
        self.suitesToRun = arg.split(",")

    def set_suitesToExclude( self, arg ):
        self.suitesToExclude = arg.split(",")

    def set_testsToRun( self, arg ):
        self.testsToRun = arg.split(",")

    def set_testsToExclude( self, arg ):
        self.testsToExclude = arg.split(",")

    def increase_verbosity( self, arg ):
        self.verbosity += 1

    def set_externalIntfId( self, arg ):
        self.externalIntfId = arg

    def set_internalIntfId( self, arg ):
        self.internalIntfId = arg

    def set_timedTests( self, arg ):
        self.timedTests = True

    def set_quickTestsOnly( self, arg ):
        self.quickTestsOnly = True

    def parse_args( self ):
        handlers = {
            '-h' : self.set_clientIP,
            '-u' : self.set_username,
            '-i' : self.set_keyfile,
            '-l' : self.set_logfile,
            '-v' : self.increase_verbosity,
            '-q' : self.set_fastfail,
            '-r' : self.set_repeat,
            '-t' : self.set_suitesToRun,
            '-T' : self.set_testsToRun,
            '-e' : self.set_suitesToExclude,
            '-E' : self.set_testsToExclude,
            '-d' : self.set_externalIntfId,
            '-s' : self.set_internalIntfId,
            '-x' : self.set_timedTests,
            '-z' : self.set_quickTestsOnly,
        }

        try:
            (optlist, args) = getopt.getopt(sys.argv[1:], 'h:u:i:l:d:s:t:T:e:E:vqrxz')
            for opt in optlist:
                handlers[opt[0]](opt[1])
            return args
        except getopt.GetoptError, exc:
            print exc
            printUsage()
            exit(1)

def printUsage():
    sys.stderr.write( """\
%s Usage:
  optional args:
    -h <host>  : client host IP (behind Untangle)
    -u <user>  : client host SSH login
    -i <file>  : client host SSH identity (key) file
    -l <file>  : log file
    -d <int>   : interface ID of the external interface (outside) default: 1
    -s <int>   : interface ID of the internal interface (client) default: 2
    -t <suite> : comma seperated list test suites to run (default: "all") (exm: "webfilter,adblocker")
    -T <test>  : comma seperated list tests within suites to run (default: "all") (exm: "test_010_clientOnline")
    -e <suite> : comma seperated list test suites to EXCLUDE (default: "all") (exm: "webfilter,adblocker")
    -E <test>  : comma seperated list tests within suites to EXCLUDE (default: "all") (exm: "test_010_clientOnline")
    -v         : verbose (can be specified more than one time)
    -q         : quit on first failure
    -r         : repeat test indefinitely (or until failure if -q is specified)
    -x         : time testsuite and display elapsed seconds
    -z         : skip lengthly test suites
""" % sys.argv[0] )

def signal_handler(signal, frame):
        sys.exit(0)

def exit(code):
    global parser
    if (code != 0):
        print ""
        print "More details found in %s" % parser.logfile
    sys.exit(code)

def runTestSuite(suite):
    global parser
    global logfile
    print "== Testing %s ==" % suite.nodeName()
    tests = unittest2.TestLoader().loadTestsFromTestCase(suite)
    rc = 0
    skipc = 0  # number of skipped tests.
    total = 0
    timeString = ""
    if (parser.timedTests):
        suiteStartTime = time.time()
    for test in tests:
        test_name = test._testMethodName

        if not ( test_name in parser.testsToRun or "all" in parser.testsToRun ):
            continue
        if test_name in parser.testsToExclude:
            continue

        total += 1

        orig_stdout = sys.stdout
        orig_stderr = sys.stderr
        sys.stdout = logfile
        sys.stderr = logfile

        if (parser.timedTests):
            testStartTime = time.time()

        results = unittest2.TextTestRunner( stream=logfile, verbosity=parser.verbosity ).run( test )

        if (parser.timedTests):
            testElapsedTime = time.time() - testStartTime
            timeString = "in %d secs" % testElapsedTime

        sys.stdout = orig_stdout
        sys.stderr = orig_stderr

        if (len(results.failures) > 0 or len(results.errors) > 0):
            print "Test FAILED  : %s " % test_name
            if (parser.fastfail):
                exit(1)
            else:
                rc += 1
        elif (len(results.skipped) > 0):
            print "Test skipped  : %s " % test_name
            skipc += 1
        else:
            print "Test success : %s %s " % (test_name, timeString)

    if "finalTearDown" in dir(suite):
        try:
            suite.finalTearDown(suite)
        except Exception, e:
            print "finalTearDown EXCEPTION: "
            traceback.print_exc( e )

    if (parser.timedTests):
        suiteElapsedTime = time.time() - suiteStartTime
        print "== Testing %s in %d secs ==" % (suite.nodeName(),suiteElapsedTime)
    else:
        print "== Testing %s ==" % suite.nodeName()
    return rc, skipc, total

# Verify the test enviroment is setup correctly
def runTestEnvironmentTests():
    global parser
    global logfile
    suite = unittest2.TestLoader().loadTestsFromTestCase(TestEnvironmentTests)
    # results = unittest2.TextTestRunner( stream=logfile, verbosity=parser.verbosity ).run( suite )
    print "== Testing Test Environment =="
    for test in suite:
        results = unittest2.TextTestRunner( stream=logfile, verbosity=parser.verbosity ).run( test )
        if (len(results.failures) > 0 or len(results.errors) > 0):
            print "Test FAILED  : %s " % test._testMethodName
            print "The test enviroment is not configured correctly. Aborting..."
            exit(1) # always fast fail on basic test environment tests
        else:
            print "Test success : %s " % test._testMethodName
    print "== Testing Test Environment =="

signal.signal(signal.SIGINT, signal_handler)

parser = ArgumentParser()
script_args = parser.parse_args()
logfile = open(parser.logfile, 'w')

if (parser.clientIP != None):
    remote_control.clientIP       = parser.clientIP
if (parser.hostUsername != None):
    remote_control.hostUsername = parser.hostUsername
if (parser.hostKeyFile != None):
    remote_control.hostKeyFile  = parser.hostKeyFile
remote_control.verbosity   = parser.verbosity
remote_control.logfile = logfile
remote_control.interface = int(parser.internalIntfId)
remote_control.interfaceExternal = int(parser.externalIntfId)
remote_control.quickTestsOnly = parser.quickTestsOnly

# if reports isn't installed, install and start it - it is required
reportsNode = None;
if (not uvm.Uvm().getUvmContext().nodeManager().isInstantiated('untangle-node-reporting')):
    print "== Installing untangle-node-reporting =="
    reportsNode = uvm.Uvm().getUvmContext().nodeManager().instantiate('untangle-node-reporting', None)

if ("environment" in parser.suitesToRun or "all" in parser.suitesToRun) and "environment" not in parser.suitesToExclude:
    runTestEnvironmentTests()

if "all" in parser.suitesToRun:
    parser.suitesToRun = test_registry.allNodes()

# remove excluded tests
for testName in parser.suitesToExclude:
    if testName in parser.suitesToRun:
        parser.suitesToRun.remove(testName)

while True:
    rc = 0
    total = 0
    skiptotal = 0

    for node in parser.suitesToRun:
        if node == "environment":
            continue
        testClz = test_registry.getTest(node)
        if testClz == None:
           print "Unable to find tests for \"%s\"" % node
           exit(1)
        errors, skipc, subTotal = runTestSuite(testClz)
        rc += errors
        total += subTotal
        skiptotal += skipc

    if not parser.repeat:
        break

# if reports was added earlier, revert to original settings
if reportsNode != None:
    print "== UnInstalling untangle-node-reporting =="
    uvm.Uvm().getUvmContext().nodeManager().destroy( reportsNode.getNodeSettings()['id'] );

print ""
print "%s passed, %s skipped, %s failed" % (total-rc-skiptotal, skiptotal, rc)
print "More details found in %s" % parser.logfile

exit(rc)
