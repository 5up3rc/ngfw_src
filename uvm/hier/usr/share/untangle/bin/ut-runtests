#!/usr/bin/env python
import sys
sys.path.insert(0, '@PREFIX@/usr/lib/python2.5/')
import getopt

import unittest
import uvm
import untangle_tests
from   untangle_tests import *
from   untangle_tests.webfilter_tests import WebFilterTests
from   untangle_tests.sitefilter_tests import SiteFilterTests
from   untangle_tests.firewall_tests import FirewallTests
from   untangle_tests.classd_tests import ClassdTests
from   untangle_tests.spyware_tests import SpywareTests

class ArgumentParser(object):
    def __init__(self):
        self.hostIP = None
        self.hostUsername = None
        self.hostKeyFile = None
        self.verbosity = 0
        self.logfile = '/tmp/unittest.log'
        self.fastfail = False
        self.externalIntfId = 1
        self.internalIntfId = 2
        self.nodesToTest = ['all']

    def set_hostIP( self, arg ):
        self.hostIP = arg

    def set_username( self, arg ):
        self.username = arg

    def set_keyfile( self, arg ):
        self.password = arg

    def set_logfile( self, arg ):
        self.logfile = arg

    def set_fastfail( self, arg ):
        self.fastfail = True

    def set_nodesToTest( self, arg ):
        self.nodesToTest = arg.split(",")

    def increase_verbosity( self, arg ):
        self.verbosity += 1

    def set_externalIntfId( self, arg ):
        self.externalIntfId = arg

    def set_internalIntfId( self, arg ):
        self.internalIntfId = arg

    def parse_args( self ):
        handlers = {
            '-h' : self.set_hostIP,
            '-u' : self.set_username,
            '-i' : self.set_keyfile,
            '-l' : self.set_logfile,
            '-v' : self.increase_verbosity,
            '-q' : self.set_fastfail,
            '-t' : self.set_nodesToTest,
            '-d' : self.set_externalIntfId,
            '-s' : self.set_internalIntfId
        }

        try:
            (optlist, args) = getopt.getopt(sys.argv[1:], 'h:u:i:l:d:s:t:vq')
            for opt in optlist:
                handlers[opt[0]](opt[1])
            return args
        except getopt.GetoptError, exc:
            print exc
            printUsage()
            exit(1)

def printUsage():
    sys.stderr.write( """\
%s Usage:
  optional args:
    -h <host>  : client host IP (behind Untangle)
    -u <user>  : client host SSH login
    -i <file>  : client host SSH identity (key) file
    -l <file>  : log file
    -d <int>   : interface ID of the external interface (outside) default: 1
    -s <int>   : interface ID of the internal interface (client) default: 2
    -t <nodes> : comma seperated list nodes to test (default: "all") (exm: "webfilter,spyware")
    -v         : verbose (can be specified more than one time)
    -q         : quit on first failure
""" % sys.argv[0] )

def exit(code):
    global parser
    if (code != 0):
        print ""
        print "More details found in %s" % parser.logfile
    sys.exit(code)

def runTestSuite(suite):
    global parser
    global logfile
    print "== Testing %s ==" % suite.nodeName()
    tests = unittest.TestLoader().loadTestsFromTestCase(suite)
    for test in tests:
        results = unittest.TextTestRunner( stream=logfile, verbosity=parser.verbosity ).run( test )
        if (len(results.failures) > 0 or len(results.errors) > 0):
            print "Test FAILED  : %s " % test._testMethodName
            if (parser.fastfail): 
                exit(1)
        else:
            print "Test success : %s " % test._testMethodName
    print "== Testing %s ==" % suite.nodeName()

# Verify the test enviroment is setup correctly
def runTestEnvironmentTests():
    global parser
    global logfile
    suite = unittest.TestLoader().loadTestsFromTestCase(TestEnvironmentTests)
    # results = unittest.TextTestRunner( stream=logfile, verbosity=parser.verbosity ).run( suite )
    print "== Testing Test Environment =="
    for test in suite:
        results = unittest.TextTestRunner( stream=logfile, verbosity=parser.verbosity ).run( test )
        if (len(results.failures) > 0 or len(results.errors) > 0):
            print "Test FAILED  : %s " % test._testMethodName
            print "The test enviroment is not configured correctly. Aborting..."
            exit(1) # always fast fail on basic test environment tests
        else:
            print "Test success : %s " % test._testMethodName
    print "== Testing Test Environment =="




parser = ArgumentParser()
script_args = parser.parse_args()
logfile = open(parser.logfile, 'w')

if (parser.hostIP != None):
    ClientControl.hostIP       = parser.hostIP
if (parser.hostUsername != None):
    ClientControl.hostUsername = parser.hostUsername
if (parser.hostKeyFile != None):
    ClientControl.hostKeyFile  = parser.hostKeyFile
ClientControl.verbosity   = parser.verbosity;
ClientControl.logfile = logfile;
ClientControl.interface = parser.internalIntfId;
ClientControl.interfaceExternal = parser.externalIntfId;


if ("environment" in parser.nodesToTest or "all" in parser.nodesToTest):
    runTestEnvironmentTests()
if ("webfilter" in parser.nodesToTest or "all" in parser.nodesToTest):
    runTestSuite(WebFilterTests)
if ("sitefilter" in parser.nodesToTest or "all" in parser.nodesToTest):
    runTestSuite(SiteFilterTests)
if ("firewall" in parser.nodesToTest or "all" in parser.nodesToTest):
    runTestSuite(FirewallTests)
if ("classd" in parser.nodesToTest or "all" in parser.nodesToTest):
    runTestSuite(ClassdTests)
if ("spyware" in parser.nodesToTest or "all" in parser.nodesToTest): 
    runTestSuite(SpywareTests)

print ""
print "More details found in %s" % parser.logfile
