import os, platform

# ARM
isARM = ( platform.machine().startswith('arm') )

#global max_heap_size
#global max_virtual_size
#global gc_safety_factor
#global gc_min_cycle

# the next values will be overridden by untangle-hw
max_heap_size="320m"
max_virtual_size="1100000"
gc_safety_factor="90"
gc_min_cycle="10"
session_limit="10000"
reports_max_queue_len="1000000"

# load the hardware specific settings
if os.path.exists("/usr/share/untangle/conf/untangle-hw.conf"):
   exec(open("/usr/share/untangle/conf/untangle-hw.conf"));
if os.path.exists("@PREFIX@/usr/share/untangle/conf/untangle-hw.conf"):
   exec(open("@PREFIX@/usr/share/untangle/conf/untangle-hw.conf"));    

# #
# # untangle-vm configuration
# #
uvm_args=""

uvm_logdir = "/var/log/uvm/"
uvm_rundir = "/var/run"
uvm_console_log  = uvm_logdir + "console.log"
uvm_wrapper_log  = uvm_logdir + "wrapper.log"
uvm_uvm_log      = uvm_logdir + "uvm.log"
uvm_gc_log       = uvm_logdir + "gc.log"
uvm_packages_log = uvm_logdir + "packages.log"
uvm_cmd = "/usr/bin/uvm"
uvm_user = "root"

uvm_args += " -Dprefix=@PREFIX@"

uvm_args += " -Djava.library.path=@PREFIX@/usr/lib/uvm"

## Set a session limit
if int(session_limit) > 0:
   uvm_args += " -Dnetcap.sessionlimit=%s" % session_limit 

uvm_args += " -Dreports.max_queue_len=%s" % reports_max_queue_len 

## Set debug levels
#uvm_args += " -Dnetcap.debug.netcap=1" 
#uvm_args += " -Dnetcap.debug.jnetcap=1" 
#uvm_args += " -Dnetcap.debug.vector=1" 
#uvm_args += " -Dnetcap.debug.jvector=1" 
#uvm_args += " -Dnetcap.debug.mvutil=1" 

## Reduce DNS caching to minimal (30 seconds).  
uvm_args += " -Dnetworkaddress.cache.ttl=30 -Dsun.net.inetaddr.ttl=30 -Dnetworkaddress.cache.negative.ttl=10"

## Prefer IPv4 (fixes IPv6 DNS crash - ticket #24827)
uvm_args += " -Djava.net.preferIPv4Stack=true"

## Alternative store
#uvm_args += " -Duvm.store.url=https://develop.untangle.com/store/open.php"

## Alternative license server
#uvm_args += " -Duvm.license.url=http://staging-license.untangle.com/license.php"

## if devel
if not "x" == "x@PREFIX@":  
   uvm_args += " -Dcom.untangle.isDevel=true" 


#
# JAVA configuration
#
java_opts=""

## Debugging (JDB)
# java_opts += " -Xdebug -Xrunjdwp:transport=dt_socket,server=y,address=1337"

## Max Heap Size
java_opts += " -Xmx%s" % max_heap_size

## Min Heap Size
java_opts += " -Xms128m"

## Concurrent Garbage collector
java_opts += " -XX:+UseConcMarkSweepGC -XX:+CMSIncrementalMode -XX:+CMSIncrementalPacing -XX:CMSIncrementalDutyCycleMin=%s -XX:CMSIncrementalDutyCycle=50 -XX:CMSIncrementalSafetyFactor=%s" % (gc_min_cycle, gc_safety_factor)

## G1 Garbage collector
# java_opts += " -XX:+UseG1GC"

## Garbage collector logging
java_opts += " -Xloggc:%s -XX:+PrintGCDetails -XX:+PrintGCDateStamps" % uvm_gc_log

## Garbage collector verbosity
java_opts += " -verbose:gc"

## Server mode (optimizes code at startup)
if not isARM: # -server not available
   java_opts += " -server"

## Stack size
if platform.architecture()[0] == '64bit':
    java_opts += " -d64 -Xss228k"
else:
    java_opts += " -Xss100k"

## if devel
if not "x" == "x@PREFIX@":  
   java_opts += " -ea"
   
