#! /bin/bash
# $Id: uvm,v 1.10 2005/03/22 01:51:56 cng Exp $

### BEGIN INIT INFO
# Provides:          untangle-vm
# Required-Start:    $local_fs $network $syslog
# Required-Stop:     $local_fs $network $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Untangle Virtual Machine
### END INIT INFO

. /lib/lsb/init-functions

DESC="Untangle VM"

NAME="untangle VM"


if [ -f @PREFIX@/etc/default/untangle-vm ] ; then
    . @PREFIX@/etc/default/untangle-vm
fi

UVM_LOGDIR=${UVM_LOGDIR:-@PREFIX@/var/log/uvm}
UVM_RUNDIR=${UVM_RUNDIR:-@PREFIX@/var/run}
UVM_NICENESS=${UVM_NICENESS:-0}
UVM_CONSOLE_LOG=${UVM_CONSOLE_LOG:-$UVM_LOGDIR/console.log}
UVM_WRAPPER_LOG=${UVM_WRAPPER_LOG:-$UVM_LOGDIR/wrapper.log}
UVM_STATUS_FILE=${UVM_STATUS_FILE:-@PREFIX@/mnt/hgfs/untangle/status}
UVM_CMD=${UVM_CMD:-@PREFIX@/usr/bin/uvm}
UVM_USER=${UVM_USER:-$USER}
UVM_PID="uvm.pid"
UVM_CHUSER=" --chuid $UVM_USER:$UVM_USER "
UVM_TIMEOUT=300

# if in the build
if [ "x" != "x@PREFIX@" ] ; then
    UVM_CHUSER=""
    UVM_NICENESS="0"
    if [ "$USER" != "root" ] ; then
        echo "sudo $0 $*"
        exec sudo $0 $*
    fi
fi

updateStatus() {
    echo -ne $1
    
    if [ -d `dirname $UVM_STATUS_FILE` ] ; then 
        [ -f "${UVM_STATUS_FILE}" ] && grep -qi Installing ${UVM_STATUS_FILE} && return
        echo "$2" > $UVM_STATUS_FILE
    fi
}

updateStatusExit() {
    updateStatus $1 $2
    exit
}

# Finds the actual java uvm process
uvmJavaPid() {
    ps awwx | fgrep java | fgrep com.untangle.uvm.engine.Main | awk '{print $1}'
}

case "$1" in
    start)
        echo -n "Starting UVM: "

        # This is a hack to not start during install phase
        if [ ! -z "`cat /proc/cmdline | grep mv_install`" ] ; then
            echo "Skipping."
            exit
        fi

        if [ -f ${UVM_RUNDIR}/${UVM_PID} ] ; then
            pid=`cat ${UVM_RUNDIR}/${UVM_PID}`
            if [ -z "`ps ax | awk '{print $1}' | grep \"^$pid$\"`" ] ; then
                echo -n "Removing Stale PIDfile  (file:`cat ${UVM_RUNDIR}/${UVM_PID}` pid:$pid) "
                rm -f ${UVM_RUNDIR}/${UVM_PID}
            else
                echo "Already started."
                exit
            fi
        fi

        updateStatus "[." "Starting"

        start-stop-daemon --start \
            --background --make-pidfile -q \
            --pidfile ${UVM_RUNDIR}/${UVM_PID} \
            --chdir ${UVM_RUNDIR} \
            --nicelevel ${UVM_NICENESS} \
            $UVM_CHUSER \
            --exec ${UVM_CMD} -- ${UVM_ARGS}

        if [ $? != "0" ] ; then
            updateStatusExit "x]\n" "Stopped"
        fi

        echo -n "." ; sleep 1 ; echo -n "." ; sleep 1 # time for console.log to be rm'd

        pid=$(cat ${UVM_RUNDIR}/${UVM_PID})

        # Wait for completion
        for i in `seq 1 $UVM_TIMEOUT` ; do
            ps -p $pid >/dev/null
            if [ $? -ne 0 ]; then
                updateStatusExit "x]\n" "Stopped"
            fi

            EXPC="`cat $UVM_CONSOLE_LOG 2>/dev/null | grep -i exception `"
            FINI="`cat $UVM_CONSOLE_LOG 2>/dev/null | grep -i 'vegetables' `"
            sleep 1
            echo -n "."

            if [ "x" != "x$EXPC" ] ; then
                if [ ! -z "`echo $EXPC | grep -i \"address already in use\"`" ] ; then
                    echo -e "x]\nAddress already in use. Will attempt to rebind for five minutes."
                else
                    echo -e "x]\nException in $UVM_CONSOLE_LOG"
                    if [ "x" != "x@PREFIX@" ] ; then
                        $0 stop
                        exit
                    fi
                    exit
                fi
            fi

            if [ "x" != "x$FINI" ] ; then
                break
            fi
        done

        # Wait for completion, ignore exceptions because they are node exceptions
        for i in `seq 1 $UVM_TIMEOUT` ; do
            FINI="`cat $UVM_CONSOLE_LOG 2>/dev/null | grep -i 'postInit complete' `"
            sleep 1
            echo -n "."
            if [ "x" != "x$FINI" ] ; then
                updateStatusExit "]\n" "Running"
            fi
        done

        echo "x]"
	log_end_msg 0
        ;;

    stop)
        echo -n "Stopping UVM: "

        if [ ! -f ${UVM_RUNDIR}/${UVM_PID} ] ; then
            echo "Not Running."
            exit
        fi

        updateStatus "[." "Stopping"

        # Attempt polite kill first
        start-stop-daemon -s INT --stop \
            -q \
            --pidfile ${UVM_RUNDIR}/${UVM_PID}
        code=$?

        if [ $code != "0" ] ; then
            updateStatusExit "x]\n" "Stopped"
        fi

        rm -f ${UVM_RUNDIR}/${UVM_PID}  &> /dev/null

        # Wait for completion
        for i in `seq 1 15` ; do
            FINI="`cat $UVM_CONSOLE_LOG 2>/dev/null | grep -i 'shutdown complete' `"
            sleep 1
            echo -n "."
            if [ "x" != "x$FINI" ] ; then
                sleep 1  
                updateStatusExit "]\n" "Stopped"
            fi
            if [ -z "`uvmJavaPid`" ] ; then
                break
            fi
        done

        # Attempt more aggressive kill now
        echo -n "ungraceful exit"
        kill -INT `uvmJavaPid` &>/dev/null
        killall -s INT uvm &>/dev/null
        kill `uvmJavaPid` &>/dev/null
        killall uvm &>/dev/null

        # Wait for completion
        for i in `seq 1 5` ; do
            FINI="`cat $UVM_CONSOLE_LOG 2>/dev/null | grep -i 'shutdown complete' `"
            sleep 1
            echo -n "."
            if [ "x" != "x$FINI" ] ; then
                sleep 1 
                updateStatusExit "]\n" "Stopped"
            fi
            if [ -z "`uvmJavaPid`" ] ; then
                break
            fi
        done

        # Wait for completion
        for i in `seq 1 5` ; do
            # send a kill signal
            kill -9 `uvmJavaPid` &>/dev/null
            killall -9 uvm &>/dev/null

            sleep 1
            echo -n "."
            if [ -z "`uvmJavaPid`" ] ; then
                updateStatusExit "]\n" "Stopped"
            fi
        done

        echo "x]"
	log_end_msg 1
        ;;

    restart|force-reload)
        $0 stop
        sleep 1
        $0 start
        ;;

    *)
        echo "Usage: /etc/init.d/uvm {start|stop|restart|force-reload}"
        exit
esac

exit 0
