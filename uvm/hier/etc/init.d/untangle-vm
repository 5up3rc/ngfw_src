#!/bin/bash

### BEGIN INIT INFO
# Provides:          untangle-vm
# Required-Start:    $local_fs $network $syslog
# Required-Stop:     $local_fs $network $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Untangle Virtual Machine
### END INIT INFO

. /lib/lsb/init-functions

if [ -f @PREFIX@/etc/untangle/oem/oem.sh ] ; then
    source @PREFIX@/etc/untangle/oem/oem.sh
else
    OEM_NAME="Untangle"
fi

DESC="${OEM_NAME} VM"
UVM_LOGDIR=${UVM_LOGDIR:-/var/log/uvm}
UVM_RUNDIR=${UVM_RUNDIR:-/var/run}
UVM_NICENESS=${UVM_NICENESS:-0}
UVM_CONSOLE_LOG=${UVM_CONSOLE_LOG:-$UVM_LOGDIR/console.log}
UVM_WRAPPER_LOG=${UVM_WRAPPER_LOG:-$UVM_LOGDIR/wrapper.log}
UVM_CMD=${UVM_CMD:-@PREFIX@/usr/bin/uvm}
UVM_USER=${UVM_USER:-$USER}
UVM_PID_FILE="uvm.pid"
UVM_CHUSER=" --chuid $UVM_USER:$UVM_USER "
UVM_TIMEOUT=300

MONIT="monit -c /etc/untangle/monit.conf"

# if in the build
if [ -n "@PREFIX@" ] ; then
    UVM_CHUSER=""
    UVM_NICENESS="0"
    if [ "$USER" != "root" ] ; then
        echo "sudo $0 $*"
        exec sudo -E $0 $*
    fi
fi

monitorAll() {
    [ -z "@PREFIX@" ] && $MONIT monitor all
}

unmonitorAll() {
    [ $(ps -p $PPID -o fname=) != 'monit' ] && {
        ## This file is used to make sure that the uvm script doesn't tell monit to resume
        ## for a while.
        touch "${UVM_RUNDIR}/unmonitor"

        sleep 1
        $MONIT unmonitor all
    }
}

updateStatus() {
    echo -ne $1
}

updateStatusExit() {
    updateStatus $1 $2
    log_end_msg 0
    exit
}

# Finds the actual java uvm process
uvmJavaPid() {
    ps awwx | awk '/[j]ava.*com.untangle.uvm.engine.Main/ {print $1}'
}

case "$1" in
    start)
        log_daemon_msg "Starting $DESC"

        # This is a hack to not start during install phase
        if grep -q mv_install /proc/cmdline ; then
            echo "Skipping."
            log_end_msg 0
            exit
        fi

        if [ -f ${UVM_RUNDIR}/${UVM_PID_FILE} ] ; then
            pid=`cat ${UVM_RUNDIR}/${UVM_PID_FILE}`
            if ! ps ax | grep -qE '^'$pid'$' ; then
                echo -n "Removing Stale PIDfile  (file:`cat ${UVM_RUNDIR}/${UVM_PID_FILE}` pid:$pid) "
                rm -f ${UVM_RUNDIR}/${UVM_PID_FILE}
            else
                echo "Already started."
		        monitorAll
		        log_end_msg 0
                exit
            fi
        fi

        # clear console.log
        
        echo >| $UVM_CONSOLE_LOG;

        updateStatus "[" "Starting"

        start-stop-daemon --start \
            --background --make-pidfile -q \
            --pidfile ${UVM_RUNDIR}/${UVM_PID_FILE} \
            --chdir ${UVM_RUNDIR} \
            --nicelevel ${UVM_NICENESS} \
            $UVM_CHUSER \
            --exec ${UVM_CMD} -- ${UVM_ARGS}

        if [ $? != "0" ] ; then
            updateStatusExit "x]\n" "Stopped"
        fi

        echo -n "." ; sleep 1 # wait for initial start

        pid=$(cat ${UVM_RUNDIR}/${UVM_PID_FILE})

        # Wait for completion
        for i in `seq 1 $UVM_TIMEOUT` ; do
            echo -n "."

            ps -p $pid >/dev/null
            if [ $? -ne 0 ]; then
                updateStatusExit "x]\n" "Stopped"
            fi

            EXPC="$(egrep -i '(fatal error|exception)' $UVM_CONSOLE_LOG 2> /dev/null)"
            FINI="$(grep -i 'startup complete' $UVM_CONSOLE_LOG 2>/dev/null)"

            if [ -n "$EXPC" ] ; then
                if echo $EXPC | grep -qi "address already in use" ; then
                    echo -e "x]\nAddress already in use. Will attempt to rebind for five minutes."
                else
                    echo -e "x]\nException in $UVM_CONSOLE_LOG"
                    if [ -n "@PREFIX@" ] ; then
                        $0 stop
			            log_end_msg 0
                        exit
                    fi
		            monitorAll
		            log_end_msg 0
                    exit
                fi
            fi

            if [ -n "$FINI" ] ; then
                break
            fi

            sleep 1
        done

        # Wait for completion, ignore exceptions because they are node exceptions
        echo -n "|"
        for i in `seq 1 $UVM_TIMEOUT` ; do
            echo -n "."

            if grep -qi 'postInit complete' $UVM_CONSOLE_LOG 2>/dev/null ; then
	            monitorAll
                updateStatusExit "]\n" "Running"
            fi

            sleep 1
        done

        echo "x]"
	    log_end_msg 0
        ;;

    stop)
        log_daemon_msg "Stopping $DESC"
	    unmonitorAll

        if [ ! -f ${UVM_RUNDIR}/${UVM_PID_FILE} ] ; then
            echo "Not Running."
	        log_end_msg 0
            exit
        fi

        updateStatus "[" "Stopping"

        # Attempt polite kill first
        start-stop-daemon -s INT --stop -q --pidfile ${UVM_RUNDIR}/${UVM_PID_FILE}
        code=$?

        # exit if start-stop-daemon failed and the process was not found anyway (it must already be dead)
        if [ $code != "0" ] && [ -z "`uvmJavaPid`" ] ; then
	        unmonitorAll
            updateStatusExit "x]\n" "Stopped"
        fi

        rm -f ${UVM_RUNDIR}/${UVM_PID_FILE}  &> /dev/null

        # Wait for completion
        for i in `seq 1 10` ; do
            echo -n "."
            sleep 1
            if grep -qi 'shutdown complete' $UVM_CONSOLE_LOG 2>/dev/null ; then
		        unmonitorAll
                updateStatusExit "]\n" "Stopped"
            fi
            if [ -z "`uvmJavaPid`" ] ; then
                break
            fi
        done

        # Attempt more aggressive kill now
        echo -n "ungraceful exit"
        kill -INT `uvmJavaPid` &>/dev/null
        killall -s INT uvm &>/dev/null
        kill `uvmJavaPid` &>/dev/null
        killall uvm &>/dev/null

        # Wait for completion
        for i in `seq 1 5` ; do
            echo -n "."
            if grep -qi 'shutdown complete' $UVM_CONSOLE_LOG 2>/dev/null ; then
                sleep 1 
		        unmonitorAll
                updateStatusExit "]\n" "Stopped"
            fi
            if [ -z "`uvmJavaPid`" ] ; then
    	        unmonitorAll
                updateStatusExit "]\n" "Stopped"
            fi
            sleep 1
        done

        # Wait for completion
        echo -n "!"
        for i in `seq 1 5` ; do
            # send a kill signal
            kill -9 `uvmJavaPid` &>/dev/null
            killall -9 uvm &>/dev/null

            echo -n "."
            if [ -z "`uvmJavaPid`" ] ; then
    	        unmonitorAll
                updateStatusExit "]\n" "Stopped"
            fi
            sleep 1
        done

        echo "x]"
	    unmonitorAll
	    log_end_msg 0
        ;;

    restart|force-reload)
        $0 stop
        $0 start
        ;;

    *)
        echo "Usage: /etc/init.d/untangle-vm {start|stop|restart|force-reload}"
        exit
esac

exit 0
